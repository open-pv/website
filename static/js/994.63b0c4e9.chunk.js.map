{"version":3,"file":"static/js/994.63b0c4e9.chunk.js","mappings":"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","sources":["simulation/stl_to_array.js","simulation/stlviewer.js","simulation/utils.js","simulation/webgl_raytracing_points.js","simulation/pv_simulation.js","simulation/download.js","simulation/lazimport.js","components/ErrorMessages/TooManyUniforms.js","components/ErrorMessages/WrongAdress.js","components/PVSimulation/SearchField.js","components/ThreeViewer/ThreeViewer.js","components/ThreeViewer/ViridisLegend.js","pages/Index.js"],"sourcesContent":["import { vec3 } from \"gl-matrix\"\n// const { vec3, mat4 } = glMatrix;\n\nexport function loadSTL(model) {\n  return new Promise((resolve, reject) => {\n    new THREE.STLLoader().load(\n      model,\n      function (geometry) {\n        // Extract the position and normal arrays from the geometry\n        const positionArray = geometry.attributes.position.array\n        //const normalArray = geometry.attributes.normal.array;\n\n        const triangles = []\n\n        for (let i = 0; i < positionArray.length; i += 9) {\n          const triangle = [\n            Array.from(positionArray.slice(i, i + 3)),\n            Array.from(positionArray.slice(i + 3, i + 6)),\n            Array.from(positionArray.slice(i + 6, i + 9)),\n          ]\n\n          triangles.push(triangle.map((v) => vec3.fromValues(...v)))\n        }\n\n        const threshold = 0.1 // Set your desired threshold value here\n        const subdividedTriangles = adaptiveSubdivideMesh(triangles, threshold)\n\n        // Return the arrays in an object\n        resolve({\n          original_vertices: positionArray,\n          subdivided_triangles: subdividedTriangles,\n        })\n      },\n      undefined,\n      reject\n    )\n  })\n}\n\nexport function subdivideTriangle(triangle) {\n  const [v0, v1, v2] = triangle\n\n  const m01 = vec3.clone(v0)\n  const m12 = vec3.clone(v1)\n  const m20 = vec3.clone(v2)\n\n  vec3.lerp(m01, v0, v1, 0.5)\n  vec3.lerp(m12, v1, v2, 0.5)\n  vec3.lerp(m20, v2, v0, 0.5)\n\n  return [\n    [v0, m01, m20],\n    [v1, m12, m01],\n    [v2, m20, m12],\n    [m01, m12, m20],\n  ]\n}\n\nexport function adaptiveSubdivideMesh(triangles, threshold) {\n  const subdividedTrianglesList = []\n\n  for (const triangle of triangles) {\n    let trianglesToSubdivide = [triangle]\n\n    while (trianglesToSubdivide.length > 0) {\n      const currentTriangle = trianglesToSubdivide.pop()\n\n      const edge1 = vec3.create()\n      const edge2 = vec3.create()\n\n      vec3.sub(edge1, currentTriangle[1], currentTriangle[0])\n      vec3.sub(edge2, currentTriangle[2], currentTriangle[0])\n\n      const crossProduct = vec3.create()\n      vec3.cross(crossProduct, edge1, edge2)\n      const area = 0.5 * vec3.len(crossProduct)\n\n      let lengthEdge1\n      let lengthEdge2\n\n      lengthEdge1 = vec3.dot(edge1, edge1)\n      lengthEdge2 = vec3.dot(edge2, edge2)\n\n      if (area <= threshold && Math.max(lengthEdge1, lengthEdge2) <= 1) {\n        subdividedTrianglesList.push(currentTriangle)\n      } else {\n        const subdividedTriangles = subdivideTriangle(currentTriangle)\n        trianglesToSubdivide.push(...subdividedTriangles)\n      }\n    }\n  }\n\n  return subdividedTrianglesList\n}\n","import * as THREE from \"three\";\nimport { MapControls } from \"three/addons/controls/MapControls.js\";\n\nexport var scene = null;\nexport var renderer = null;\nexport var camera = null;\nexport var controls = null;\nexport var raycaster = new THREE.Raycaster();\nexport var mouse = new THREE.Vector2();\nexport var cursor = null;\nexport var lastMousePosition = { x: 0, y: 0 };\nexport var clickedPoints = [];\nexport var pointColors = [];\nvar drawnObjects = [];\nvar prefilteredPolygons = [];\nlet polygonYields = [];\n\nconst POLYGON_PREFILTERING_CUTOFF = 10;\nconst TRIANGLE_SUBDIVSION_THRESHOLD = 1;\nconst ANNUAL_YIELD_SCALING_FACTOR = 3.75;\n\n//camera controls\nlet isTransitioning = false;\nlet transitionStartTime = 0;\nconst transitionDuration = 50; // Duration in milliseconds\nlet startTarget = null;\nlet endTarget = null;\nlet startPosition = null;\nlet endPosition = null;\nlet mouseCursor = null;\n\nexport function STLViewerEnable(classname) {\n  var model = document.getElementsByClassName(classname)[0];\n  STLViewer(model);\n}\n\nexport function STLViewer(resetCamera = true) {\n  const elem = document.getElementsByClassName(\"three-viewer\")[0];\n\n  elem.style.width = \"100%\";\n  elem.style.height = \"450px\";\n  renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n  if (resetCamera === false || camera === null) {\n    camera = new THREE.PerspectiveCamera(\n      45,\n      elem.clientWidth / elem.clientHeight,\n      1,\n      1000\n    );\n    camera.up = new THREE.Vector3(0, 0, 1);\n  }\n  renderer.setSize(elem.clientWidth, elem.clientHeight);\n  elem.replaceChild(renderer.domElement, elem.firstChild);\n\n  window.addEventListener(\n    \"resize\",\n    function () {\n      renderer.setSize(elem.clientWidth, elem.clientHeight);\n      camera.aspect = elem.clientWidth / elem.clientHeight;\n      camera.updateProjectionMatrix();\n    },\n    false\n  );\n\n  setupControls();\n  setupScene();\n  addEventListeners(elem);\n  animate();\n}\n\nfunction onRightClick(event) {\n  event.preventDefault();\n  const elem = document.getElementsByClassName(\"three-viewer\")[0];\n  const rect = elem.getBoundingClientRect();\n\n  const mouse = new THREE.Vector2();\n  mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n  mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n  raycaster.setFromCamera(mouse, camera);\n  const intersects = raycaster.intersectObjects(scene.children, true);\n\n  if (intersects.length > 0) {\n    const intersect = intersects[0];\n    const intersectPoint = intersect.point.clone();\n    \n    // Calculate the offset between the camera and the intersection point\n    const offset = new THREE.Vector3().subVectors(camera.position, controls.target);\n    \n    // Store the start and end positions for interpolation\n    startTarget = controls.target.clone();\n    endTarget = intersectPoint;\n    startPosition = camera.position.clone();\n    endPosition = intersectPoint.clone().add(offset);\n\n    // Start the transition\n    isTransitioning = true;\n    transitionStartTime = performance.now();\n  }\n}\n\nfunction setupScene() {\n  scene = new THREE.Scene();\n  addLightsToScene();\n\n  const legend = createLegend();\n  scene.add(legend);\n}\nfunction setupControls() {\n  controls = new MapControls(camera, renderer.domElement);\n  controls.mouseButtons = {\n    LEFT: THREE.MOUSE.PAN,\n    MIDDLE: THREE.MOUSE.DOLLY,\n    RIGHT: THREE.MOUSE.ROTATE,\n  };\n  controls.screenSpacePanning = false;\n  controls.maxPolarAngle = Math.PI / 2;\n\n  renderer.domElement.addEventListener('contextmenu', onRightClick, false);\n}\n\nfunction addLightsToScene() {\n  const lightConfigs = [\n    { color: 0xffffff, intensity: 0.25, position: [0, -0.3, 1] },\n    { color: 0xffffff, intensity: 0.1, position: [0.3, -0.3, 1] },\n    { color: 0xffffff, intensity: 0.1, position: [-0.3, -0.3, 1] },\n  ];\n  lightConfigs.forEach(config => {\n    const light = new THREE.DirectionalLight(config.color, config.intensity);\n    light.position.set(...config.position);\n    scene.add(light);\n  });\n  scene.add(new THREE.AmbientLight(0xffffff, 1));\n}\n\nfunction addEventListeners(elem) {\n  elem.addEventListener('mousemove', onMouseMove, false);\n  window.addEventListener('keydown', onKeyDown, false);\n}\n\nfunction onWindowResize() {\n  const elem = document.getElementsByClassName(\"three-viewer\")[0];\n  renderer.setSize(elem.clientWidth, elem.clientHeight);\n  camera.aspect = elem.clientWidth / elem.clientHeight;\n  camera.updateProjectionMatrix();\n}\n\nfunction onMouseMove(event) {\n  const elem = document.getElementsByClassName(\"three-viewer\")[0];\n  const rect = elem.getBoundingClientRect();\n\n  lastMousePosition.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\n  lastMousePosition.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\n\n  raycaster.setFromCamera(lastMousePosition, camera);\n  const intersects = raycaster.intersectObjects(scene.children.filter(obj => !drawnObjects.includes(obj)), true);\n\n  if (intersects.length > 0) {\n    const intersect = intersects[0];\n    const point = intersect.point.clone();\n\n    if (mouseCursor) {\n      mouseCursor.position.copy(point);\n    } else {\n      mouseCursor = createMouseCursor(point);\n      scene.add(mouseCursor);\n    }\n  } else {\n    if (mouseCursor) {\n      scene.remove(mouseCursor);\n      mouseCursor = null;\n    }\n  }\n\n  if (clickedPoints.length > 0) {\n    const intersects = raycaster.intersectObjects(scene.children, true);\n    if (intersects.length > 0) {\n      const intersect = intersects[0];\n      const potentialVertex = intersect.point.clone();\n      const lastVertex = clickedPoints[clickedPoints.length - 1];\n      const distance = potentialVertex.distanceTo(lastVertex);\n      console.log('Distance to potential vertex:', distance);\n    }\n  }\n}\n\nfunction onKeyDown(event) {\n  if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {\n    return;\n  }\n\n  if (event.code === 'Space') {\n    event.preventDefault();\n    handleSpaceKey();\n  } else if (event.code === 'KeyP') {\n    createPolygon();\n  } else if (event.code === 'KeyR') {\n    resetScene();\n  }\n}\n\nfunction handleSpaceKey() {\n  raycaster.setFromCamera(lastMousePosition, camera);\n  const intersects = raycaster.intersectObjects(scene.children.filter(obj => !drawnObjects.includes(obj)), true);\n\n  if (intersects.length > 0) {\n    const intersect = intersects[0];\n    const offsetPoint = intersect.face\n      ? intersect.point.clone().add(intersect.face.normal.clone().multiplyScalar(0.1))\n      : intersect.point.clone();\n\n    clickedPoints.push(offsetPoint);\n    pointColors.push(getColorAtIntersection(intersect));\n    console.log('Color at intersection:', pointColors[pointColors.length - 1].getStyle());\n\n    if (cursor) {\n      scene.remove(cursor);\n    }\n\n    cursor = createCursor(offsetPoint);\n    scene.add(cursor);\n    console.log('Cursor added at:', offsetPoint);\n  } else {\n    console.log('No intersection found');\n  }\n}\n\nfunction getColorAtIntersection(intersect) {\n  const uv = intersect.uv;\n  const material = intersect.object.material;\n\n  if (material.map && material.map.image && uv) {\n    const { image } = material.map;\n    const { width, height } = image;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0, width, height);\n\n    const x = Math.floor(uv.x * width);\n    const y = Math.floor((1 - uv.y) * height);\n    const pixel = context.getImageData(x, y, 1, 1).data;\n\n    return new THREE.Color(pixel[0] / 255, pixel[1] / 255, pixel[2] / 255);\n  }\n\n  if (material.color) {\n    return material.color.clone();\n  }\n\n  return new THREE.Color(0xffffff);\n}\n\nfunction createCursor(position) {\n  const geometry = new THREE.SphereGeometry(0.1, 16, 16);\n  const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.position.copy(position);\n  return mesh;\n}\n\nfunction createMouseCursor(position) {\n  const geometry = new THREE.SphereGeometry(0.05, 16, 16);\n  const material = new THREE.MeshBasicMaterial({ color: 0x0000ff });\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.position.copy(position);\n  return mesh;\n}\n\nfunction createSprite(text, position) {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n\n  canvas.width = 640;\n  canvas.height = 128;\n\n  context.font = '55px Arial';\n  context.fillStyle = 'white';\n\n  context.fillStyle = 'rgba(0, 0, 0, 0.3)';\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  const lines = text.split('\\n');\n  context.font = '55px Arial';\n  context.fillStyle = 'white';\n  lines.forEach((line, index) => {\n    context.fillText(line, 10, 60 + index * 60);\n  });\n\n  const texture = new THREE.CanvasTexture(canvas);\n  const spriteMaterial = new THREE.SpriteMaterial({ \n    map: texture,\n    depthTest: false  \n  });\n  const sprite = new THREE.Sprite(spriteMaterial);\n  sprite.position.copy(position);\n  sprite.scale.set(5, 1, 1);\n  sprite.renderOrder = 999;\n  return sprite;\n}\n\nfunction createPolygon() {\n  if (clickedPoints.length < 3) {\n    console.log('Not enough points to create a polygon');\n    return;\n  }\n\n  const geometry = new THREE.BufferGeometry();\n  const vertices = [];\n  const colors = [];\n  clickedPoints.forEach((point, index) => {\n    vertices.push(point.x, point.y, point.z);\n    const color = pointColors[index];\n    colors.push(color.r, color.g, color.b);\n  });\n\n  geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n  geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n\n  const indices = THREE.ShapeUtils.triangulateShape(clickedPoints, []);\n  let triangles = indices.map(index => ({\n    a: new THREE.Vector3(vertices[index[0] * 3], vertices[index[0] * 3 + 1], vertices[index[0] * 3 + 2]),\n    b: new THREE.Vector3(vertices[index[1] * 3], vertices[index[1] * 3 + 1], vertices[index[1] * 3 + 2]),\n    c: new THREE.Vector3(vertices[index[2] * 3], vertices[index[2] * 3 + 1], vertices[index[2] * 3 + 2]),\n  }));\n\n  triangles = triangles.flatMap(triangle => subdivideTriangle(triangle, TRIANGLE_SUBDIVSION_THRESHOLD));\n\n  prefilteredPolygons = filterPolygonsByDistance(scene, clickedPoints, POLYGON_PREFILTERING_CUTOFF);\n\n  const newVertices = [];\n  const newIndices = [];\n  const newColors = [];\n  const newIntensities = [];\n  triangles.forEach(triangle => {\n    const startIndex = newVertices.length / 3;\n    newVertices.push(triangle.a.x, triangle.a.y, triangle.a.z);\n    newVertices.push(triangle.b.x, triangle.b.y, triangle.b.z);\n    newVertices.push(triangle.c.x, triangle.c.y, triangle.c.z);\n    newIndices.push(startIndex, startIndex + 1, startIndex + 2);\n  });\n\n  for (let i = 0; i < newVertices.length; i += 3) {\n    const vertex = new THREE.Vector3(newVertices[i], newVertices[i + 1], newVertices[i + 2]);\n    const closestPolygon = findClosestPolygon(vertex, prefilteredPolygons);\n    if (closestPolygon) {\n      const projectedVertex = projectOntoTriangle(vertex, closestPolygon);\n      const color = getColorAtPointOnTriangle(projectedVertex, closestPolygon);\n      const intensity = getIntensityAtPointOnTriangle(projectedVertex, closestPolygon);\n      newColors.push(color.r, color.g, color.b);\n      newIntensities.push(intensity);\n    } else {\n      newColors.push(1, 1, 1);\n      newIntensities.push(-1);\n    }\n  }\n\n  const polygonArea = calculatePolygonArea(triangles);\n  const polygonIntensity = calculatePolygonIntensity(newVertices, newIntensities);\n  const annualYield = polygonArea * polygonIntensity * ANNUAL_YIELD_SCALING_FACTOR;\n  console.log('Polygon Area:', polygonArea);\n  console.log('Polygon Intensity:', polygonIntensity);\n\n  geometry.setAttribute('position', new THREE.Float32BufferAttribute(newVertices, 3));\n  geometry.setAttribute('color', new THREE.Float32BufferAttribute(newColors, 3));\n  geometry.setIndex(newIndices);\n\n  const material = new THREE.MeshBasicMaterial({ vertexColors: true, side: THREE.DoubleSide });\n  const mesh = new THREE.Mesh(geometry, material);\n\n  scene.add(mesh);\n  drawnObjects.push(mesh);\n  console.log('Polygon created');\n\n  const edges = new THREE.EdgesGeometry(geometry);\n  const lineMaterial = new THREE.LineBasicMaterial({ color: 0x000000 });\n  const lines = new THREE.LineSegments(edges, lineMaterial);\n  scene.add(lines);\n  drawnObjects.push(lines);\n\n  const wireframeGeometry = new THREE.WireframeGeometry(geometry);\n  const wireframeMaterial = new THREE.LineBasicMaterial({ color: 0xcccccc });\n  const wireframe = new THREE.LineSegments(wireframeGeometry, wireframeMaterial);\n  scene.add(wireframe);\n  drawnObjects.push(wireframe);\n\n  const centroid = calculateCentroid(newVertices);\n  const sprite = createSprite(`Fläche: ${polygonArea.toFixed(2)} qm\\nJahresertrag:${annualYield.toFixed(1)} kWh`, centroid);\n  scene.add(sprite);\n  drawnObjects.push(sprite);\n\n  clickedPoints = [];\n  pointColors = [];\n\n  // Add the new yield to the array and update the legend\n  polygonYields.push(annualYield.toFixed(1));\n  updateLegend(polygonYields);\n\n}\n\nfunction calculateCentroid(vertices) {\n  const numVertices = vertices.length / 3;\n  const centroid = new THREE.Vector3();\n\n  for (let i = 0; i < numVertices; i++) {\n    centroid.x += vertices[i * 3];\n    centroid.y += vertices[i * 3 + 1];\n    centroid.z += vertices[i * 3 + 2] + 0.2;\n  }\n\n  centroid.divideScalar(numVertices);\n\n  return centroid;\n}\n\nfunction subdivideTriangle(triangle, threshold) {\n  const ab = triangle.a.distanceTo(triangle.b);\n  const bc = triangle.b.distanceTo(triangle.c);\n  const ca = triangle.c.distanceTo(triangle.a);\n\n  if (ab > threshold || bc > threshold || ca > threshold) {\n    let longestEdgeMidpoint;\n    if (ab >= bc && ab >= ca) {\n      longestEdgeMidpoint = triangle.a.clone().add(triangle.b).multiplyScalar(0.5);\n      return [\n        ...subdivideTriangle({ a: triangle.a, b: longestEdgeMidpoint, c: triangle.c }, threshold),\n        ...subdivideTriangle({ a: longestEdgeMidpoint, b: triangle.b, c: triangle.c }, threshold),\n      ];\n    } else if (bc >= ab && bc >= ca) {\n      longestEdgeMidpoint = triangle.b.clone().add(triangle.c).multiplyScalar(0.5);\n      return [\n        ...subdivideTriangle({ a: triangle.a, b: triangle.b, c: longestEdgeMidpoint }, threshold),\n        ...subdivideTriangle({ a: triangle.a, b: longestEdgeMidpoint, c: triangle.c }, threshold),\n      ];\n    } else {\n      longestEdgeMidpoint = triangle.c.clone().add(triangle.a).multiplyScalar(0.5);\n      return [\n        ...subdivideTriangle({ a: triangle.a, b: triangle.b, c: longestEdgeMidpoint }, threshold),\n        ...subdivideTriangle({ a: longestEdgeMidpoint, b: triangle.b, c: triangle.c }, threshold),\n      ];\n    }\n  } else {\n    return [triangle];\n  }\n}\n\nfunction calculateTriangleIntensity(triangle) {\n  const intensities = triangle.intensities;\n  const averageIntensity = (intensities[0] + intensities[1] + intensities[2]) / 3;\n  return averageIntensity;\n}\n\nfunction calculatePolygonIntensity(vertices, intensities) {\n  const numTriangles = vertices.length / 9;\n  let totalIntensity = 0;\n  let totalArea = 0;\n\n  for (let i = 0; i < numTriangles; i++) {\n    const triangle = {\n      a: new THREE.Vector3(vertices[i * 9], vertices[i * 9 + 1], vertices[i * 9 + 2]),\n      b: new THREE.Vector3(vertices[i * 9 + 3], vertices[i * 9 + 4], vertices[i * 9 + 5]),\n      c: new THREE.Vector3(vertices[i * 9 + 6], vertices[i * 9 + 7], vertices[i * 9 + 8]),\n      intensities: [\n        intensities[i * 3],\n        intensities[i * 3 + 1],\n        intensities[i * 3 + 2],\n      ],\n    };\n\n    const triangleArea = calculateTriangleArea(triangle);\n    const triangleIntensity = calculateTriangleIntensity(triangle);\n    totalIntensity += triangleIntensity * triangleArea;\n    totalArea += triangleArea;\n  }\n\n  const averageIntensity = totalIntensity / totalArea;\n  console.log('Average Intensity:', averageIntensity);\n  return averageIntensity;\n}\n\nfunction calculatePolygonArea(polygon) {\n  let totalArea = 0;\n  \n  polygon.forEach(triangle => {\n    totalArea += calculateTriangleArea(triangle);\n  });\n\n  return totalArea;\n}\n\nfunction calculateTriangleArea(triangle) {\n  const { a, b, c } = triangle;\n\n  const ab = new THREE.Vector3().subVectors(b, a);\n  const ac = new THREE.Vector3().subVectors(c, a);\n  const crossProduct = new THREE.Vector3().crossVectors(ab, ac);\n  const area = 0.5 * crossProduct.length();\n\n  return area;\n}\n\nfunction filterPolygonsByDistance(scene, points, threshold) {\n  const filteredPolygons = [];\n\n  scene.traverse(child => {\n    if (child.isMesh) {\n      const geometry = child.geometry;\n      if (!geometry.isBufferGeometry) return;\n\n      const positions = geometry.attributes.position.array;\n      const colors = geometry.attributes.color ? geometry.attributes.color.array : null;\n      const intensities = geometry.intensities ? geometry.intensities : null;\n\n      for (let i = 0; i < positions.length; i += 9) {\n        const v0 = new THREE.Vector3(positions[i], positions[i + 1], positions[i + 2]);\n        const v1 = new THREE.Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\n        const v2 = new THREE.Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\n\n        const color0 = colors ? new THREE.Color(colors[i], colors[i + 1], colors[i + 2]) : new THREE.Color(1, 1, 1);\n        const color1 = colors ? new THREE.Color(colors[i + 3], colors[i + 4], colors[i + 5]) : new THREE.Color(1, 1, 1);\n        const color2 = colors ? new THREE.Color(colors[i + 6], colors[i + 7], colors[i + 8]) : new THREE.Color(1, 1, 1);\n\n        const intensity1 = intensities ? intensities[i / 3] : -1000;\n        const intensity2 = intensities ? intensities[i / 3 + 1] : -1000;\n        const intensity3 = intensities ? intensities[i / 3 + 2] : -1000;\n\n        let minDistance = Infinity;\n        points.forEach(point => {\n          const distance = Math.min(point.distanceTo(v0), point.distanceTo(v1), point.distanceTo(v2));\n          if (distance < minDistance) {\n            minDistance = distance;\n          }\n        });\n\n        if (minDistance < threshold) {\n          const normal = new THREE.Triangle(v0, v1, v2).getNormal(new THREE.Vector3());\n          filteredPolygons.push({\n            vertices: [v0, v1, v2],\n            colors: [color0, color1, color2],\n            normal,\n            intensities: [intensity1, intensity2, intensity3],\n          });\n        }\n      }\n    }\n  });\n\n  console.log('Filtered polygons:', filteredPolygons);\n\n  return filteredPolygons;\n}\n\nfunction findClosestPolygon(vertex, polygons) {\n  let closestPolygon = null;\n  let minDistance = Infinity;\n\n  polygons.forEach(polygon => {\n    const [v0, v1, v2] = polygon.vertices;\n    const distance = vertex.distanceTo(v0) + vertex.distanceTo(v1) + vertex.distanceTo(v2);\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestPolygon = polygon;\n    }\n  });\n\n  if (minDistance >= POLYGON_PREFILTERING_CUTOFF) {\n    console.error(`Error: Trying to create a polygon with a distance longer than the threshold (${minDistance})`);\n  }\n\n  return closestPolygon;\n}\n\nfunction projectOntoTriangle(vertex, triangle) {\n  const [v0, v1, v2] = triangle.vertices;\n  const normal = triangle.normal.clone().normalize();\n\n  const d = v0.dot(normal);\n  const t = (d - vertex.dot(normal)) / normal.dot(normal);\n  const projection = vertex.clone().add(normal.clone().multiplyScalar(t));\n\n  return projection;\n}\n\nfunction getColorAtPointOnTriangle(point, triangle) {\n  const [v0, v1, v2] = triangle.vertices;\n  const normal = triangle.normal.clone().normalize();\n\n  const areaABC = normal.dot(new THREE.Vector3().crossVectors(v1.clone().sub(v0), v2.clone().sub(v0)));\n  const areaPBC = normal.dot(new THREE.Vector3().crossVectors(v1.clone().sub(point), v2.clone().sub(point)));\n  const areaPCA = normal.dot(new THREE.Vector3().crossVectors(v2.clone().sub(point), v0.clone().sub(point)));\n\n  const u = areaPBC / areaABC;\n  const v = areaPCA / areaABC;\n  const w = 1 - u - v;\n\n  const color0 = triangle.colors[0];\n  const color1 = triangle.colors[1];\n  const color2 = triangle.colors[2];\n\n  const r = u * color0.r + v * color1.r + w * color2.r;\n  const g = u * color0.g + v * color1.g + w * color2.g;\n  const b = u * color0.b + v * color1.b + w * color2.b;\n\n  return new THREE.Color(r, g, b);\n}\n\nfunction getIntensityAtPointOnTriangle(point, triangle) {\n  const [v0, v1, v2] = triangle.vertices;\n  const normal = triangle.normal.clone().normalize();\n\n  const areaABC = normal.dot(new THREE.Vector3().crossVectors(v1.clone().sub(v0), v2.clone().sub(v0)));\n  const areaPBC = normal.dot(new THREE.Vector3().crossVectors(v1.clone().sub(point), v2.clone().sub(point)));\n  const areaPCA = normal.dot(new THREE.Vector3().crossVectors(v2.clone().sub(point), v0.clone().sub(point)));\n\n  const u = areaPBC / areaABC;\n  const v = areaPCA / areaABC;\n  const w = 1 - u - v;\n\n  const intensity0 = triangle.intensities[0];\n  const intensity1 = triangle.intensities[1];\n  const intensity2 = triangle.intensities[2];\n\n  const intensityAtPoint = u * intensity0 + v * intensity1 + w * intensity2;\n\n  return intensityAtPoint;\n}\n\nfunction resetScene() {\n  drawnObjects.forEach(object => scene.remove(object));\n  drawnObjects = [];\n  clickedPoints = [];\n  pointColors = [];\n  polygonYields = [];\n  console.log('Scene reset');\n\n  // Update the legend with the default or empty yield list\n  updateLegend(polygonYields);\n}\n\nfunction createLegend() {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  canvas.width = 512;\n  canvas.height = 256;\n\n  context.font = '30px Arial';\n  context.fillStyle = 'white';\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  const textLines = [\n    'Space: Add Vertex',\n    'P: Create Polygon',\n    'R: Reset Scene',\n    'Expected Annual Solar Yield: XXX kWh'\n  ];\n\n  context.fillStyle = 'black';\n  textLines.forEach((line, index) => {\n    context.fillText(line, 10, 40 + index * 40);\n  });\n\n  const texture = new THREE.CanvasTexture(canvas);\n  const material = new THREE.SpriteMaterial({ map: texture });\n  const sprite = new THREE.Sprite(material);\n  \n  // Adjust the position and scale of the sprite\n  sprite.scale.set(20, 10, 1);\n  sprite.position.set(-20, 15, 50); // Adjust this based on your scene dimensions\n\n  return sprite;\n}\n\nfunction updateLegend(solarYields) {\n  const oldLegend = scene.getObjectByName('legend');\n  if (oldLegend) {\n    scene.remove(oldLegend);\n  }\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  canvas.width = 512;\n  canvas.height = Math.max(256, solarYields.length * 40 + 80);\n\n  context.font = '30px Arial';\n  context.fillStyle = 'white';\n  context.fillRect(0, 0, canvas.width, canvas.height);\n\n  const textLines = [\n    'Space: Add Vertex',\n    'P: Create Polygon',\n    'R: Reset Scene',\n    ...solarYields.map((solarYield, index) => `Polygon ${index + 1} Yield: ${solarYield} kWh`)\n  ];\n\n  context.fillStyle = 'black';\n  textLines.forEach((line, index) => {\n    context.fillText(line, 10, 40 + index * 40);\n  });\n\n  const texture = new THREE.CanvasTexture(canvas);\n  const material = new THREE.SpriteMaterial({ map: texture });\n  const sprite = new THREE.Sprite(material);\n  \n  // Adjust the position and scale of the sprite\n  sprite.scale.set(20, canvas.height / 256 * 10, 1);\n  sprite.position.set(-20, 15, 50); // Adjust this based on your scene dimensions\n  sprite.name = 'legend';\n\n  scene.add(sprite);\n}\n\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  if (isTransitioning) {\n    const currentTime = performance.now();\n    const elapsedTime = currentTime - transitionStartTime;\n    const t = Math.min(elapsedTime / transitionDuration, 1);\n\n    controls.target.lerpVectors(startTarget, endTarget, t);\n    camera.position.lerpVectors(startPosition, endPosition, t);\n\n    if (t === 1) {\n      isTransitioning = false;\n    }\n  }\n\n  controls.update();\n  renderer.render(scene, camera);\n}\n","export function addToArray(ar1, ar2) {\n  for (var i = 0; i < ar1.length; i++) {\n    ar1[i] += ar2[i]\n  }\n}\n\n// from https://observablehq.com/@flimsyhat/webgl-color-maps\nexport function intensity_colormap(t) {\n  //viridis\n  const c0 = [0.2777273272234177, 0.005407344544966578, 0.3340998053353061]\n  const c1 = [0.1050930431085774, 1.404613529898575, 1.384590162594685]\n  const c2 = [-0.3308618287255563, 0.214847559468213, 0.09509516302823659]\n  const c3 = [-4.634230498983486, -5.799100973351585, -19.33244095627987]\n  const c4 = [6.228269936347081, 14.17993336680509, 56.69055260068105]\n  const c5 = [4.776384997670288, -13.74514537774601, -65.35303263337234]\n  const c6 = [-5.435455855934631, 4.645852612178535, 26.3124352495832]\n\n  //const res = c0*0.004+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))))*0.004;\n  const res = [\n    c0[0] +\n      t *\n        (c1[0] +\n          t * (c2[0] + t * (c3[0] + t * (c4[0] + t * (c5[0] + t * c6[0]))))),\n    c0[1] +\n      t *\n        (c1[1] +\n          t * (c2[1] + t * (c3[1] + t * (c4[1] + t * (c5[1] + t * c6[1]))))),\n    c0[2] +\n      t *\n        (c1[2] +\n          t * (c2[2] + t * (c3[2] + t * (c4[2] + t * (c5[2] + t * c6[2]))))),\n  ]\n  return res\n}\n\nexport function deleteChildDivs(parentDivClass) {\n  let parentDiv = document.getElementsByClassName(parentDivClass)\n  for (var i = 0; i < parentDiv.length; i++) {\n    let div = parentDiv[i]\n\n    // Remove all child elements by setting innerHTML to an empty string\n    div.innerHTML = \"\"\n  }\n}\n","import { retrieveRandomSunDirections } from \"./pv_simulation\"\nimport { addToArray } from \"./utils\"\n\nfunction max_subdim(array, offset, iterate = 3) {\n  var max = -1000000\n  for (var i = offset; i < array.length; i += iterate) {\n    max = Math.max(array[i], max)\n  }\n  return max\n}\n\nfunction min_subdim(array, offset, iterate = 3) {\n  var min = 1000000\n  for (var i = offset; i < array.length; i += iterate) {\n    min = Math.min(array[i], min)\n  }\n  return min\n}\n\nexport function rayTracingPointsWebGL(\n  pointsArray,\n  trianglesArray,\n  normals,\n  laserPoints,\n  laserPointsRadius,\n  laserPointsMinDistance,\n  num_dates,\n  loc\n) {\n  const N_TRIANGLES = trianglesArray.length / 9\n  const width = pointsArray.length / 3 // Change this to the number of horizontal points in the grid\n  const N_POINTS = width\n  const canvas = document.getElementById(\"canvas\")\n\n  //canvas.width = width;\n  //canvas.height = height;\n\n  const gl = canvas.getContext(\"webgl2\")\n\n  if (!gl) {\n    alert(\"Your browser does not support WebGL2\")\n  }\n\n  // Vertex shader code\n  const vertexShaderSource = `#version 300 es\n\t#define INFINITY         1000000.0\n\tprecision highp float;\n  precision mediump sampler3D;\n\n  uniform vec3 u_sun_direction;\n  uniform int textureWidth;\n  uniform int textureHeight;\n  uniform int textureDepth;\n  uniform float u_POINT_RADIUS;\n  uniform float u_MIN_DISTANCE;\n  uniform int MAX_STEPS;\n  uniform vec3 gridCellSizes;\n  uniform vec3 origin_offset;\n  uniform sampler3D u_grid;\n  uniform float scaleDown;\n  uniform int pointcloudShading;\n\n  uniform sampler2D u_triangles;\n\tuniform int textureWidthTris;\n\n\tin vec3 a_position;\n\tin vec3 a_normal;\n\n\tout vec4 outColor;\n\n\tvec3 cross1(vec3 a, vec3 b) {\n\t\tvec3 c = vec3(0, 0, 0);\n\t\tc.x = a[1] * b[2] - a[2] * b[1];\n\t\tc.y = a[2] * b[0] - a[0] * b[2];\n\t\tc.z = a[0] * b[1] - a[1] * b[0];\n\t\treturn c;\n\t}\n    \n  bool intersectRaySphere(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float sphereRadius) {\n      vec3 oc = sphereCenter - rayOrigin;\n      float b = dot(oc, rayDir);\n      float c = dot(oc, oc) - b*b;\n      return ((b > 0.)&&(c < sphereRadius * sphereRadius));\n  }\n\n  float TriangleIntersect( vec3 v0, vec3 v1, vec3 v2, vec3 rayOrigin, vec3 rayDirection, int isDoubleSided )\n\t{\n\t\tvec3 edge1 = v1 - v0;\n\t\tvec3 edge2 = v2 - v0;\n\n\t\tvec3 pvec = cross(rayDirection, edge2);\n\n\t\tfloat epsilon = 0.000001; // Add epsilon to avoid division by zero\n\t\tfloat det = dot(edge1, pvec);\n\t\tif (abs(det) < epsilon) // Check if det is too close to zero\n\t\t\treturn INFINITY;\n\n\t\tfloat inv_det = 1.0 / det;\n\t\tif ( isDoubleSided == 0 && det < 0.0 ) \n\t\t\treturn INFINITY;\n\t\t\n\t\tvec3 tvec = rayOrigin - v0;\n\t\tfloat u = dot(tvec, pvec) * inv_det;\n\t\tvec3 qvec = cross(tvec, edge1);\n\t\tfloat v = dot(rayDirection, qvec) * inv_det;\n\t\tfloat t = dot(edge2, qvec) * inv_det;\n\t\tfloat x = dot(pvec,pvec);\n\t\treturn (u < 0.0 || u > 1.0 || v < 0.0 || u + v > 1.0 || t <= 0.0) ? INFINITY : t;\n\t}\n\n\tfloat Calculate_Shading_at_Point_Triangles(vec3 vertex_position, vec3 sun_direction) {\n\t\tfloat d;\n\t\tfloat t = INFINITY;\n\t\tfloat shadow_value = 0.;\n    for (int i = 0; i < ${N_TRIANGLES}; i++) {\n\t\t\tint index = i * 3;\n\t\t\tint x = index % textureWidthTris;\n\t\t\tint y = index / textureWidthTris;\n\t\t\tvec3 v0 = texelFetch(u_triangles, ivec2(x, y), 0).rgb;\n\n\t\t\tindex = i * 3 + 1;\n\t\t\tx = index % textureWidthTris;\n\t\t\ty = index / textureWidthTris;\n\t\t\tvec3 v1 = texelFetch(u_triangles, ivec2(x, y), 0).rgb;\n\n\t\t\tindex = i * 3 + 2;\n\t\t\tx = index % textureWidthTris;\n\t\t\ty = index / textureWidthTris;\n\t\t\tvec3 v2 = texelFetch(u_triangles, ivec2(x, y), 0).rgb;\n\n\t\t\td = TriangleIntersect(v0, v1, v2, vertex_position, sun_direction, 1);\n\t\t\tif (d < t && abs(d)>0.0001) {\n\t\t\t\tshadow_value += 1.;\n\n\t\t}\n\t\t}\n\t\treturn shadow_value;\n\t}\n\n\tfloat Calculate_Shading_at_Point(vec3 vertex_position, vec3 sun_direction) {\n        vec3 ray = normalize(sun_direction);\n        vec3 step = sign(ray);\n        vec3 tMax = (step * (gridCellSizes - mod(vertex_position - origin_offset, gridCellSizes)) + gridCellSizes) / ray;\n        vec3 tDelta = step * gridCellSizes / ray;\n        float shadow_value = 0.;\n        ivec3 gridPos = ivec3((vertex_position - origin_offset) / gridCellSizes);\n        // if ((vertex_position.x < 10.) && (vertex_position.x > -10.) && (vertex_position.y < 10.) && (vertex_position.y > -10.)){\n        //     return true;\n        // }\n        // if (gridPos.x == 0){\n        //     return true;\n        // }\n        for (int i = 0; i < MAX_STEPS; i++) {\n            for (int j = 0; j < textureDepth; j++) {\n                vec4 point = texelFetch(u_grid, ivec3(gridPos.x, gridPos.y, j), 0);\n                vec3 pointPos = point.rgb * scaleDown + origin_offset;\n\n                if (dot(pointPos - vertex_position, pointPos - vertex_position) <= u_MIN_DISTANCE * u_MIN_DISTANCE ){\n                    continue;\n                }\n\n                if (pointPos.z > -10.){\n                    if (intersectRaySphere(vertex_position, ray, pointPos, u_POINT_RADIUS)) {\n                        shadow_value += 1.0;\n                    }\n                }\n                else{\n                  break;\n                }\n            }\n            int axis = (tMax.x < tMax.y) ? 0 : 1;\n            tMax[axis] += tDelta[axis];\n            gridPos[axis] += int(step[axis]);\n            if ((textureWidth <= gridPos.x) || (textureHeight <= gridPos.y) || (gridPos.x < 0) || (gridPos.y < 0)){\n                break;\n            }\n        }\n        return shadow_value;\n    }\n\n\tvoid main() {\n\t\tfloat shadow_value = Calculate_Shading_at_Point_Triangles(a_position.xyz, u_sun_direction);\n    \n    if (pointcloudShading > 0){\n      shadow_value += Calculate_Shading_at_Point(a_position.xyz, u_sun_direction);\n    }\n\t\tfloat intensity = ((shadow_value > 1.)?0.:(1.-shadow_value))*dot(a_normal.xyz, u_sun_direction);\n    intensity = (intensity < 0.)?0.:intensity;\n    outColor = vec4(intensity, intensity, intensity, intensity); // Not shadowed\n\t}`\n\n  // Fragment shader code\n  const fragmentShaderSource = `#version 300 es\n\tprecision highp float;\n\tvoid main() {\n\t}\n\t`\n\n  let max3DTextureSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE)\n  console.log(\"Max 3D texture size: \", max3DTextureSize)\n\n  const numLaserPoints = laserPoints != null ? laserPoints.length : 1\n  var textureWidth = 1\n  var textureDepth = 1\n  var textureHeight = 1\n  let texturePointsGrid = new Float32Array(1)\n  var scaleDown = 1\n  var laserPointAreaBounds = []\n  var laserPointZBound = []\n  var laserPointAreaWidth = 0\n  var laserPointAreaHeight = 0\n  var gridCellSize = 0\n\n  if (laserPoints != null) {\n    laserPointAreaBounds = [\n      min_subdim(laserPoints, 0, 3),\n      min_subdim(laserPoints, 1, 3),\n      max_subdim(laserPoints, 0, 3),\n      max_subdim(laserPoints, 1, 3),\n    ]\n    laserPointZBound = [\n      min_subdim(laserPoints, 2, 3),\n      max_subdim(laserPoints, 2, 3),\n    ]\n\n    console.log(laserPointAreaBounds)\n    laserPointAreaWidth = laserPointAreaBounds[2] - laserPointAreaBounds[0]\n    laserPointAreaHeight = laserPointAreaBounds[3] - laserPointAreaBounds[1]\n    gridCellSize = Math.sqrt(\n      (10 * laserPointAreaHeight * laserPointAreaWidth) / numLaserPoints\n    )\n\n    console.log(\"GRID CELL SIZE:\", gridCellSize)\n    textureWidth = Math.ceil(laserPointAreaWidth / gridCellSize)\n    textureHeight = Math.ceil(laserPointAreaHeight / gridCellSize)\n\n    let nPointsGrid = new Int32Array(textureWidth * textureHeight)\n    for (let i = 0; i < laserPoints.length; i += 3) {\n      let x = Math.floor(\n        (laserPoints[i] - laserPointAreaBounds[0]) / gridCellSize\n      )\n      let y = Math.floor(\n        (laserPoints[i + 1] - laserPointAreaBounds[1]) / gridCellSize\n      )\n      let index = (y * textureWidth + x) * 4\n      nPointsGrid[index] += 1\n    }\n    const maxNPoints = max_subdim(nPointsGrid, 0, 1)\n    console.log(`Maximal depth of texture: ${maxNPoints}`)\n    textureDepth = maxNPoints\n\n    texturePointsGrid = new Float32Array(\n      textureWidth * textureHeight * maxNPoints * 4\n    )\n    for (var i = 0; i < texturePointsGrid.length; i++) {\n      texturePointsGrid[i] = -100.0\n    }\n\n    scaleDown =\n      1.2 *\n      Math.max(\n        laserPointZBound[1] - laserPointZBound[0],\n        laserPointAreaHeight,\n        laserPointAreaWidth\n      )\n\n    for (var i = 0; i < laserPoints.length; i += 3) {\n      let x = Math.floor(\n        (laserPoints[i] - laserPointAreaBounds[0]) / gridCellSize\n      )\n      let y = Math.floor(\n        (laserPoints[i + 1] - laserPointAreaBounds[1]) / gridCellSize\n      )\n      for (var j = 0; j < textureDepth; j++) {\n        let index =\n          (y * textureWidth + x + j * textureHeight * textureWidth) * 4\n        if (texturePointsGrid[index + 2] < 0) {\n          texturePointsGrid[index + 0] =\n            (laserPoints[i] - laserPointAreaBounds[0]) / scaleDown\n          texturePointsGrid[index + 1] =\n            (laserPoints[i + 1] - laserPointAreaBounds[1]) / scaleDown\n          texturePointsGrid[index + 2] = (laserPoints[i + 2] - 0) / scaleDown\n          texturePointsGrid[index + 3] = 1\n          break\n        }\n      }\n    }\n  }\n\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n\n  const program = createProgram(gl, vertexShader, fragmentShader, [\"outColor\"])\n  if (program === \"abortSimulation\") {\n    return null\n  }\n\n  const colorBuffer = makeBuffer(gl, N_POINTS * 16)\n  const tf = makeTransformFeedback(gl, colorBuffer)\n  // gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n  // gl.pixelStorei(gl.PACK_ALIGNMENT, 1);\n\n  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n\n  var textureWidthTris = Math.min(\n    3 * N_TRIANGLES,\n    Math.floor(maxTextureSize / 12) * 12\n  )\n  var textureHeightTris = Math.ceil((3 * N_TRIANGLES) / textureWidthTris)\n\n  gl.useProgram(program)\n\n  var alignedTrianglesArray\n  //if (textureHeightTris == 1) {\n  //   alignedTrianglesArray = trianglesArray\n  //} else {\n  alignedTrianglesArray = new Float32Array(\n    textureWidthTris * textureHeightTris * 4\n  )\n\n  for (var i = 0; i < N_TRIANGLES; i++) {\n    var x = (12 * i) % textureWidthTris\n    var y = Math.floor((12 * i) / textureWidthTris)\n    var index = y * textureWidthTris + x\n    for (var j = 0; j < 3; j++) {\n      alignedTrianglesArray[index + j] = trianglesArray[9 * i + j]\n      alignedTrianglesArray[index + j + 4] = trianglesArray[9 * i + j + 3]\n      alignedTrianglesArray[index + j + 8] = trianglesArray[9 * i + j + 6]\n    }\n  }\n  // }\n\n  let textureTri = gl.createTexture()\n  gl.activeTexture(gl.TEXTURE0)\n  gl.bindTexture(gl.TEXTURE_2D, textureTri)\n\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGBA32F,\n    textureWidthTris,\n    textureHeightTris,\n    0,\n    gl.RGBA,\n    gl.FLOAT,\n    alignedTrianglesArray\n  )\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.bindTexture(gl.TEXTURE_2D, null)\n\n  var texture = gl.createTexture()\n  gl.activeTexture(gl.TEXTURE1)\n  gl.bindTexture(gl.TEXTURE_3D, texture)\n  // Upload the buffer to the GPU and configure the 3D texture\n  gl.texImage3D(\n    gl.TEXTURE_3D, // target\n    0, // level\n    gl.RGBA32F, // internalFormat\n    textureWidth, // width\n    textureHeight, // height\n    textureDepth, // depth\n    0, // border\n    gl.RGBA, // format\n    gl.FLOAT, // type\n    texturePointsGrid // pixel data\n  )\n\n  // Set up texture parameters for the 3D texture\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE)\n\n  var u_trianglesLocation = gl.getUniformLocation(program, \"u_triangles\")\n  gl.activeTexture(gl.TEXTURE0)\n  gl.bindTexture(gl.TEXTURE_2D, textureTri)\n  gl.uniform1i(u_trianglesLocation, 0)\n\n  var u_pointcloudShading = gl.getUniformLocation(program, \"pointcloudShading\")\n  gl.uniform1i(u_pointcloudShading, laserPoints != null ? 1 : 0)\n\n  var u_textureWidth = gl.getUniformLocation(program, \"textureWidth\")\n  gl.uniform1i(u_textureWidth, textureWidth)\n  var u_textureHeight = gl.getUniformLocation(program, \"textureHeight\")\n  gl.uniform1i(u_textureHeight, textureHeight)\n  var u_textureDepth = gl.getUniformLocation(program, \"textureDepth\")\n  gl.uniform1i(u_textureDepth, textureDepth)\n  var u_POINT_RADIUS = gl.getUniformLocation(program, \"u_POINT_RADIUS\")\n  gl.uniform1f(u_POINT_RADIUS, laserPointsRadius)\n  var u_MIN_DISTANCE = gl.getUniformLocation(program, \"u_MIN_DISTANCE\")\n  gl.uniform1f(u_MIN_DISTANCE, laserPointsMinDistance)\n  var u_scaleDown = gl.getUniformLocation(program, \"scaleDown\")\n  gl.uniform1f(u_scaleDown, scaleDown)\n  var u_MAX_STEPS = gl.getUniformLocation(program, \"MAX_STEPS\")\n  gl.uniform1i(u_MAX_STEPS, 10000)\n  var u_gridCellSizes = gl.getUniformLocation(program, \"gridCellSizes\")\n  gl.uniform3f(u_gridCellSizes, gridCellSize, gridCellSize, 10)\n\n  var u_originOffset = gl.getUniformLocation(program, \"origin_offset\")\n  gl.uniform3f(\n    u_originOffset,\n    laserPointAreaBounds[0],\n    laserPointAreaBounds[1],\n    0\n  )\n\n  var u_gridLocation = gl.getUniformLocation(program, \"u_grid\")\n  gl.activeTexture(gl.TEXTURE1)\n  gl.bindTexture(gl.TEXTURE_3D, texture)\n  gl.uniform1i(u_gridLocation, 1)\n\n  var u_textureWidthTris = gl.getUniformLocation(program, \"textureWidthTris\")\n  gl.uniform1i(u_textureWidthTris, textureWidthTris)\n\n  const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\")\n  const normalAttributeLocation = gl.getAttribLocation(program, \"a_normal\")\n\n  const vao = gl.createVertexArray()\n  gl.bindVertexArray(vao)\n\n  const positionBuffer = makeBufferAndSetAttribute(\n    gl,\n    pointsArray,\n    positionAttributeLocation\n  )\n  const normalBuffer = makeBufferAndSetAttribute(\n    gl,\n    normals,\n    normalAttributeLocation\n  )\n\n  var colorCodedArray = null\n  var isShadowedArray = null\n  for (var i = 0; i < num_dates; i++) {\n    let sunDirectionUniformLocation = gl.getUniformLocation(\n      program,\n      \"u_sun_direction\"\n    )\n\n    let sunDirection = retrieveRandomSunDirections(1, loc.lat, loc.lon)\n    // let sunDirection = new Vector3(0.65, -0.65, 0.1);\n    gl.uniform3fv(sunDirectionUniformLocation, sunDirection)\n\n    drawArraysWithTransformFeedback(gl, tf, gl.POINTS, N_POINTS)\n\n    if (isShadowedArray == null) {\n      colorCodedArray = getResults(gl, colorBuffer, \"shading\", N_POINTS)\n      isShadowedArray = colorCodedArray.filter(\n        (_, index) => (index + 1) % 4 === 0\n      )\n    } else {\n      colorCodedArray = getResults(gl, colorBuffer, \"shading\", N_POINTS)\n      addToArray(\n        isShadowedArray,\n        colorCodedArray.filter((_, index) => (index + 1) % 4 === 0)\n      )\n    }\n  }\n\n  gl.deleteTexture(texture)\n  gl.deleteShader(vertexShader)\n  gl.deleteShader(fragmentShader)\n  gl.deleteProgram(program)\n  gl.deleteBuffer(positionBuffer)\n  gl.deleteBuffer(normalBuffer)\n  gl.deleteTransformFeedback(tf)\n  gl.deleteBuffer(colorBuffer)\n\n  return isShadowedArray\n}\n\nfunction getResults(gl, buffer, label, N_POINTS) {\n  let results = new Float32Array(N_POINTS * 4)\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n  gl.getBufferSubData(\n    gl.ARRAY_BUFFER,\n    0, // byte offset into GPU buffer,\n    results\n  )\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, null) // productBuffer was still bound to ARRAY_BUFFER so unbind it\n  return results\n}\n\nfunction createShader(gl, type, source) {\n  const shader = gl.createShader(type)\n  gl.shaderSource(shader, source)\n  gl.compileShader(shader)\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n  if (success) {\n    return shader\n  }\n  console.error(gl.getShaderInfoLog(shader))\n  gl.deleteShader(shader)\n}\n\nfunction createProgram(\n  gl,\n  vertexShader,\n  fragmentShader,\n  variables_of_interest\n) {\n  const program = gl.createProgram()\n\n  if (vertexShader === undefined || fragmentShader === undefined) {\n    window.setShowTooManyUniformsError(true)\n    return \"abortSimulation\"\n  } else {\n    gl.attachShader(program, vertexShader)\n    gl.attachShader(program, fragmentShader)\n    gl.transformFeedbackVaryings(\n      program,\n      variables_of_interest,\n      gl.SEPARATE_ATTRIBS\n    )\n    gl.linkProgram(program)\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS)\n    if (success) {\n      return program\n    }\n    console.error(gl.getProgramInfoLog(program))\n    gl.deleteProgram(program)\n  }\n}\n\nfunction makeBuffer(gl, sizeOrData) {\n  const buf = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, buf)\n  gl.bufferData(gl.ARRAY_BUFFER, sizeOrData, gl.DYNAMIC_DRAW)\n  return buf\n}\n\nfunction makeTransformFeedback(gl, buffer) {\n  const tf = gl.createTransformFeedback()\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf)\n  gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer)\n  return tf\n}\n\nfunction makeBufferAndSetAttribute(gl, data, loc) {\n  const buf = makeBuffer(gl, data)\n  // setup our attributes to tell WebGL how to pull\n  // the data from the buffer above to the attribute\n  gl.enableVertexAttribArray(loc)\n  gl.vertexAttribPointer(\n    loc,\n    3, // size (num components)\n    gl.FLOAT, // type of data in buffer\n    false, // normalize\n    0, // stride (0 = auto)\n    0 // offset\n  )\n}\n\nfunction drawArraysWithTransformFeedback(gl, tf, primitiveType, count) {\n  // turn of using the fragment shader\n  gl.enable(gl.RASTERIZER_DISCARD)\n\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf)\n  gl.beginTransformFeedback(gl.POINTS)\n  gl.drawArrays(primitiveType, 0, count)\n  gl.endTransformFeedback()\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null)\n\n  // unbind the buffer from the TRANFORM_FEEDBACK_BUFFER\n  gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null)\n\n  // turn on using fragment shaders again\n  gl.disable(gl.RASTERIZER_DISCARD)\n}\n","import * as THREE from \"three\"\n\nimport { vec3 } from \"gl-matrix\"\nimport { adaptiveSubdivideMesh } from \"./stl_to_array.js\"\nimport { STLViewer, camera, controls, renderer, scene } from \"./stlviewer.js\"\n// import init, { Session, Input} from \"@webonnx/wonnx-wasm\";\n// import { cumulativeIntensityMesh } from './glmatrix_raytracing/glmatrix_raytracing.js';\nimport SunCalc from \"suncalc\"\nimport { loc_utm } from \"./download.js\"\nimport { intensity_colormap } from \"./utils.js\"\nimport { rayTracingWebGL } from \"./webgl_raytracing.js\"\nimport { rayTracingPointsWebGL } from \"./webgl_raytracing_points.js\"\n//import { triangleIntersectText, Calculate_Shading_at_Point_text } from \"./webgl_raytracing.js\";\nimport DatesSlider from \"../components/PVSimulation/DatesSlider.js\"\n\n// import '@tensorflow/tfjs-backend-webgpu';\n// Set the backend to WebGPU and wait for the module to be ready.\n\n// import { STLViewer } from \"./stlviewer_2/stlviewer.js\";\n\nlet raytracingGeometry\nlet innerGeometry\nlet outerGeometry\nvar intensities = null\n\nexport function getViewer() {\n  return [scene, renderer, camera, controls]\n}\n\nexport function retrieveRandomSunDirections(Ndates, lat, lon) {\n  const directions = new Float32Array(Ndates * 3)\n  var i = 0\n  while (i < Ndates) {\n    const date = new Date(\n      2023,\n      Math.floor(12 * Math.random()),\n      1 + Math.floor(28 * Math.random()),\n      Math.floor(24 * Math.random()),\n      Math.floor(60 * Math.random()),\n      0,\n      0\n    )\n\n    const pos = SunCalc.getPosition(date, lat, lon)\n    if (pos.altitude < 0.1 || pos.altitude == Number.NaN) {\n      continue\n    }\n    directions[3 * i] = -Math.cos(pos.altitude) * Math.sin(pos.azimuth)\n    directions[3 * i + 1] = -Math.cos(pos.altitude) * Math.cos(pos.azimuth)\n    directions[3 * i + 2] = Math.sin(pos.altitude)\n    i += 1\n  }\n  return directions\n}\n\nexport async function calc_webgl(loc, laserPoints, resetCamera) {\n  const mesh_vectors = raytracingGeometry.attributes.position.array\n  const points = innerGeometry.attributes.position.array\n  const normals = innerGeometry.attributes.normal.array\n\n  const status_elem = document.getElementById(\"status\")\n  status_elem.textContent = \"Simulating\"\n  status_elem.hasChanged = true\n\n  let uniquePoints = []\n  let uniqueNormals = []\n\n  // Create an object to hold point/normal pairs, where the key is a string representation of the point\n  const uniquePairs = {}\n\n  for (let i = 0; i < points.length; i += 3) {\n    const point = [points[i], points[i + 1], points[i + 2]].map((value) =>\n      parseFloat(value.toFixed(6))\n    ) // limit precision\n    const pointKey = JSON.stringify(point)\n\n    if (!uniquePairs.hasOwnProperty(pointKey)) {\n      uniquePairs[pointKey] = i / 3\n      uniquePoints.push(points[i], points[i + 1], points[i + 2])\n      uniqueNormals.push(normals[i], normals[i + 1], normals[i + 2])\n    }\n  }\n\n  const uniquePointsArray = new Float32Array(uniquePoints.slice())\n  const uniqueNormalsArray = new Float32Array(uniqueNormals.slice())\n\n  const laserPointsRadius = 0.5\n  const laserPointsMinDistance = 1.0\n\n  // Compute unique intensities\n  const uniqueIntensities = await rayTracingPointsWebGL(\n    uniquePointsArray,\n    mesh_vectors,\n    uniqueNormalsArray,\n    laserPoints,\n    laserPointsRadius,\n    laserPointsMinDistance,\n    window.numSimulations,\n    loc\n  )\n  if (uniqueIntensities === null) {\n    window.setLoading(false)\n    return null\n  }\n  // Store unique intensities in uniquePairs\n  for (let i = 0; i < uniqueIntensities.length; i++) {\n    const point = [\n      uniquePoints[i * 3],\n      uniquePoints[i * 3 + 1],\n      uniquePoints[i * 3 + 2],\n    ].map((value) => parseFloat(value.toFixed(6))) // limit precision\n    const pointKey = JSON.stringify(point)\n\n    if (uniquePairs.hasOwnProperty(pointKey)) {\n      uniquePairs[pointKey] = uniqueIntensities[i]\n    } else {\n      console.error(`Couldn't find indices for pointKey ${pointKey}`)\n    }\n  }\n\n  // Generate final intensities array\n  let intensities_array = new Array(points.length / 3).fill(0)\n\n  for (let i = 0; i < points.length; i += 3) {\n    const point = [points[i], points[i + 1], points[i + 2]].map((value) =>\n      parseFloat(value.toFixed(6))\n    ) // limit precision\n    const pointKey = JSON.stringify(point)\n\n    if (uniquePairs.hasOwnProperty(pointKey)) {\n      intensities_array[i / 3] = uniquePairs[pointKey]\n    }\n  }\n\n  const intensities = new Float32Array(intensities_array)\n\n  status_elem.textContent = \"Simulation Done\"\n  status_elem.hasChanged = true\n  window.setLoading(false)\n  showMeshIntensities(intensities, laserPoints, resetCamera)\n}\n\nfunction refine_triangles(triangle_array, threshold) {\n  const triangles = [\n    [\n      vec3.fromValues(...triangle_array.slice(0, 3)),\n      vec3.fromValues(...triangle_array.slice(3, 6)),\n      vec3.fromValues(...triangle_array.slice(6, 9)),\n    ],\n  ]\n\n  const subdividedTriangles = adaptiveSubdivideMesh(triangles, threshold)\n\n  const newpos_update = []\n  for (const triangle of subdividedTriangles) {\n    newpos_update.push(...triangle)\n  }\n  return newpos_update\n}\n\nfunction centerMesh(geometry, xytranslate, minZ) {\n  // centralize mesh to main point\n  var newMinZ\n\n  if (minZ == null) {\n    newMinZ = Number.POSITIVE_INFINITY\n\n    // Iterate over vertices and find the minimum z value\n    for (var i = 0; i < geometry.attributes.position.array.length; i++) {\n      const zcoord = geometry.attributes.position.getZ(i)\n      if (zcoord < newMinZ) {\n        newMinZ = zcoord\n      }\n    }\n  } else {\n    newMinZ = minZ\n  }\n\n  var posarray = geometry.attributes.position.array\n  for (var i = 0; i < posarray.length; i += 9) {\n    for (var j = 0; j < 9; j += 3) {\n      posarray[i + j] = posarray[i + j] - xytranslate[0]\n      posarray[i + j + 1] = posarray[i + j + 1] - xytranslate[1]\n      posarray[i + j + 2] = posarray[i + j + 2] - newMinZ\n    }\n  }\n  return newMinZ\n}\n\nfunction cutoffMesh(geometry, cutoff) {\n  var posarray = geometry.attributes.position.array.slice()\n  var newposarray = []\n  var newnormals = []\n  for (var i = 0; i < posarray.length; i += 9) {\n    var keep = true\n    for (var j = 0; j < 9; j += 3) {\n      if (\n        posarray[i + j] < -cutoff ||\n        posarray[i + j] > cutoff ||\n        posarray[i + j + 1] < -cutoff ||\n        posarray[i + j + 1] > cutoff\n      ) {\n        keep = false\n      }\n    }\n\n    if (keep) {\n      const v0 = vec3.fromValues(...posarray.slice(i, i + 3))\n      const v1 = vec3.fromValues(...posarray.slice(i + 3, i + 6))\n      const v2 = vec3.fromValues(...posarray.slice(i + 6, i + 9))\n      let d1 = vec3.create()\n      vec3.sub(d1, v1, v0)\n      let d2 = vec3.create()\n      vec3.sub(d2, v2, v0)\n      let ar = vec3.create()\n      vec3.cross(ar, d1, d2)\n      var normal = vec3.create()\n      vec3.scale(normal, ar, 1 / vec3.len(ar))\n\n      //remove triangles with low area for shading\n      if (vec3.len(ar) < 0.05) {\n        continue\n      }\n\n      for (var j = 0; j < 9; j++) {\n        newposarray.push(posarray[i + j])\n        newnormals.push(normal[j % 3])\n      }\n    }\n  }\n\n  let new_geometry = new THREE.BufferGeometry()\n  new_geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array(newposarray), 3)\n  )\n  new_geometry.setAttribute(\n    \"normal\",\n    new THREE.BufferAttribute(new Float32Array(newnormals), 3)\n  )\n  new_geometry.attributes.position.needsUpdate = true\n  new_geometry.attributes.normal.needsUpdate = true\n  return new_geometry\n}\n\nfunction splitCutoffRefineMesh(\n  geometry,\n  refinementCutoff,\n  outerCutoff,\n  adaptiveSubdivideThreshold = Number.POSITIVE_INFINITY\n) {\n  let geometriesCut = cutoffMesh(geometry, outerCutoff)\n  var posarray = geometriesCut.attributes.position.array.slice()\n\n  var innerPosarray = []\n  var innerNormals = []\n\n  var outerPosarray = []\n  var outerNormals = []\n\n  for (var i = 0; i < posarray.length; i += 9) {\n    var isInnerGeometry = true\n    for (var j = 0; j < 9; j += 3) {\n      if (\n        posarray[i + j] < -refinementCutoff ||\n        posarray[i + j] > refinementCutoff ||\n        posarray[i + j + 1] < -refinementCutoff ||\n        posarray[i + j + 1] > refinementCutoff\n      ) {\n        isInnerGeometry = false\n        // break;\n      }\n    }\n\n    const v0 = vec3.fromValues(...posarray.slice(i, i + 3))\n    const v1 = vec3.fromValues(...posarray.slice(i + 3, i + 6))\n    const v2 = vec3.fromValues(...posarray.slice(i + 6, i + 9))\n    let d1 = vec3.create()\n    vec3.sub(d1, v1, v0)\n    let d2 = vec3.create()\n    vec3.sub(d2, v2, v0)\n    let ar = vec3.create()\n    vec3.cross(ar, d1, d2)\n    var normal = vec3.create()\n    vec3.scale(normal, ar, 1 / vec3.len(ar))\n\n    if (vec3.len(ar) < 0.05) {\n      continue\n    }\n    if (isInnerGeometry) {\n      var triangle_points = refine_triangles(\n        posarray.slice(i, i + 9),\n        adaptiveSubdivideThreshold\n      )\n\n      for (const triangle of triangle_points) {\n        innerPosarray.push(triangle[0])\n        innerPosarray.push(triangle[1])\n        innerPosarray.push(triangle[2])\n        innerNormals.push(normal[0])\n        innerNormals.push(normal[1])\n        innerNormals.push(normal[2])\n      }\n    } else {\n      for (var j = 0; j < 9; j++) {\n        outerPosarray.push(posarray[i + j])\n        outerNormals.push(normal[j % 3])\n      }\n    }\n  }\n\n  let innerGeometry = new THREE.BufferGeometry()\n  innerGeometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array(innerPosarray), 3)\n  )\n  innerGeometry.setAttribute(\n    \"normal\",\n    new THREE.BufferAttribute(new Float32Array(innerNormals), 3)\n  )\n  innerGeometry.attributes.position.needsUpdate = true\n  innerGeometry.attributes.normal.needsUpdate = true\n\n  let outerGeometry = new THREE.BufferGeometry()\n  outerGeometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array(outerPosarray), 3)\n  )\n  outerGeometry.setAttribute(\n    \"normal\",\n    new THREE.BufferAttribute(new Float32Array(outerNormals), 3)\n  )\n  outerGeometry.attributes.position.needsUpdate = true\n  outerGeometry.attributes.normal.needsUpdate = true\n\n  return { innerGeometry: innerGeometry, outerGeometry: outerGeometry }\n}\n\nexport function createMeshes(\n  big_geometry,\n  offset,\n  minZ = null,\n  cutoffRaytracing = window.numRadiusSimulation + 20,\n  outerCutoff = window.numRadiusSimulation + 70,\n  refinementCutoff = window.numRadiusSimulation,\n  mesh_refinement_scale = 2\n) {\n  intensities = null\n  //center the big mesh around the building coordinates from OSM\n  const newMinZ = centerMesh(\n    big_geometry,\n    [loc_utm[0] - offset[0], loc_utm[1] - offset[1]],\n    minZ\n  )\n\n  raytracingGeometry = cutoffMesh(big_geometry, cutoffRaytracing)\n\n  let geometryDict = splitCutoffRefineMesh(\n    big_geometry,\n    refinementCutoff,\n    outerCutoff,\n    mesh_refinement_scale\n  )\n  innerGeometry = geometryDict.innerGeometry\n  outerGeometry = geometryDict.outerGeometry\n\n  if (innerGeometry.attributes.position.array.length === 0) {\n    window.setLoading(false)\n    window.setShowErrorMessage(true)\n    window.setShowThreeViewer(false)\n  }\n  return newMinZ\n}\n\nexport function showMeshOrig() {\n  var elem = document.getElementsByClassName(\"stlviewer\")[0]\n  const newelem = document.createElement(\"div\")\n  newelem.setAttribute(\"class\", \"stlviewer\")\n  elem.replaceWith(newelem)\n  newelem.id = \"webgl-container\"\n  STLViewer(newelem)\n\n  const Npoints = innerGeometry.attributes.position.array.length / 3\n  var newColors = new Float32Array(3 * Npoints)\n  for (var i = 0; i < Npoints; i++) {\n    newColors[3 * i] = 0.6 + 0.4 * Math.random()\n    newColors[3 * i + 1] = 0.4 + 0.3 * Math.random()\n    newColors[3 * i + 2] = 0.3 * Math.random()\n  }\n\n  innerGeometry.setAttribute(\"color\", new THREE.BufferAttribute(newColors, 3))\n  var material = new THREE.MeshStandardMaterial({ vertexColors: true })\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\n  var mesh = new THREE.Mesh(innerGeometry, material)\n  scene.add(mesh)\n\n  // Compute the middle\n  var middle = new THREE.Vector3()\n  innerGeometry.computeBoundingBox()\n  innerGeometry.boundingBox.getCenter(middle)\n\n  // Center it\n  //mesh.position.x = -1 * middle.x;\n  //mesh.position.y = -1 * middle.y;\n  //mesh.position.z = -1 * middle.z+3;\n\n  // Pull the camera away as needed\n  var largestDimension = Math.max(\n    innerGeometry.boundingBox.max.x,\n    innerGeometry.boundingBox.max.y,\n    innerGeometry.boundingBox.max.z\n  )\n  camera.position.set(0, -20, 100)\n  camera.position.z = 40\n\n  var animate = function () {\n    requestAnimationFrame(animate)\n    controls.update()\n    renderer.render(scene, camera)\n  }\n  animate()\n}\n\nexport async function replot() {\n  showMeshIntensities()\n}\n\nexport async function showMeshIntensities(\n  intensities,\n  laserPoints,\n  resetCamera\n) {\n  var oldCameraPosition\n  if (resetCamera || camera == null) {\n    oldCameraPosition = { x: 0, y: 0, z: 0 }\n  } else {\n    oldCameraPosition = {\n      x: camera.position.x,\n      y: camera.position.y,\n      z: camera.position.z,\n    }\n  }\n\n  STLViewer(resetCamera)\n\n  const Npoints = innerGeometry.attributes.position.array.length / 3\n  var newColors = new Float32Array(Npoints * 3)\n  //var intMax = get99thPercentile(intensities);\n  for (var i = 0; i < Npoints; i++) {\n    const col = intensity_colormap(\n      Math.min(1, intensities[i] / window.numSimulations / 0.6)\n    )\n    //The 0.6 comes from looking at a rooftop facing south with good angle.\n    newColors[3 * i] = col[0]\n    newColors[3 * i + 1] = col[1]\n    newColors[3 * i + 2] = col[2]\n  }\n\n  innerGeometry.intensities = intensities\n\n  innerGeometry.setAttribute(\n    \"color\",\n    new THREE.Float32BufferAttribute(newColors, 3)\n  )\n  var material = new THREE.MeshStandardMaterial({\n    vertexColors: true,\n    side: THREE.DoubleSide,\n    shininess: 0,\n    roughness: 1,\n  })\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\n  var mesh = new THREE.Mesh(innerGeometry, material)\n\n  scene.add(mesh)\n\n  var outerGeometryMaterial = new THREE.MeshStandardMaterial({\n    vertexColors: false,\n    side: THREE.DoubleSide,\n    color: 0xd1bea4,\n    shininess: 0,\n    roughness: 1,\n  })\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\n  var outerMesh = new THREE.Mesh(outerGeometry, outerGeometryMaterial)\n\n  scene.add(outerMesh)\n\n  // Create and add a sphere for each point\n  if (laserPoints != null) {\n    // Create a geometry for the spheres\n    const sphereGeometry = new THREE.SphereGeometry(0.1) // Adjust the radius as needed\n\n    // Create a material for the spheres\n    const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0x992222 }) // Adjust the color as needed\n\n    for (var i = 0; i < laserPoints.length; i++) {\n      if ((i % 100) / 100 < window.pointsVisualizationRatio) {\n        let point = laserPoints[i]\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)\n        sphere.position.set(point[0], point[1], point[2])\n        scene.add(sphere)\n      }\n    }\n  }\n  // Compute the middle\n  var middle = new THREE.Vector3()\n  innerGeometry.computeBoundingBox()\n  innerGeometry.boundingBox.getCenter(middle)\n\n  // Pull the camera away as needed\n  // var largestDimension = Math.max(\n  //   innerGeometry.boundingBox.max.x,\n  //   innerGeometry.boundingBox.max.y,\n  //   innerGeometry.boundingBox.max.z\n  // );\n\n  if (resetCamera) {\n    camera.position.set(0, -40, 80)\n  } else {\n    console.log(\"Camera Rot\", window.offsetPos[0], window.offsetPos[1])\n\n    camera.position.set(\n      oldCameraPosition.x - window.offsetPos[0],\n      oldCameraPosition.y - window.offsetPos[1],\n      oldCameraPosition.z\n    )\n    window.offsetPos[0] = 0\n    window.offsetPos[1] = 0\n    // console.log(\"New Camera Pos\", camera.position);\n  }\n\n  var animate = function () {\n    requestAnimationFrame(animate)\n    controls.update()\n    renderer.render(scene, camera)\n  }\n  window.setShowViridisLegend(true)\n  animate()\n}\n","import JSZip from \"jszip\"\nimport proj4 from \"proj4\"\nimport * as BufferGeometryUtils from \"three/addons/utils/BufferGeometryUtils.js\"\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader.js\"\nimport { calc_webgl, createMeshes } from \"./pv_simulation\"\nexport var loc_utm\n\nimport { loadLAZ } from \"./lazimport\"\n\n// var state = \"WaitForAddr\"; // States are \"WaitForAddr\", \"AddrDataLoaded\", \"Inspect\"\n\nasync function getLocationFromInput(locationText) {\n  let loc\n  const coordinatePattern = /^[-]?(\\d+(\\.\\d+)?),\\s*[-]?(\\d+(\\.\\d+)?)$/\n\n  // Check if the string matches the coordinate pattern\n  if (coordinatePattern.test(locationText)) {\n    const [latitude, longitude] = locationText\n      .split(\",\")\n      .map((value) => parseFloat(value.trim()))\n\n    // Create the \"loc\" object with latitude and longitude attributes\n    loc = {\n      lat: latitude,\n      lon: longitude,\n    }\n    return loc\n  } else {\n    let url = \"https://nominatim.openstreetmap.org/search?format=json&q=\"\n      .concat(locationText)\n      .concat(\"+Germany+Bavaria\")\n    let response = await fetchLocation(url)\n    if (!response) {\n      let locationTextModified = locationText.split(\" \").join(\"+\")\n      url = \"https://nominatim.openstreetmap.org/search?format=json&q=\".concat(\n        locationTextModified\n      )\n      response = await fetchLocation(url)\n    }\n    return response\n  }\n}\n\nasync function fetchLocation(url) {\n  let loc\n  const statuselem = document.getElementById(\"status\")\n  try {\n    let response = await fetch(url)\n    if (!response.ok) {\n      console.error(\"Check connection to Nominatim geocoder\")\n      statuselem.textContent = \"Connection to Adress Server failed\"\n      throw new Error(\"Request failed with status \" + response.status)\n    }\n\n    let responseData = await response.json()\n    if (responseData.length === 0) {\n      return null\n    }\n\n    loc = responseData[0]\n    return loc\n  } catch (error) {\n    console.error(\"Error:\", error)\n    return null\n  }\n}\n\nexport async function setLocation(inputValue, inputChanged, loc) {\n  let newloc\n  window.mapLocationBaseChanged = true\n  if (inputChanged) {\n    newloc = await getLocationFromInput(inputValue)\n    window.mapLocation = newloc\n  } else {\n    newloc = loc\n  }\n  // console.log(newloc);\n  if (typeof newloc !== \"undefined\" && newloc != null) {\n    retrieveData(newloc, inputChanged)\n  } else {\n    window.setLoading(false)\n    window.setShowThreeViewer(false)\n    window.setShowErrorMessage(true)\n  }\n\n  if (inputChanged) {\n    window.mapLocationChanged = false\n  }\n}\n\nfunction get_utm32(x, y) {\n  const IN_PROJ = \"EPSG:4326\"\n  const OUT_PROJ = \"EPSG:25832\"\n\n  proj4.defs(\"EPSG:25832\", \"+proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs\")\n\n  const transformer = proj4(IN_PROJ, OUT_PROJ)\n\n  const [x_utm32, y_utm32] = transformer.forward([x, y])\n  loc_utm = [x_utm32, y_utm32]\n  return loc_utm\n}\n\nfunction get_file_names(x, y) {\n  const DIVISOR = 2000\n  const BUFFER_ZONE = 100\n  const loc_utm = get_utm32(x, y)\n  const x_utm32 = loc_utm[0]\n  const y_utm32 = loc_utm[1]\n\n  const x_rounded = Math.floor(x_utm32 / DIVISOR) * 2\n  const y_rounded = Math.floor(y_utm32 / DIVISOR) * 2\n\n  const load_tile_left = x_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_right = x_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n  const load_tile_lower = y_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_upper = y_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n\n  const file_list = [`${x_rounded}_${y_rounded}.zip`]\n\n  if (load_tile_left) {\n    file_list.push(`${x_rounded - 2}_${y_rounded}.zip`)\n  }\n  if (load_tile_right) {\n    file_list.push(`${x_rounded + 2}_${y_rounded}.zip`)\n  }\n  if (load_tile_lower) {\n    file_list.push(`${x_rounded}_${y_rounded - 2}.zip`)\n  }\n  if (load_tile_upper) {\n    file_list.push(`${x_rounded}_${y_rounded + 2}.zip`)\n  }\n  if (load_tile_left && load_tile_lower) {\n    file_list.push(`${x_rounded - 2}_${y_rounded - 2}.zip`)\n  }\n  if (load_tile_left && load_tile_upper) {\n    file_list.push(`${x_rounded - 2}_${y_rounded + 2}.zip`)\n  }\n  if (load_tile_right && load_tile_lower) {\n    file_list.push(`${x_rounded + 2}_${y_rounded - 2}.zip`)\n  }\n  if (load_tile_right && load_tile_upper) {\n    file_list.push(`${x_rounded + 2}_${y_rounded + 2}.zip`)\n  }\n  return file_list\n}\n\nfunction get_file_names_laz(x, y) {\n  const DIVISOR = 1000\n  const BUFFER_ZONE = 100\n  const loc_utm = get_utm32(x, y)\n  const x_utm32 = loc_utm[0]\n  const y_utm32 = loc_utm[1]\n\n  const x_rounded = Math.floor(x_utm32 / DIVISOR)\n  const y_rounded = Math.floor(y_utm32 / DIVISOR)\n\n  const load_tile_left = x_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_right = x_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n  const load_tile_lower = y_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_upper = y_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n\n  const file_list = [`${x_rounded}_${y_rounded}.laz`]\n\n  if (load_tile_left) {\n    file_list.push(`${x_rounded - 2}_${y_rounded}.laz`)\n  }\n  if (load_tile_right) {\n    file_list.push(`${x_rounded + 2}_${y_rounded}.laz`)\n  }\n  if (load_tile_lower) {\n    file_list.push(`${x_rounded}_${y_rounded - 2}.laz`)\n  }\n  if (load_tile_upper) {\n    file_list.push(`${x_rounded}_${y_rounded + 2}.laz`)\n  }\n  if (load_tile_left && load_tile_lower) {\n    file_list.push(`${x_rounded - 2}_${y_rounded - 2}.laz`)\n  }\n  if (load_tile_left && load_tile_upper) {\n    file_list.push(`${x_rounded - 2}_${y_rounded + 2}.laz`)\n  }\n  if (load_tile_right && load_tile_lower) {\n    file_list.push(`${x_rounded + 2}_${y_rounded - 2}.laz`)\n  }\n  if (load_tile_right && load_tile_upper) {\n    file_list.push(`${x_rounded + 2}_${y_rounded + 2}.laz`)\n  }\n  return file_list\n}\n\nfunction getCommentLine(stlData) {\n  // Convert the ArrayBuffer to a Uint8Array\n  var uint8Array = new Uint8Array(stlData)\n\n  // Create an empty array to store the characters\n  var commentChars = []\n\n  // Iterate over the Uint8Array in reverse order\n  for (var i = uint8Array.length - 2; i >= 0; i--) {\n    // Check if the current character is a newline character\n    if (uint8Array[i] === 10 || uint8Array[i] === 13) {\n      // Stop iterating if a newline character is encountered\n      break\n    }\n\n    // Add the current character to the commentChars array\n    commentChars.unshift(String.fromCharCode(uint8Array[i]))\n  }\n\n  // Convert the array of characters to a string\n  var commentLine = commentChars.join(\"\")\n\n  // Remove any leading or trailing whitespace\n  commentLine = commentLine.trim()\n  return commentLine\n}\n\nfunction parseCommentLine(comment) {\n  // Regular expression pattern to match the comment line format\n  var pattern =\n    /^;\\s*offset\\s*(-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)\\s*(-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)\\s*(-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)\\s*$/i\n\n  // Match the comment line against the pattern\n  var match = comment.match(pattern)\n\n  var offset = [0, 0, 0]\n  // Check if the comment line matches the expected format\n  if (match) {\n    // Extract the offsets from the matched groups\n    console.log(\"Matches\", match)\n    offset = [parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3])]\n\n    // Print the offsets\n    console.log(\"Offsets:\", offset[0], offset[1], offset[2])\n  } else {\n    console.log(\"Invalid comment format\")\n  }\n  return offset\n}\n\nasync function retrieveData(loc, resetCamera = false) {\n  const baseurl = \"https://www.openpv.de/data/\"\n  var filenames = get_file_names(Number(loc.lon), Number(loc.lat))\n  if (filenames.length == 0) {\n    return\n  }\n\n  const status_elem = document.getElementById(\"status\")\n\n  // Create an array to store individual geometries\n  let geometries = []\n  let stlData = null\n  var cached_file_found = false\n  var main_offset = null\n  console.log(\"Location\", loc)\n  const loc_utm32 = get_utm32(Number(loc.lon), Number(loc.lat))\n  // Iterate through all filenames\n  for (const filename of filenames) {\n    let filename_idx\n    if (window.stlFiles != null) {\n      filename_idx = window.stlFiles.indexOf(filename)\n    } else {\n      filename_idx = -1\n    }\n    if (filename_idx != -1) {\n      stlData = window.stlDataCached[filename_idx]\n      cached_file_found = true\n      console.log(\"Use cached file!!\")\n    } else {\n      let url = baseurl + filename\n      cached_file_found = false\n      status_elem.textContent = \"Loading from \" + url\n\n      try {\n        // Download the zipped STL file\n        let response\n        response = await fetch(url)\n        if (!response.ok) {\n          throw new Error(\"Request failed with status \" + response.status)\n        }\n        const zipData = await response.arrayBuffer()\n\n        // Unzip the zipped STL file\n        const zip = new JSZip()\n        await zip.loadAsync(zipData)\n\n        // Get the STL file from the unzipped contents\n        const stlFile = zip.file(Object.keys(zip.files)[0])\n        // Load the STL file\n        stlData = await stlFile.async(\"arraybuffer\")\n        if (window.stlFiles == null) {\n          window.stlFiles = []\n          window.stlDataCached = []\n        }\n        window.stlFiles.push(filename)\n        window.stlDataCached.push(stlData)\n      } catch (error) {\n        window.setLoading(false)\n        window.setShowErrorMessage(true)\n        return\n      }\n    }\n\n    if (stlData) {\n      // Parse the STL data and add the geometry to the geometries array\n      let geometry = new STLLoader().parse(stlData)\n\n      // Create and display the combined mesh\n      const comment = getCommentLine(stlData)\n      var local_offset = parseCommentLine(comment)\n\n      if (main_offset == null) {\n        main_offset = local_offset\n        local_offset = [0, 0, 0]\n      } else {\n        local_offset = [\n          local_offset[0] - main_offset[0],\n          local_offset[1] - main_offset[1],\n          local_offset[2] - main_offset[2],\n        ]\n        geometry.translate(local_offset[0], local_offset[1], local_offset[2])\n      }\n      console.log(\"OFFSETS\", main_offset, local_offset)\n      geometries.push(geometry)\n      // Merge geometries using BufferGeometryUtils\n      const combinedGeometry = BufferGeometryUtils.mergeGeometries(geometries)\n\n      const minZ = createMeshes(combinedGeometry, main_offset)\n      const offsetUTM32 = [loc_utm32[0], loc_utm32[1], minZ + main_offset[2]]\n\n      console.log(\"OffsetUTM32:\", offsetUTM32)\n      let laser_points = null\n      if (window.enableLaserPoints) {\n        laser_points = await loadLAZ(\n          50,\n          offsetUTM32,\n          get_file_names_laz(Number(loc.lon), Number(loc.lat))\n        )\n      }\n      if (laser_points != null) {\n        console.log(`Finished loading points ${laser_points.length}`)\n      }\n\n      //showMeshOrig();\n      calc_webgl(loc, laser_points, resetCamera)\n    } else {\n      console.error(\"STL file not found in ZIP archive\")\n    }\n  }\n}\n","import { createLazPerf } from \"laz-perf\"\n\nexport function parseHeader(arrayBuffer) {\n  if (arrayBuffer.byteLength < 227)\n    throw new Error(\"Invalid arrayBuffer length\")\n\n  const dataView = new DataView(arrayBuffer)\n\n  const pointDataRecordFormat = dataView.getUint8(104) & 0b1111\n  const pointDataRecordLength = dataView.getUint16(105, true)\n  const pointDataOffset = dataView.getUint32(96, true)\n  const pointCount = dataView.getUint32(107, true)\n\n  const scale = [\n    dataView.getFloat64(131, true),\n    dataView.getFloat64(139, true),\n    dataView.getFloat64(147, true),\n  ]\n  const offset = [\n    dataView.getFloat64(155, true),\n    dataView.getFloat64(163, true),\n    dataView.getFloat64(171, true),\n  ]\n  const min = [\n    dataView.getFloat64(187, true),\n    dataView.getFloat64(203, true),\n    dataView.getFloat64(219, true),\n  ]\n  const max = [\n    dataView.getFloat64(179, true),\n    dataView.getFloat64(195, true),\n    dataView.getFloat64(211, true),\n  ]\n  return {\n    pointDataRecordFormat,\n    pointDataRecordLength,\n    pointDataOffset,\n    pointCount,\n    scale,\n    offset,\n    min,\n    max,\n  }\n}\n\n// suggested by ChatGPT\nfunction getInt32(buffer, byteOffset, littleEndian) {\n  const bytes = [\n    buffer[byteOffset],\n    buffer[byteOffset + 1],\n    buffer[byteOffset + 2],\n    buffer[byteOffset + 3],\n  ]\n\n  if (!littleEndian) {\n    bytes.reverse()\n  }\n\n  const sign = bytes[3] & 0x80 ? -1 : 1\n  const value =\n    ((bytes[3] & 0x7f) << 24) | (bytes[2] << 16) | (bytes[1] << 8) | bytes[0]\n\n  return sign * value\n}\n\nexport async function loadLAZ(radius, offsetPos, filenames) {\n  console.log(\"LOADING!!!\")\n  const BUFFERED_POINTS_COUNT = 400000\n  let points = new Float32Array(3 * BUFFERED_POINTS_COUNT) // 1000 points * 3 values per point\n  let pointsIdx = 0\n\n  for (var filename of filenames) {\n    var filenameIdx\n    if (window.lazFiles != null) {\n      filenameIdx = window.lazFiles.indexOf(filename)\n    } else {\n      filenameIdx = -1\n    }\n    var arrayBuffer\n    if (filenameIdx != -1) {\n      arrayBuffer = window.lazCache[filenameIdx]\n    } else {\n      const response = await fetch(`https://www.openpv.de/laser/${filename}`)\n      arrayBuffer = await response.arrayBuffer()\n      if (window.lazFiles == null) {\n        window.lazFiles = []\n        window.lazCache = []\n      }\n      window.lazFiles.push(filename)\n      window.lazCache.push(arrayBuffer)\n    }\n    const fileUint8Array = new Uint8Array(arrayBuffer)\n\n    const {\n      pointDataRecordFormat,\n      pointDataRecordLength,\n      pointDataOffset,\n      pointCount,\n      scale,\n      offset,\n      min,\n      max,\n    } = parseHeader(arrayBuffer)\n\n    console.log(\"Total Point Count: \", pointCount)\n\n    // Create our Emscripten module.\n    const LazPerf = await createLazPerf()\n    const laszip = new LazPerf.LASZip()\n\n    // Allocate our memory in the Emscripten heap: a filePtr buffer for our\n    // compressed content and a single point's worth of bytes for our output.\n    const dataPtr = LazPerf._malloc(pointDataRecordLength)\n    const filePtr = LazPerf._malloc(fileUint8Array.byteLength)\n\n    // Copy our data into the Emscripten heap so we can point at it in getPoint().\n    LazPerf.HEAPU8.set(fileUint8Array, filePtr)\n\n    min[0] -= offsetPos[0]\n    max[0] -= offsetPos[0]\n    min[1] -= offsetPos[1]\n    max[1] -= offsetPos[1]\n    min[2] -= offsetPos[2]\n    max[2] -= offsetPos[2]\n\n    console.log(\"Mesh minmax\", min, max)\n    console.log(\"Offset Pos\", offsetPos)\n\n    const pointbuffer = new Uint8Array(\n      LazPerf.HEAPU8.buffer,\n      LazPerf.HEAPU8.byteOffset,\n      pointDataRecordLength\n    )\n    const dataview = new DataView(\n      pointbuffer.buffer,\n      pointbuffer.byteOffset,\n      pointDataRecordLength\n    )\n\n    console.time(\"LoadingTime\")\n\n    try {\n      laszip.open(filePtr, fileUint8Array.byteLength)\n\n      const heapByteOffset = LazPerf.HEAPU8.byteOffset\n\n      for (let i = 0; i < pointCount; ++i) {\n        laszip.getPoint(dataPtr)\n\n        // Directly access the LazPerf.HEAPU8 buffer without creating intermediary pointbuffer or dataview\n        const baseOffset = heapByteOffset + dataPtr\n\n        // Retrieve values directly from the buffer\n        const x =\n          getInt32(LazPerf.HEAPU8, baseOffset, true) * scale[0] +\n          offset[0] -\n          offsetPos[0]\n        const y =\n          getInt32(LazPerf.HEAPU8, baseOffset + 4, true) * scale[1] +\n          offset[1] -\n          offsetPos[1]\n        const z =\n          getInt32(LazPerf.HEAPU8, baseOffset + 8, true) * scale[2] +\n          offset[2] -\n          offsetPos[2]\n\n        if (x > -radius && x < radius && y > -radius && y < radius) {\n          if (pointsIdx >= points.length) {\n            const newPoints = new Float32Array(points.length * 2) // Double the size\n            newPoints.set(points)\n            points = newPoints\n          }\n          points[pointsIdx++] = x\n          points[pointsIdx++] = y\n          points[pointsIdx++] = z\n        }\n      }\n    } finally {\n      LazPerf._free(filePtr)\n      LazPerf._free(dataPtr)\n      laszip.delete()\n    }\n    console.timeEnd(\"LoadingTime\")\n  }\n  // points.length = pointsIdx;\n  console.log(\"Points loaded\", pointsIdx / 3)\n  points = points.subarray(0, pointsIdx)\n  return points\n}\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nfunction TooManyUniforms() {\n  const { t, i18n } = useTranslation()\n  return (\n    <div style={{ alignItems: \"center\" }}>\n      <p>{t(\"errorMessage.tooManyUniforms\")}</p>\n    </div>\n  )\n}\n\nexport default TooManyUniforms\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nfunction WrongAdress() {\n  const { t, i18n } = useTranslation()\n  return (\n    <div style={{ alignItems: \"center\" }}>\n      <p>{t(\"errorMessage.wrongAdress\")}</p>\n      <img\n        src=\"images/googleMaps.gif\"\n        alt=\"Showing how to get coordinates from Google Maps\"\n        style={{ width: \"100%\", maxWidth: \"500px\" }}\n      />\n    </div>\n  )\n}\n\nexport default WrongAdress\n","import React, { useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport DotLoader from \"react-spinners/DotLoader\"\nimport { setLocation } from \"../../simulation/download\"\nimport TooManyUniforms from \"../ErrorMessages/TooManyUniforms\"\nimport WrongAdress from \"../ErrorMessages/WrongAdress\"\n\nconst override = {\n  display: \"block\",\n  margin: \"auto\",\n  borderColor: \"red\",\n}\n\nfunction SearchField() {\n  const [inputValue, setInputValue] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [showErrorMessage, setShowErrorMessage] = useState(false)\n  const [inputChanged, setInputChanged] = useState(false)\n  const { t, i18n } = useTranslation()\n  const [showTooManyUniformsError, setShowTooManyUniformsError] =\n    useState(false)\n  window.setShowErrorMessage = setShowErrorMessage\n  window.setShowTooManyUniformsError = setShowTooManyUniformsError\n  window.setLoading = setLoading\n  const handleSubmit = (event) => {\n    setLoading(!loading)\n    window.setShowViridisLegend(false)\n    event.preventDefault()\n    window.setShowThreeViewer(true)\n    setLocation(inputValue, inputChanged, window.mapLocation)\n    window.numRadiusSimulationChanged = false\n    window.numSimulationsChanged = false\n    window.mapLocationChanged = false\n    setShowErrorMessage(false)\n    setShowTooManyUniformsError(false)\n    setInputChanged(false)\n  }\n  const handleChange = (event) => {\n    if (inputValue != event.target.value) {\n      setInputValue(event.target.value)\n      setInputChanged(true)\n    }\n  }\n\n  return (\n    <>\n      <form\n        onSubmit={handleSubmit}\n        style={{ display: \"flex\", alignItems: \"center\" }}\n        id=\"search-field\"\n      >\n        <input\n          type=\"text\"\n          placeholder={t(\"searchField.placeholder\")}\n          value={inputValue}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Start</button>\n      </form>\n      {showErrorMessage && <WrongAdress />}\n      {showTooManyUniformsError && <TooManyUniforms />}\n      <DotLoader\n        color=\"MediumAquaMarine\"\n        cssOverride={override}\n        loading={loading}\n        size={60}\n      />\n      {window.enableLaserPoints && loading && (\n        <div style={{ padding: \"30px\" }}>\n          <p style={{ textAlign: \"center\" }}>\n            {t(\"loadingMessage.warningUseLaserpoints\")}\n          </p>\n        </div>\n      )}\n      {!window.enableLaserPoints && loading && (\n        <div style={{ padding: \"30px\" }}>\n          <p style={{ textAlign: \"center\" }}>\n            {t(\"loadingMessage.warningUseNoLaserpoints\")}\n          </p>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default SearchField\n","import { useEffect, useState } from \"react\"\nimport { Canvas } from \"react-three-fiber\"\nimport * as THREE from \"three\"\nimport { setLocation } from \"../../simulation/download\"\nimport { camera, controls, renderer, scene } from \"../../simulation/stlviewer\"\n\nexport default function ThreeViewer() {\n  const [offsetPosition, setOffsetPosition] = useState([0, 0]) // initial camera position\n  const [loading, setLoading] = useState(false)\n  if (window.offsetPos == null) {\n    window.offsetPos = [0, 0]\n  }\n\n  const addLocationCylinder = (newPos) => {\n    const cylinderHeight = 100\n    const geometry = new THREE.CylinderGeometry(0.25, 0.25, cylinderHeight, 32)\n    const material = new THREE.MeshBasicMaterial({ color: 0x888888 })\n    const cylinder = new THREE.Mesh(geometry, material)\n    cylinder.position.set(newPos[0], newPos[1], cylinderHeight / 2)\n    cylinder.rotation.set(Math.PI / 2, 0, 0)\n    scene.add(cylinder)\n\n    // setTimeout(() => {\n    //   scene.remove(cylinder);\n    //   cylinder.geometry.dispose();\n    //   cylinder.material.dispose();\n    //   renderer.render(scene, camera);\n    // }, 2000);\n\n    // Create a function to gradually reduce the opacity\n    function fade() {\n      if (cylinder.scale.y > 0.1) {\n        // Reduce the scale by a small amount\n        cylinder.scale.y *= 0.95\n        cylinder.position.z = (cylinder.scale.y * cylinderHeight) / 2\n        // Increase the color brightness by a small amount\n        material.color.lerp(new THREE.Color(0xbbbbbb), 0.04) // Bright green\n\n        // renderer.render(scene, camera);\n        // Call this function again after a small delay\n        setTimeout(fade, 20)\n      } else {\n        // Once the opacity reaches 0, remove the cylinder from the scene\n        scene.remove(cylinder)\n\n        // Dispose of the geometry and the material\n        cylinder.geometry.dispose()\n        cylinder.material.dispose()\n      }\n    }\n\n    // Start the fading process\n    fade()\n  }\n\n  const movePosition = (x, y) => {\n    var offset = [0, 0]\n    // console.log(\"MapBaseChanged: \", window.mapLocationBaseChanged);\n    // console.log(\"MapChanged: \", window.mapLocationChanged);\n    if (window.mapLocationBaseChanged) {\n      setOffsetPosition(0, 0)\n      offset = [-offsetPosition[0], -offsetPosition[1]]\n      window.mapLocationBaseChanged = false\n    } else {\n      offset = [0, 0]\n    }\n\n    if (window.mapLocation != null) {\n      const distanceStep = window.distanceStep\n\n      const direction = Math.atan2(camera.rotation.y, camera.rotation.x)\n      const step = {\n        x:\n          x * distanceStep * Math.cos(direction) -\n          y * distanceStep * Math.sin(direction),\n        y:\n          y * distanceStep * Math.cos(direction) +\n          x * distanceStep * Math.sin(direction),\n      }\n      const newPos = [\n        offsetPosition[0] + step.x + offset[0],\n        offsetPosition[1] + step.y + offset[1],\n      ]\n      window.offsetPos = newPos\n      console.log(\"Old offset pos\", window.offsetPos)\n      setOffsetPosition([newPos[0], newPos[1]])\n      const loc = { lon: window.mapLocation.lon, lat: window.mapLocation.lat }\n      var newloc = { lon: parseFloat(loc.lon), lat: parseFloat(loc.lat) }\n      // console.log(direction, step, offset);\n      // console.log(newPos);\n      // console.log(\"Old location: \", newloc.lon, newloc.lat);\n      newloc.lon +=\n        (step.x * 360) / 40000000 / Math.cos((newloc.lat / 180) * Math.PI)\n      newloc.lat += (step.y * 360) / 40000000\n      // console.log(\"Update location: \", loc, newloc);\n      newloc = { lat: newloc.lat.toString(), lon: newloc.lon.toString() }\n      window.mapLocation = newloc\n      window.mapLocationChanged = true\n\n      camera.position.set(\n        camera.position.x + step.x,\n        camera.position.y + step.y,\n        camera.position.z\n      )\n      camera.lookAt(newPos[0], newPos[1], 0)\n      controls.target.set(newPos[0], newPos[1], 0)\n\n      // console.log(\"PostMove Camera Position\", camera.position);\n      // console.log(\"Camera Rot\", camera.rotation);\n\n      var animate = function () {\n        requestAnimationFrame(animate)\n        controls.update()\n        renderer.render(scene, camera)\n      }\n      animate()\n\n      addLocationCylinder(newPos)\n    }\n  }\n\n  const resimulate = () => {\n    setLoading(!loading)\n    window.setShowViridisLegend(false)\n    window.setShowThreeViewer(true)\n    setLocation(\"\", false, window.mapLocation)\n    window.numRadiusSimulationChanged = false\n    window.numSimulationsChanged = false\n    window.mapLocationChanged = false\n    setShowErrorMessage(false)\n    setShowTooManyUniformsError(false)\n  }\n\n  return (\n    <div className=\"viewer-container\" style={{ position: \"relative\" }}>\n      <Canvas className=\"three-viewer\" flat linear></Canvas>\n      \n      <canvas id=\"canvas\" width={0} height={0}></canvas>\n      {window.showViridisLegend && \n        <div style={{ position: 'absolute', left: 0, bottom: 0, margin: '10px' }}>\n          <p style={{ fontSize: '8px' }}>\n            <a href=\"https://geodaten.bayern.de/opengeodata/\">Gebäudedaten</a> der \n            <a href=\"https://www.ldbv.bayern.de/vermessung/bvv.html\"> Bayerischen Vermessungsverwaltung </a> |\n            <a href=\"https://creativecommons.org/licenses/by/4.0/deed.de\">CC BY 4.0</a>\n          </p>\n          <p><b>Leertaste</b>: Eckpunkt <b>P</b>: Polygon erstellen <b>B</b>: Alles zurücksetzen</p>\n        \n    </div>\n      }\n      {window.showViridisLegend && (\n        <>\n        \n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(0, 1)}\n            style={{ right: \"1em\", bottom: \"2em\" }}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(0, -1)}\n            style={{ right: \"1em\", bottom: \"0em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              style={{ transform: \"rotate(180deg)\" }}\n            >\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={resimulate}\n            style={{ right: \"1em\", bottom: \"1em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"50\"\n              height=\"50\"\n              viewBox=\"0 0 50 50\"\n            >\n              <polyline\n                points=\"10,25 20,35 40,15\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.5em\"\n                fill=\"none\"\n              />\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(-1, 0)}\n            style={{ right: \"2em\", bottom: \"1em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              style={{ transform: \"rotate(270deg)\" }}\n            >\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(1, 0)}\n            style={{ right: \"0em\", bottom: \"1em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              style={{ transform: \"rotate(90deg)\" }}\n            >\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n        </>\n      )}\n    </div>\n  )\n}\n","import React from \"react\"\n\nconst ViridisLegend = () => {\n  return (\n    <img\n      src=\"images/viridis_legend.svg\"\n      alt=\"Legend of the viridis colormap\"\n      style={{ opacity: 0.6 }}\n      width=\"100%\"\n    />\n  )\n}\n\nexport default ViridisLegend\n","import React, { useState } from \"react\"\nimport SearchField from \"../components/PVSimulation/SearchField\"\n\nimport ThreeViewer from \"../components/ThreeViewer/ThreeViewer\"\nimport ViridisLegend from \"../components/ThreeViewer/ViridisLegend\"\nimport Main from \"../layouts/Main\"\n\nfunction Index() {\n  const [showThreeViewer, setShowThreeViewer] = useState(true)\n  const [showViridisLegend, setShowViridisLegend] = useState(false)\n  window.setShowThreeViewer = setShowThreeViewer\n  window.setShowViridisLegend = setShowViridisLegend\n  window.showViridisLegend = showViridisLegend\n  return (\n    <Main description={\"Berechne das Potential deiner Solaranlage.\"}>\n      <article className=\"post\" id=\"index\">\n        <header>\n          <div className=\"title\">\n            <SearchField />\n          </div>\n        </header>\n        {showThreeViewer && <ThreeViewer />}\n        {showViridisLegend && <ViridisLegend />}\n      </article>\n    </Main>\n  )\n}\n\nexport default Index\n"],"names":["subdivideTriangle","triangle","_triangle","_slicedToArray","v0","v1","v2","m01","vec3","m12","m20","adaptiveSubdivideMesh","triangles","threshold","_step","subdividedTrianglesList","_iterator","_createForOfIteratorHelper","s","n","done","trianglesToSubdivide","value","length","currentTriangle","pop","edge1","edge2","crossProduct","lengthEdge1","lengthEdge2","area","Math","max","push","subdividedTriangles","apply","_toConsumableArray","err","e","f","scene","renderer","camera","controls","raycaster","THREE","cursor","lastMousePosition","x","y","clickedPoints","pointColors","drawnObjects","prefilteredPolygons","polygonYields","POLYGON_PREFILTERING_CUTOFF","TRIANGLE_SUBDIVSION_THRESHOLD","ANNUAL_YIELD_SCALING_FACTOR","isTransitioning","transitionStartTime","transitionDuration","startTarget","endTarget","startPosition","endPosition","mouseCursor","STLViewer","resetCamera","arguments","undefined","elem","document","getElementsByClassName","style","width","height","antialias","alpha","clientWidth","clientHeight","up","setSize","replaceChild","domElement","firstChild","window","addEventListener","aspect","updateProjectionMatrix","MapControls","mouseButtons","LEFT","PAN","MIDDLE","DOLLY","RIGHT","ROTATE","screenSpacePanning","maxPolarAngle","PI","onRightClick","color","intensity","position","forEach","config","_light$position","light","set","add","legend","canvas","createElement","context","getContext","font","fillStyle","fillRect","textLines","line","index","fillText","texture","material","map","sprite","scale","createLegend","setupScene","onMouseMove","onKeyDown","addEventListeners","animate","event","preventDefault","rect","getBoundingClientRect","mouse","clientX","left","clientY","top","setFromCamera","intersects","intersectObjects","children","intersectPoint","point","clone","offset","subVectors","target","performance","now","filter","obj","includes","copy","geometry","mesh","createMouseCursor","remove","potentialVertex","lastVertex","distance","distanceTo","console","log","tagName","code","intersect","offsetPoint","face","normal","multiplyScalar","uv","object","image","drawImage","floor","pixel","getImageData","data","getColorAtIntersection","getStyle","createCursor","handleSpaceKey","vertices","colors","z","r","g","b","setAttribute","triangulateShape","a","c","flatMap","points","filteredPolygons","traverse","child","isMesh","isBufferGeometry","positions","attributes","array","intensities","_loop","i","color0","color1","color2","intensity1","intensity2","intensity3","minDistance","Infinity","min","getNormal","filterPolygonsByDistance","newVertices","newIndices","newColors","newIntensities","startIndex","vertex","closestPolygon","findClosestPolygon","projectedVertex","projectOntoTriangle","getColorAtPointOnTriangle","getIntensityAtPointOnTriangle","polygonArea","polygon","totalArea","calculateTriangleArea","calculatePolygonArea","polygonIntensity","numTriangles","totalIntensity","triangleArea","calculateTriangleIntensity","averageIntensity","calculatePolygonIntensity","annualYield","setIndex","vertexColors","side","edges","lineMaterial","lines","wireframeGeometry","wireframeMaterial","wireframe","centroid","numVertices","divideScalar","calculateCentroid","text","split","spriteMaterial","depthTest","renderOrder","createSprite","concat","toFixed","updateLegend","createPolygon","longestEdgeMidpoint","ab","bc","ca","ac","crossVectors","polygons","_polygon$vertices","error","_triangle$vertices","normalize","t","dot","_triangle$vertices2","areaABC","sub","u","v","w","_triangle$vertices3","solarYields","oldLegend","getObjectByName","solarYield","name","requestAnimationFrame","elapsedTime","lerpVectors","update","render","addToArray","ar1","ar2","intensity_colormap","c0","c1","c2","c3","c4","c5","c6","max_subdim","iterate","min_subdim","rayTracingPointsWebGL","pointsArray","trianglesArray","normals","laserPoints","laserPointsRadius","laserPointsMinDistance","num_dates","loc","N_TRIANGLES","N_POINTS","gl","getElementById","alert","vertexShaderSource","max3DTextureSize","getParameter","MAX_3D_TEXTURE_SIZE","numLaserPoints","textureWidth","textureDepth","textureHeight","texturePointsGrid","Float32Array","scaleDown","laserPointAreaBounds","laserPointZBound","laserPointAreaWidth","laserPointAreaHeight","gridCellSize","sqrt","ceil","nPointsGrid","Int32Array","maxNPoints","j","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","variables_of_interest","createProgram","setShowTooManyUniformsError","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","alignedTrianglesArray","colorBuffer","makeBuffer","tf","buffer","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","makeTransformFeedback","maxTextureSize","MAX_TEXTURE_SIZE","textureWidthTris","textureHeightTris","useProgram","textureTri","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texImage2D","RGBA32F","RGBA","FLOAT","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE1","TEXTURE_3D","texImage3D","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","u_trianglesLocation","getUniformLocation","uniform1i","u_pointcloudShading","u_textureWidth","u_textureHeight","u_textureDepth","u_POINT_RADIUS","uniform1f","u_MIN_DISTANCE","u_scaleDown","u_MAX_STEPS","u_gridCellSizes","uniform3f","u_originOffset","u_gridLocation","u_textureWidthTris","positionAttributeLocation","getAttribLocation","normalAttributeLocation","vao","createVertexArray","bindVertexArray","positionBuffer","makeBufferAndSetAttribute","normalBuffer","isShadowedArray","sunDirectionUniformLocation","sunDirection","retrieveRandomSunDirections","lat","lon","uniform3fv","drawArraysWithTransformFeedback","POINTS","getResults","_","deleteTexture","deleteShader","deleteBuffer","deleteTransformFeedback","label","results","bindBuffer","ARRAY_BUFFER","getBufferSubData","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","sizeOrData","buf","createBuffer","bufferData","DYNAMIC_DRAW","enableVertexAttribArray","vertexAttribPointer","primitiveType","count","enable","RASTERIZER_DISCARD","beginTransformFeedback","drawArrays","endTransformFeedback","disable","raytracingGeometry","innerGeometry","outerGeometry","Ndates","directions","date","Date","random","pos","SunCalc","altitude","Number","NaN","cos","sin","azimuth","calc_webgl","_x","_x2","_x3","_calc_webgl","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mesh_vectors","status_elem","uniquePoints","uniqueNormals","uniquePairs","pointKey","uniquePointsArray","uniqueNormalsArray","uniqueIntensities","_i","_point","_pointKey","intensities_array","_i2","_point2","_pointKey2","wrap","_context","prev","next","textContent","hasChanged","parseFloat","JSON","stringify","hasOwnProperty","slice","numSimulations","sent","setLoading","abrupt","Array","fill","showMeshIntensities","stop","refine_triangles","triangle_array","newpos_update","cutoffMesh","cutoff","posarray","newposarray","newnormals","keep","d1","d2","ar","new_geometry","needsUpdate","createMeshes","big_geometry","minZ","cutoffRaytracing","numRadiusSimulation","outerCutoff","refinementCutoff","mesh_refinement_scale","newMinZ","xytranslate","POSITIVE_INFINITY","zcoord","getZ","centerMesh","loc_utm","geometryDict","adaptiveSubdivideThreshold","innerPosarray","innerNormals","outerPosarray","outerNormals","isInnerGeometry","_step2","triangle_points","_iterator2","splitCutoffRefineMesh","setShowErrorMessage","setShowThreeViewer","_x4","_x5","_x6","_showMeshIntensities","_callee3","oldCameraPosition","Npoints","col","outerGeometryMaterial","outerMesh","sphereGeometry","sphereMaterial","sphere","middle","_context3","shininess","roughness","pointsVisualizationRatio","computeBoundingBox","boundingBox","getCenter","offsetPos","setShowViridisLegend","parseHeader","arrayBuffer","byteLength","Error","dataView","DataView","pointDataRecordFormat","getUint8","pointDataRecordLength","getUint16","pointDataOffset","getUint32","pointCount","getFloat64","getInt32","byteOffset","littleEndian","bytes","reverse","loadLAZ","_loadLAZ","radius","filenames","pointsIdx","filename","filenameIdx","response","fileUint8Array","_parseHeader","LazPerf","laszip","dataPtr","filePtr","pointbuffer","heapByteOffset","baseOffset","newPoints","lazFiles","indexOf","lazCache","fetch","Uint8Array","createLazPerf","LASZip","_malloc","HEAPU8","time","open","getPoint","_free","delete","timeEnd","t0","finish","subarray","getLocationFromInput","_getLocationFromInput","locationText","_locationText$split$m","_locationText$split$m2","latitude","longitude","url","locationTextModified","test","trim","fetchLocation","join","_fetchLocation","_callee2","statuselem","responseData","_context2","ok","status","json","setLocation","_setLocation","inputValue","inputChanged","newloc","mapLocationBaseChanged","mapLocation","retrieveData","mapLocationChanged","get_utm32","proj4","defs","_transformer$forward","forward","_transformer$forward2","x_utm32","y_utm32","get_file_names","DIVISOR","BUFFER_ZONE","x_rounded","y_rounded","load_tile_left","load_tile_right","load_tile_lower","load_tile_upper","file_list","get_file_names_laz","getCommentLine","stlData","uint8Array","commentChars","unshift","String","fromCharCode","commentLine","parseCommentLine","comment","match","_retrieveData","_callee4","baseurl","geometries","main_offset","loc_utm32","filename_idx","zipData","zip","stlFile","local_offset","combinedGeometry","offsetUTM32","laser_points","_args4","_context4","stlFiles","stlDataCached","JSZip","loadAsync","file","Object","keys","files","async","STLLoader","parse","translate","BufferGeometryUtils","enableLaserPoints","t1","_useTranslation","useTranslation","i18n","_jsx","alignItems","_jsxs","src","alt","maxWidth","override","display","margin","borderColor","_useState","useState","_useState2","setInputValue","_useState3","_useState4","loading","_useState5","_useState6","showErrorMessage","_useState7","_useState8","setInputChanged","_useState9","_useState10","showTooManyUniformsError","_Fragment","onSubmit","numRadiusSimulationChanged","numSimulationsChanged","id","placeholder","onChange","WrongAdress","TooManyUniforms","DotLoader","cssOverride","size","padding","textAlign","ThreeViewer","offsetPosition","setOffsetPosition","movePosition","distanceStep","direction","atan2","rotation","step","newPos","toString","lookAt","cylinder","cylinderHeight","fade","lerp","setTimeout","dispose","addLocationCylinder","className","Canvas","flat","linear","showViridisLegend","bottom","fontSize","href","onClick","right","xmlns","viewBox","x1","y1","x2","y2","transform","stroke","strokeWidth","opacity","showThreeViewer","Main","description","SearchField","ViridisLegend"],"sourceRoot":""}