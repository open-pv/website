{"version":3,"file":"static/js/994.33d1c049.chunk.js","mappings":"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","sources":["simulation/stl_to_array.js","simulation/stlviewer.js","simulation/utils.js","simulation/webgl_raytracing_points.js","simulation/pv_simulation.js","simulation/download.js","simulation/lazimport.js","components/ErrorMessages/TooManyUniforms.js","components/ErrorMessages/WrongAdress.js","components/PVSimulation/SearchField.js","components/ThreeViewer/ThreeViewer.js","components/ThreeViewer/ViridisLegend.js","pages/Index.js"],"sourcesContent":["import { vec3 } from \"gl-matrix\"\n// const { vec3, mat4 } = glMatrix;\n\nexport function loadSTL(model) {\n  return new Promise((resolve, reject) => {\n    new THREE.STLLoader().load(\n      model,\n      function (geometry) {\n        // Extract the position and normal arrays from the geometry\n        const positionArray = geometry.attributes.position.array\n        //const normalArray = geometry.attributes.normal.array;\n\n        const triangles = []\n\n        for (let i = 0; i < positionArray.length; i += 9) {\n          const triangle = [\n            Array.from(positionArray.slice(i, i + 3)),\n            Array.from(positionArray.slice(i + 3, i + 6)),\n            Array.from(positionArray.slice(i + 6, i + 9)),\n          ]\n\n          triangles.push(triangle.map((v) => vec3.fromValues(...v)))\n        }\n\n        const threshold = 0.1 // Set your desired threshold value here\n        const subdividedTriangles = adaptiveSubdivideMesh(triangles, threshold)\n\n        // Return the arrays in an object\n        resolve({\n          original_vertices: positionArray,\n          subdivided_triangles: subdividedTriangles,\n        })\n      },\n      undefined,\n      reject\n    )\n  })\n}\n\nexport function subdivideTriangle(triangle) {\n  const [v0, v1, v2] = triangle\n\n  const m01 = vec3.clone(v0)\n  const m12 = vec3.clone(v1)\n  const m20 = vec3.clone(v2)\n\n  vec3.lerp(m01, v0, v1, 0.5)\n  vec3.lerp(m12, v1, v2, 0.5)\n  vec3.lerp(m20, v2, v0, 0.5)\n\n  return [\n    [v0, m01, m20],\n    [v1, m12, m01],\n    [v2, m20, m12],\n    [m01, m12, m20],\n  ]\n}\n\nexport function adaptiveSubdivideMesh(triangles, threshold) {\n  const subdividedTrianglesList = []\n\n  for (const triangle of triangles) {\n    let trianglesToSubdivide = [triangle]\n\n    while (trianglesToSubdivide.length > 0) {\n      const currentTriangle = trianglesToSubdivide.pop()\n\n      const edge1 = vec3.create()\n      const edge2 = vec3.create()\n\n      vec3.sub(edge1, currentTriangle[1], currentTriangle[0])\n      vec3.sub(edge2, currentTriangle[2], currentTriangle[0])\n\n      const crossProduct = vec3.create()\n      vec3.cross(crossProduct, edge1, edge2)\n      const area = 0.5 * vec3.len(crossProduct)\n\n      let lengthEdge1\n      let lengthEdge2\n\n      lengthEdge1 = vec3.dot(edge1, edge1)\n      lengthEdge2 = vec3.dot(edge2, edge2)\n\n      if (area <= threshold && Math.max(lengthEdge1, lengthEdge2) <= 1) {\n        subdividedTrianglesList.push(currentTriangle)\n      } else {\n        const subdividedTriangles = subdivideTriangle(currentTriangle)\n        trianglesToSubdivide.push(...subdividedTriangles)\n      }\n    }\n  }\n\n  return subdividedTrianglesList\n}\n","import * as THREE from \"three\"\nimport { MapControls } from \"three/addons/controls/MapControls.js\"\n\nexport var scene = null\nexport var renderer = null\nexport var camera = null\nexport var controls = null\n\nexport function STLViewerEnable(classname) {\n  var model = document.getElementsByClassName(classname)[0]\n  STLViewer(model)\n}\n\nexport function STLViewer(resetCamera = true) {\n  const elem = document.getElementsByClassName(\"three-viewer\")[0]\n\n  elem.style.width = \"100%\"\n  elem.style.height = \"400px\"\n\n  renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true })\n\n  //   if (camera != null) {\n  //     console.log(\"ResetCamera\", resetCamera);\n  //     console.log(\"CameraPos\", camera.position);\n  //     console.log(\"CameraRotation\", camera.rotation);\n  //   }\n  if (resetCamera == false || camera == null) {\n    camera = new THREE.PerspectiveCamera(\n      45,\n      elem.clientWidth / elem.clientHeight,\n      1,\n      1000\n    )\n    camera.up = new THREE.Vector3(0, 0, 1)\n  }\n  renderer.setSize(elem.clientWidth, elem.clientHeight)\n  elem.replaceChild(renderer.domElement, elem.firstChild)\n\n  window.addEventListener(\n    \"resize\",\n    function () {\n      renderer.setSize(elem.clientWidth, elem.clientHeight)\n      camera.aspect = elem.clientWidth / elem.clientHeight\n      camera.updateProjectionMatrix()\n    },\n    false\n  )\n\n  controls = new MapControls(camera, renderer.domElement)\n  controls.mouseButtons = {\n    LEFT: THREE.MOUSE.PAN,\n    MIDDLE: THREE.MOUSE.DOLLY,\n    RIGHT: THREE.MOUSE.ROTATE,\n  }\n  controls.screenSpacePanning = false\n  controls.maxPolarAngle = Math.PI / 2\n\n  scene = new THREE.Scene()\n\n  let dirLight = new THREE.DirectionalLight(0xffffff, 0.25)\n  dirLight.position.set(0, -0.3, 1)\n  scene.add(dirLight)\n\n  let dirLight2 = new THREE.DirectionalLight(0xffffff, 0.1)\n  dirLight2.position.set(0.3, -0.3, 1)\n  scene.add(dirLight2)\n\n  let dirLight3 = new THREE.DirectionalLight(0xffffff, 0.1)\n  dirLight3.position.set(-0.3, -0.3, 1)\n  scene.add(dirLight3)\n  scene.add(new THREE.AmbientLight(0xffffff, 1))\n}\n","export function addToArray(ar1, ar2) {\n  for (var i = 0; i < ar1.length; i++) {\n    ar1[i] += ar2[i]\n  }\n}\n\n// from https://observablehq.com/@flimsyhat/webgl-color-maps\nexport function intensity_colormap(t) {\n  //viridis\n  const c0 = [0.2777273272234177, 0.005407344544966578, 0.3340998053353061]\n  const c1 = [0.1050930431085774, 1.404613529898575, 1.384590162594685]\n  const c2 = [-0.3308618287255563, 0.214847559468213, 0.09509516302823659]\n  const c3 = [-4.634230498983486, -5.799100973351585, -19.33244095627987]\n  const c4 = [6.228269936347081, 14.17993336680509, 56.69055260068105]\n  const c5 = [4.776384997670288, -13.74514537774601, -65.35303263337234]\n  const c6 = [-5.435455855934631, 4.645852612178535, 26.3124352495832]\n\n  //const res = c0*0.004+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))))*0.004;\n  const res = [\n    c0[0] +\n      t *\n        (c1[0] +\n          t * (c2[0] + t * (c3[0] + t * (c4[0] + t * (c5[0] + t * c6[0]))))),\n    c0[1] +\n      t *\n        (c1[1] +\n          t * (c2[1] + t * (c3[1] + t * (c4[1] + t * (c5[1] + t * c6[1]))))),\n    c0[2] +\n      t *\n        (c1[2] +\n          t * (c2[2] + t * (c3[2] + t * (c4[2] + t * (c5[2] + t * c6[2]))))),\n  ]\n  return res\n}\n\nexport function deleteChildDivs(parentDivClass) {\n  let parentDiv = document.getElementsByClassName(parentDivClass)\n  for (var i = 0; i < parentDiv.length; i++) {\n    let div = parentDiv[i]\n\n    // Remove all child elements by setting innerHTML to an empty string\n    div.innerHTML = \"\"\n  }\n}\n","import { retrieveRandomSunDirections } from \"./pv_simulation\"\nimport { addToArray } from \"./utils\"\n\nfunction max_subdim(array, index) {\n  var max = -1000000\n  for (var ar of array) {\n    max = Math.max(ar[index], max)\n  }\n  return max\n}\n\nfunction min_subdim(array, index) {\n  var min = 1000000\n  for (var ar of array) {\n    min = Math.min(ar[index], min)\n  }\n  return min\n}\n\nexport function rayTracingPointsWebGL(\n  pointsArray,\n  trianglesArray,\n  normals,\n  laserPoints,\n  laserPointsRadius,\n  laserPointsMinDistance,\n  num_dates,\n  loc\n) {\n  const N_TRIANGLES = trianglesArray.length / 9\n  const width = pointsArray.length / 3 // Change this to the number of horizontal points in the grid\n  const N_POINTS = width\n  const canvas = document.getElementById(\"canvas\")\n\n  //canvas.width = width;\n  //canvas.height = height;\n\n  const gl = canvas.getContext(\"webgl2\")\n\n  if (!gl) {\n    alert(\"Your browser does not support WebGL2\")\n  }\n\n  // Vertex shader code\n  const vertexShaderSource = `#version 300 es\n\t#define INFINITY         1000000.0\n\tprecision highp float;\n  precision mediump sampler3D;\n\n  uniform vec3 u_sun_direction;\n  uniform int textureWidth;\n  uniform int textureHeight;\n  uniform int textureDepth;\n  uniform float u_POINT_RADIUS;\n  uniform float u_MIN_DISTANCE;\n  uniform int MAX_STEPS;\n  uniform vec3 gridCellSizes;\n  uniform vec3 origin_offset;\n  uniform sampler3D u_grid;\n  uniform float scaleDown;\n  uniform int pointcloudShading;\n\n  uniform sampler2D u_triangles;\n\tuniform int textureWidthTris;\n\n\tin vec3 a_position;\n\tin vec3 a_normal;\n\n\tout vec4 outColor;\n\n\tvec3 cross1(vec3 a, vec3 b) {\n\t\tvec3 c = vec3(0, 0, 0);\n\t\tc.x = a[1] * b[2] - a[2] * b[1];\n\t\tc.y = a[2] * b[0] - a[0] * b[2];\n\t\tc.z = a[0] * b[1] - a[1] * b[0];\n\t\treturn c;\n\t}\n    \n  bool intersectRaySphere(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float sphereRadius) {\n      vec3 oc = sphereCenter - rayOrigin;\n      float b = dot(oc, rayDir);\n      float c = dot(oc, oc) - b*b;\n      return ((b > 0.)&&(c < sphereRadius * sphereRadius));\n  }\n\n  float TriangleIntersect( vec3 v0, vec3 v1, vec3 v2, vec3 rayOrigin, vec3 rayDirection, int isDoubleSided )\n\t{\n\t\tvec3 edge1 = v1 - v0;\n\t\tvec3 edge2 = v2 - v0;\n\n\t\tvec3 pvec = cross(rayDirection, edge2);\n\n\t\tfloat epsilon = 0.000001; // Add epsilon to avoid division by zero\n\t\tfloat det = dot(edge1, pvec);\n\t\tif (abs(det) < epsilon) // Check if det is too close to zero\n\t\t\treturn INFINITY;\n\n\t\tfloat inv_det = 1.0 / det;\n\t\tif ( isDoubleSided == 0 && det < 0.0 ) \n\t\t\treturn INFINITY;\n\t\t\n\t\tvec3 tvec = rayOrigin - v0;\n\t\tfloat u = dot(tvec, pvec) * inv_det;\n\t\tvec3 qvec = cross(tvec, edge1);\n\t\tfloat v = dot(rayDirection, qvec) * inv_det;\n\t\tfloat t = dot(edge2, qvec) * inv_det;\n\t\tfloat x = dot(pvec,pvec);\n\t\treturn (u < 0.0 || u > 1.0 || v < 0.0 || u + v > 1.0 || t <= 0.0) ? INFINITY : t;\n\t}\n\n\tfloat Calculate_Shading_at_Point_Triangles(vec3 vertex_position, vec3 sun_direction) {\n\t\tfloat d;\n\t\tfloat t = INFINITY;\n\t\tfloat shadow_value = 0.;\n    for (int i = 0; i < ${N_TRIANGLES}; i++) {\n\t\t\tint index = i * 3;\n\t\t\tint x = index % textureWidthTris;\n\t\t\tint y = index / textureWidthTris;\n\t\t\tvec3 v0 = texelFetch(u_triangles, ivec2(x, y), 0).rgb;\n\n\t\t\tindex = i * 3 + 1;\n\t\t\tx = index % textureWidthTris;\n\t\t\ty = index / textureWidthTris;\n\t\t\tvec3 v1 = texelFetch(u_triangles, ivec2(x, y), 0).rgb;\n\n\t\t\tindex = i * 3 + 2;\n\t\t\tx = index % textureWidthTris;\n\t\t\ty = index / textureWidthTris;\n\t\t\tvec3 v2 = texelFetch(u_triangles, ivec2(x, y), 0).rgb;\n\n\t\t\td = TriangleIntersect(v0, v1, v2, vertex_position, sun_direction, 1);\n\t\t\tif (d < t && abs(d)>0.0001) {\n\t\t\t\tshadow_value += 1.;\n\n\t\t}\n\t\t}\n\t\treturn shadow_value;\n\t}\n\n\tfloat Calculate_Shading_at_Point(vec3 vertex_position, vec3 sun_direction) {\n        vec3 ray = normalize(sun_direction);\n        vec3 step = sign(ray);\n        vec3 tMax = (step * (gridCellSizes - mod(vertex_position - origin_offset, gridCellSizes)) + gridCellSizes) / ray;\n        vec3 tDelta = step * gridCellSizes / ray;\n        float shadow_value = 0.;\n        ivec3 gridPos = ivec3((vertex_position - origin_offset) / gridCellSizes);\n        // if ((vertex_position.x < 10.) && (vertex_position.x > -10.) && (vertex_position.y < 10.) && (vertex_position.y > -10.)){\n        //     return true;\n        // }\n        // if (gridPos.x == 0){\n        //     return true;\n        // }\n        for (int i = 0; i < MAX_STEPS; i++) {\n            for (int j = 0; j < textureDepth; j++) {\n                vec4 point = texelFetch(u_grid, ivec3(gridPos.x, gridPos.y, j), 0);\n                vec3 pointPos = point.rgb * scaleDown + origin_offset;\n\n                if (dot(pointPos - vertex_position, pointPos - vertex_position) <= u_MIN_DISTANCE * u_MIN_DISTANCE ){\n                    continue;\n                }\n\n                if (pointPos.z > -10.){\n                    if (intersectRaySphere(vertex_position, ray, pointPos, u_POINT_RADIUS)) {\n                        shadow_value += 1.0;\n                    }\n                }\n                else{\n                  break;\n                }\n            }\n            int axis = (tMax.x < tMax.y) ? 0 : 1;\n            tMax[axis] += tDelta[axis];\n            gridPos[axis] += int(step[axis]);\n            if ((textureWidth <= gridPos.x) || (textureHeight <= gridPos.y) || (gridPos.x < 0) || (gridPos.y < 0)){\n                break;\n            }\n        }\n        return shadow_value;\n    }\n\n\tvoid main() {\n\t\tfloat shadow_value = Calculate_Shading_at_Point_Triangles(a_position.xyz, u_sun_direction);\n    if (pointcloudShading > 0){\n      shadow_value += Calculate_Shading_at_Point(a_position.xyz, u_sun_direction);\n    }\n\t\tfloat intensity = dot(a_normal.xyz, u_sun_direction)*((shadow_value > 1.)?0.:(1.-shadow_value));\n    intensity = (intensity < 0.)?0.:intensity;\n    outColor = vec4(intensity, intensity, intensity, intensity); // Not shadowed\n\t}`\n\n  // Fragment shader code\n  const fragmentShaderSource = `#version 300 es\n\tprecision highp float;\n\tvoid main() {\n\t}\n\t`\n\n  let max3DTextureSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE)\n  console.log(\"Max 3D texture size: \", max3DTextureSize)\n\n  const numLaserPoints = laserPoints != null ? laserPoints.length : 1\n  var textureWidth = 1\n  var textureDepth = 1\n  var textureHeight = 1\n  let texturePointsGrid = new Float32Array(1)\n  var scaleDown = 1\n  var laserPointAreaBounds = []\n  var laserPointZBound = []\n  var laserPointAreaWidth = 0\n  var laserPointAreaHeight = 0\n  var gridCellSize = 0\n\n  if (laserPoints != null) {\n    laserPointAreaBounds = [\n      min_subdim(laserPoints, 0),\n      min_subdim(laserPoints, 1),\n      max_subdim(laserPoints, 0),\n      max_subdim(laserPoints, 1),\n    ]\n    laserPointZBound = [min_subdim(laserPoints, 2), max_subdim(laserPoints, 2)]\n\n    console.log(laserPointAreaBounds)\n    laserPointAreaWidth = laserPointAreaBounds[2] - laserPointAreaBounds[0]\n    laserPointAreaHeight = laserPointAreaBounds[3] - laserPointAreaBounds[1]\n    gridCellSize = Math.sqrt(\n      (10 * laserPointAreaHeight * laserPointAreaWidth) / numLaserPoints\n    )\n\n    console.log(\"GRID CELL SIZE:\", gridCellSize)\n    textureWidth = Math.ceil(laserPointAreaWidth / gridCellSize)\n    textureHeight = Math.ceil(laserPointAreaHeight / gridCellSize)\n\n    let nPointsGrid = new Int32Array(textureWidth * textureHeight)\n    for (let i = 0; i < laserPoints.length; i++) {\n      let point = laserPoints[i]\n      let x = Math.floor((point[0] - laserPointAreaBounds[0]) / gridCellSize)\n      let y = Math.floor((point[1] - laserPointAreaBounds[1]) / gridCellSize)\n      let index = (y * textureWidth + x) * 4\n      nPointsGrid[index] += 1\n    }\n    const maxNPoints = Math.max(...nPointsGrid)\n    console.log(`Maximal depth of texture: ${maxNPoints}`)\n    textureDepth = maxNPoints\n\n    texturePointsGrid = new Float32Array(\n      textureWidth * textureHeight * maxNPoints * 4\n    )\n    for (var i = 0; i < texturePointsGrid.length; i++) {\n      texturePointsGrid[i] = -100.0\n    }\n\n    scaleDown =\n      1.2 *\n      Math.max(\n        laserPointZBound[1] - laserPointZBound[0],\n        laserPointAreaHeight,\n        laserPointAreaWidth\n      )\n\n    for (var i = 0; i < laserPoints.length; i++) {\n      let point = laserPoints[i]\n      let x = Math.floor((point[0] - laserPointAreaBounds[0]) / gridCellSize)\n      let y = Math.floor((point[1] - laserPointAreaBounds[1]) / gridCellSize)\n      for (var j = 0; j < textureDepth; j++) {\n        let index =\n          (y * textureWidth + x + j * textureHeight * textureWidth) * 4\n        if (texturePointsGrid[index + 2] < 0) {\n          texturePointsGrid[index + 0] =\n            (point[0] - laserPointAreaBounds[0]) / scaleDown\n          texturePointsGrid[index + 1] =\n            (point[1] - laserPointAreaBounds[1]) / scaleDown\n          texturePointsGrid[index + 2] = (point[2] - 0) / scaleDown\n          texturePointsGrid[index + 3] = 1\n          break\n        }\n      }\n    }\n  }\n\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\n  const fragmentShader = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  )\n\n  const program = createProgram(gl, vertexShader, fragmentShader, [\"outColor\"])\n  if (program === \"abortSimulation\") {\n    return null\n  }\n\n  const colorBuffer = makeBuffer(gl, N_POINTS * 16)\n  const tf = makeTransformFeedback(gl, colorBuffer)\n  // gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n  // gl.pixelStorei(gl.PACK_ALIGNMENT, 1);\n\n  var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE)\n\n  var textureWidthTris = Math.min(\n    3 * N_TRIANGLES,\n    Math.floor(maxTextureSize / 9) * 9\n  )\n  var textureHeightTris = Math.ceil((3 * N_TRIANGLES) / textureWidthTris)\n\n  gl.useProgram(program)\n\n  var alignedTrianglesArray\n  if (textureHeightTris == 1) {\n    alignedTrianglesArray = trianglesArray\n  } else {\n    alignedTrianglesArray = new Float32Array(\n      textureWidthTris * textureHeightTris * 3\n    )\n\n    for (var i = 0; i < N_TRIANGLES; i++) {\n      var x = (3 * i) % textureWidthTris\n      var y = Math.floor((3 * i) / textureWidthTris)\n      var index = y * textureWidthTris + x\n      for (var j = 0; j < 3; j++) {\n        alignedTrianglesArray[index + j] = trianglesArray[3 * i + j]\n      }\n    }\n  }\n\n  let textureTri = gl.createTexture()\n  gl.activeTexture(gl.TEXTURE0)\n  gl.bindTexture(gl.TEXTURE_2D, textureTri)\n\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB32F,\n    textureWidthTris,\n    textureHeightTris,\n    0,\n    gl.RGB,\n    gl.FLOAT,\n    alignedTrianglesArray\n  )\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.bindTexture(gl.TEXTURE_2D, null)\n\n  var texture = gl.createTexture()\n  gl.activeTexture(gl.TEXTURE1)\n  gl.bindTexture(gl.TEXTURE_3D, texture)\n  // Upload the buffer to the GPU and configure the 3D texture\n  gl.texImage3D(\n    gl.TEXTURE_3D, // target\n    0, // level\n    gl.RGBA32F, // internalFormat\n    textureWidth, // width\n    textureHeight, // height\n    textureDepth, // depth\n    0, // border\n    gl.RGBA, // format\n    gl.FLOAT, // type\n    texturePointsGrid // pixel data\n  )\n\n  // Set up texture parameters for the 3D texture\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, gl.CLAMP_TO_EDGE)\n\n  var u_trianglesLocation = gl.getUniformLocation(program, \"u_triangles\")\n  gl.activeTexture(gl.TEXTURE0)\n  gl.bindTexture(gl.TEXTURE_2D, textureTri)\n  gl.uniform1i(u_trianglesLocation, 0)\n\n  var u_pointcloudShading = gl.getUniformLocation(program, \"pointcloudShading\")\n  gl.uniform1i(u_pointcloudShading, laserPoints != null ? 1 : 0)\n\n  var u_textureWidth = gl.getUniformLocation(program, \"textureWidth\")\n  gl.uniform1i(u_textureWidth, textureWidth)\n  var u_textureHeight = gl.getUniformLocation(program, \"textureHeight\")\n  gl.uniform1i(u_textureHeight, textureHeight)\n  var u_textureDepth = gl.getUniformLocation(program, \"textureDepth\")\n  gl.uniform1i(u_textureDepth, textureDepth)\n  var u_POINT_RADIUS = gl.getUniformLocation(program, \"u_POINT_RADIUS\")\n  gl.uniform1f(u_POINT_RADIUS, laserPointsRadius)\n  var u_MIN_DISTANCE = gl.getUniformLocation(program, \"u_MIN_DISTANCE\")\n  gl.uniform1f(u_MIN_DISTANCE, laserPointsMinDistance)\n  var u_scaleDown = gl.getUniformLocation(program, \"scaleDown\")\n  gl.uniform1f(u_scaleDown, scaleDown)\n  var u_MAX_STEPS = gl.getUniformLocation(program, \"MAX_STEPS\")\n  gl.uniform1i(u_MAX_STEPS, 10000)\n  var u_gridCellSizes = gl.getUniformLocation(program, \"gridCellSizes\")\n  gl.uniform3f(u_gridCellSizes, gridCellSize, gridCellSize, 10)\n\n  var u_originOffset = gl.getUniformLocation(program, \"origin_offset\")\n  gl.uniform3f(\n    u_originOffset,\n    laserPointAreaBounds[0],\n    laserPointAreaBounds[1],\n    0\n  )\n\n  var u_gridLocation = gl.getUniformLocation(program, \"u_grid\")\n  gl.activeTexture(gl.TEXTURE1)\n  gl.bindTexture(gl.TEXTURE_3D, texture)\n  gl.uniform1i(u_gridLocation, 1)\n\n  var u_textureWidthTris = gl.getUniformLocation(program, \"textureWidthTris\")\n  gl.uniform1i(u_textureWidthTris, textureWidthTris)\n\n  const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\")\n  const normalAttributeLocation = gl.getAttribLocation(program, \"a_normal\")\n\n  const vao = gl.createVertexArray()\n  gl.bindVertexArray(vao)\n\n  const positionBuffer = makeBufferAndSetAttribute(\n    gl,\n    pointsArray,\n    positionAttributeLocation\n  )\n  const normalBuffer = makeBufferAndSetAttribute(\n    gl,\n    normals,\n    normalAttributeLocation\n  )\n\n  var colorCodedArray = null\n  var isShadowedArray = null\n  for (var i = 0; i < num_dates; i++) {\n    let sunDirectionUniformLocation = gl.getUniformLocation(\n      program,\n      \"u_sun_direction\"\n    )\n\n    let sunDirection = retrieveRandomSunDirections(1, loc.lat, loc.lon)\n    // let sunDirection = new Vector3(0.65, -0.65, 0.1);\n    gl.uniform3fv(sunDirectionUniformLocation, sunDirection)\n\n    drawArraysWithTransformFeedback(gl, tf, gl.POINTS, N_POINTS)\n\n    if (isShadowedArray == null) {\n      colorCodedArray = getResults(gl, colorBuffer, \"shading\", N_POINTS)\n      isShadowedArray = colorCodedArray.filter(\n        (_, index) => (index + 1) % 4 === 0\n      )\n    } else {\n      colorCodedArray = getResults(gl, colorBuffer, \"shading\", N_POINTS)\n      addToArray(\n        isShadowedArray,\n        colorCodedArray.filter((_, index) => (index + 1) % 4 === 0)\n      )\n    }\n  }\n\n  gl.deleteTexture(texture)\n  gl.deleteShader(vertexShader)\n  gl.deleteShader(fragmentShader)\n  gl.deleteProgram(program)\n  gl.deleteBuffer(positionBuffer)\n  gl.deleteBuffer(normalBuffer)\n  gl.deleteTransformFeedback(tf)\n  gl.deleteBuffer(colorBuffer)\n\n  return isShadowedArray\n}\n\nfunction getResults(gl, buffer, label, N_POINTS) {\n  let results = new Float32Array(N_POINTS * 4)\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n  gl.getBufferSubData(\n    gl.ARRAY_BUFFER,\n    0, // byte offset into GPU buffer,\n    results\n  )\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, null) // productBuffer was still bound to ARRAY_BUFFER so unbind it\n  return results\n}\n\nfunction createShader(gl, type, source) {\n  const shader = gl.createShader(type)\n  gl.shaderSource(shader, source)\n  gl.compileShader(shader)\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n  if (success) {\n    return shader\n  }\n  console.error(gl.getShaderInfoLog(shader))\n  gl.deleteShader(shader)\n}\n\nfunction createProgram(\n  gl,\n  vertexShader,\n  fragmentShader,\n  variables_of_interest\n) {\n  const program = gl.createProgram()\n\n  if (vertexShader === undefined || fragmentShader === undefined) {\n    window.setShowTooManyUniformsError(true)\n    return \"abortSimulation\"\n  } else {\n    gl.attachShader(program, vertexShader)\n    gl.attachShader(program, fragmentShader)\n    gl.transformFeedbackVaryings(\n      program,\n      variables_of_interest,\n      gl.SEPARATE_ATTRIBS\n    )\n    gl.linkProgram(program)\n    const success = gl.getProgramParameter(program, gl.LINK_STATUS)\n    if (success) {\n      return program\n    }\n    console.error(gl.getProgramInfoLog(program))\n    gl.deleteProgram(program)\n  }\n}\n\nfunction makeBuffer(gl, sizeOrData) {\n  const buf = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, buf)\n  gl.bufferData(gl.ARRAY_BUFFER, sizeOrData, gl.DYNAMIC_DRAW)\n  return buf\n}\n\nfunction makeTransformFeedback(gl, buffer) {\n  const tf = gl.createTransformFeedback()\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf)\n  gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer)\n  return tf\n}\n\nfunction makeBufferAndSetAttribute(gl, data, loc) {\n  const buf = makeBuffer(gl, data)\n  // setup our attributes to tell WebGL how to pull\n  // the data from the buffer above to the attribute\n  gl.enableVertexAttribArray(loc)\n  gl.vertexAttribPointer(\n    loc,\n    3, // size (num components)\n    gl.FLOAT, // type of data in buffer\n    false, // normalize\n    0, // stride (0 = auto)\n    0 // offset\n  )\n}\n\nfunction drawArraysWithTransformFeedback(gl, tf, primitiveType, count) {\n  // turn of using the fragment shader\n  gl.enable(gl.RASTERIZER_DISCARD)\n\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf)\n  gl.beginTransformFeedback(gl.POINTS)\n  gl.drawArrays(primitiveType, 0, count)\n  gl.endTransformFeedback()\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null)\n\n  // unbind the buffer from the TRANFORM_FEEDBACK_BUFFER\n  gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null)\n\n  // turn on using fragment shaders again\n  gl.disable(gl.RASTERIZER_DISCARD)\n}\n","import * as THREE from \"three\"\n\nimport { vec3 } from \"gl-matrix\"\nimport { adaptiveSubdivideMesh } from \"./stl_to_array.js\"\nimport { STLViewer, camera, controls, renderer, scene } from \"./stlviewer.js\"\n// import init, { Session, Input} from \"@webonnx/wonnx-wasm\";\n// import { cumulativeIntensityMesh } from './glmatrix_raytracing/glmatrix_raytracing.js';\nimport SunCalc from \"suncalc\"\nimport { loc_utm } from \"./download.js\"\nimport { intensity_colormap } from \"./utils.js\"\nimport { rayTracingWebGL } from \"./webgl_raytracing.js\"\nimport { rayTracingPointsWebGL } from \"./webgl_raytracing_points.js\"\n//import { triangleIntersectText, Calculate_Shading_at_Point_text } from \"./webgl_raytracing.js\";\nimport DatesSlider from \"../components/PVSimulation/DatesSlider.js\"\n\n// import '@tensorflow/tfjs-backend-webgpu';\n// Set the backend to WebGPU and wait for the module to be ready.\n\n// import { STLViewer } from \"./stlviewer_2/stlviewer.js\";\n\nlet raytracingGeometry\nlet innerGeometry\nlet outerGeometry\nvar intensities = null\n\nexport function getViewer() {\n  return [scene, renderer, camera, controls]\n}\n\nexport function retrieveRandomSunDirections(Ndates, lat, lon) {\n  const directions = new Float32Array(Ndates * 3)\n  var i = 0\n  while (i < Ndates) {\n    const date = new Date(\n      2023,\n      Math.floor(12 * Math.random()),\n      1 + Math.floor(28 * Math.random()),\n      Math.floor(24 * Math.random()),\n      Math.floor(60 * Math.random()),\n      0,\n      0\n    )\n\n    const pos = SunCalc.getPosition(date, lat, lon)\n    if (pos.altitude < 0.1 || pos.altitude == Number.NaN) {\n      continue\n    }\n    directions[3 * i] = -Math.cos(pos.altitude) * Math.sin(pos.azimuth)\n    directions[3 * i + 1] = -Math.cos(pos.altitude) * Math.cos(pos.azimuth)\n    directions[3 * i + 2] = Math.sin(pos.altitude)\n    i += 1\n  }\n  return directions\n}\n\nexport async function calc_webgl(loc, laserPoints, resetCamera) {\n  const mesh_vectors = raytracingGeometry.attributes.position.array\n  const points = innerGeometry.attributes.position.array\n  const normals = innerGeometry.attributes.normal.array\n\n  const status_elem = document.getElementById(\"status\")\n  status_elem.textContent = \"Simulating\"\n  status_elem.hasChanged = true\n\n  let uniquePoints = []\n  let uniqueNormals = []\n\n  // Create an object to hold point/normal pairs, where the key is a string representation of the point\n  const uniquePairs = {}\n\n  for (let i = 0; i < points.length; i += 3) {\n    const point = [points[i], points[i + 1], points[i + 2]].map((value) =>\n      parseFloat(value.toFixed(6))\n    ) // limit precision\n    const pointKey = JSON.stringify(point)\n\n    if (!uniquePairs.hasOwnProperty(pointKey)) {\n      uniquePairs[pointKey] = i / 3\n      uniquePoints.push(points[i], points[i + 1], points[i + 2])\n      uniqueNormals.push(normals[i], normals[i + 1], normals[i + 2])\n    }\n  }\n\n  const uniquePointsArray = new Float32Array(uniquePoints.slice())\n  const uniqueNormalsArray = new Float32Array(uniqueNormals.slice())\n\n  const laserPointsRadius = 0.5\n  const laserPointsMinDistance = 1.0\n\n  // Compute unique intensities\n  const uniqueIntensities = await rayTracingPointsWebGL(\n    uniquePointsArray,\n    mesh_vectors,\n    uniqueNormalsArray,\n    laserPoints,\n    laserPointsRadius,\n    laserPointsMinDistance,\n    window.numSimulations,\n    loc\n  )\n  if (uniqueIntensities === null) {\n    window.setLoading(false)\n    return null\n  }\n  // Store unique intensities in uniquePairs\n  for (let i = 0; i < uniqueIntensities.length; i++) {\n    const point = [\n      uniquePoints[i * 3],\n      uniquePoints[i * 3 + 1],\n      uniquePoints[i * 3 + 2],\n    ].map((value) => parseFloat(value.toFixed(6))) // limit precision\n    const pointKey = JSON.stringify(point)\n\n    if (uniquePairs.hasOwnProperty(pointKey)) {\n      uniquePairs[pointKey] = uniqueIntensities[i]\n    } else {\n      console.error(`Couldn't find indices for pointKey ${pointKey}`)\n    }\n  }\n\n  // Generate final intensities array\n  let intensities_array = new Array(points.length / 3).fill(0)\n\n  for (let i = 0; i < points.length; i += 3) {\n    const point = [points[i], points[i + 1], points[i + 2]].map((value) =>\n      parseFloat(value.toFixed(6))\n    ) // limit precision\n    const pointKey = JSON.stringify(point)\n\n    if (uniquePairs.hasOwnProperty(pointKey)) {\n      intensities_array[i / 3] = uniquePairs[pointKey]\n    }\n  }\n\n  const intensities = new Float32Array(intensities_array)\n\n  status_elem.textContent = \"Simulation Done\"\n  status_elem.hasChanged = true\n  window.setLoading(false)\n  showMeshIntensities(intensities, laserPoints, resetCamera)\n}\n\nfunction refine_triangles(triangle_array, threshold) {\n  const triangles = [\n    [\n      vec3.fromValues(...triangle_array.slice(0, 3)),\n      vec3.fromValues(...triangle_array.slice(3, 6)),\n      vec3.fromValues(...triangle_array.slice(6, 9)),\n    ],\n  ]\n\n  const subdividedTriangles = adaptiveSubdivideMesh(triangles, threshold)\n\n  const newpos_update = []\n  for (const triangle of subdividedTriangles) {\n    newpos_update.push(...triangle)\n  }\n  return newpos_update\n}\n\nfunction centerMesh(geometry, xytranslate, minZ) {\n  // centralize mesh to main point\n  var newMinZ\n\n  if (minZ == null) {\n    newMinZ = Number.POSITIVE_INFINITY\n\n    // Iterate over vertices and find the minimum z value\n    for (var i = 0; i < geometry.attributes.position.array.length; i++) {\n      const zcoord = geometry.attributes.position.getZ(i)\n      if (zcoord < newMinZ) {\n        newMinZ = zcoord\n      }\n    }\n  } else {\n    newMinZ = minZ\n  }\n\n  var posarray = geometry.attributes.position.array\n  for (var i = 0; i < posarray.length; i += 9) {\n    for (var j = 0; j < 9; j += 3) {\n      posarray[i + j] = posarray[i + j] - xytranslate[0]\n      posarray[i + j + 1] = posarray[i + j + 1] - xytranslate[1]\n      posarray[i + j + 2] = posarray[i + j + 2] - newMinZ\n    }\n  }\n  return newMinZ\n}\n\nfunction cutoffMesh(geometry, cutoff) {\n  var posarray = geometry.attributes.position.array.slice()\n  var newposarray = []\n  var newnormals = []\n  for (var i = 0; i < posarray.length; i += 9) {\n    var keep = true\n    for (var j = 0; j < 9; j += 3) {\n      if (\n        posarray[i + j] < -cutoff ||\n        posarray[i + j] > cutoff ||\n        posarray[i + j + 1] < -cutoff ||\n        posarray[i + j + 1] > cutoff\n      ) {\n        keep = false\n      }\n    }\n\n    if (keep) {\n      const v0 = vec3.fromValues(...posarray.slice(i, i + 3))\n      const v1 = vec3.fromValues(...posarray.slice(i + 3, i + 6))\n      const v2 = vec3.fromValues(...posarray.slice(i + 6, i + 9))\n      let d1 = vec3.create()\n      vec3.sub(d1, v1, v0)\n      let d2 = vec3.create()\n      vec3.sub(d2, v2, v0)\n      let ar = vec3.create()\n      vec3.cross(ar, d1, d2)\n      var normal = vec3.create()\n      vec3.scale(normal, ar, 1 / vec3.len(ar))\n\n      //remove triangles with low area for shading\n      if (vec3.len(ar) < 0.05) {\n        continue\n      }\n\n      for (var j = 0; j < 9; j++) {\n        newposarray.push(posarray[i + j])\n        newnormals.push(normal[j % 3])\n      }\n    }\n  }\n\n  let new_geometry = new THREE.BufferGeometry()\n  new_geometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array(newposarray), 3)\n  )\n  new_geometry.setAttribute(\n    \"normal\",\n    new THREE.BufferAttribute(new Float32Array(newnormals), 3)\n  )\n  new_geometry.attributes.position.needsUpdate = true\n  new_geometry.attributes.normal.needsUpdate = true\n  return new_geometry\n}\n\nfunction splitCutoffRefineMesh(\n  geometry,\n  refinementCutoff,\n  outerCutoff,\n  adaptiveSubdivideThreshold = Number.POSITIVE_INFINITY\n) {\n  let geometriesCut = cutoffMesh(geometry, outerCutoff)\n  var posarray = geometriesCut.attributes.position.array.slice()\n\n  var innerPosarray = []\n  var innerNormals = []\n\n  var outerPosarray = []\n  var outerNormals = []\n\n  for (var i = 0; i < posarray.length; i += 9) {\n    var isInnerGeometry = true\n    for (var j = 0; j < 9; j += 3) {\n      if (\n        posarray[i + j] < -refinementCutoff ||\n        posarray[i + j] > refinementCutoff ||\n        posarray[i + j + 1] < -refinementCutoff ||\n        posarray[i + j + 1] > refinementCutoff\n      ) {\n        isInnerGeometry = false\n        // break;\n      }\n    }\n\n    const v0 = vec3.fromValues(...posarray.slice(i, i + 3))\n    const v1 = vec3.fromValues(...posarray.slice(i + 3, i + 6))\n    const v2 = vec3.fromValues(...posarray.slice(i + 6, i + 9))\n    let d1 = vec3.create()\n    vec3.sub(d1, v1, v0)\n    let d2 = vec3.create()\n    vec3.sub(d2, v2, v0)\n    let ar = vec3.create()\n    vec3.cross(ar, d1, d2)\n    var normal = vec3.create()\n    vec3.scale(normal, ar, 1 / vec3.len(ar))\n\n    if (vec3.len(ar) < 0.05) {\n      continue\n    }\n    if (isInnerGeometry) {\n      var triangle_points = refine_triangles(\n        posarray.slice(i, i + 9),\n        adaptiveSubdivideThreshold\n      )\n\n      for (const triangle of triangle_points) {\n        innerPosarray.push(triangle[0])\n        innerPosarray.push(triangle[1])\n        innerPosarray.push(triangle[2])\n        innerNormals.push(normal[0])\n        innerNormals.push(normal[1])\n        innerNormals.push(normal[2])\n      }\n    } else {\n      for (var j = 0; j < 9; j++) {\n        outerPosarray.push(posarray[i + j])\n        outerNormals.push(normal[j % 3])\n      }\n    }\n  }\n\n  let innerGeometry = new THREE.BufferGeometry()\n  innerGeometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array(innerPosarray), 3)\n  )\n  innerGeometry.setAttribute(\n    \"normal\",\n    new THREE.BufferAttribute(new Float32Array(innerNormals), 3)\n  )\n  innerGeometry.attributes.position.needsUpdate = true\n  innerGeometry.attributes.normal.needsUpdate = true\n\n  let outerGeometry = new THREE.BufferGeometry()\n  outerGeometry.setAttribute(\n    \"position\",\n    new THREE.BufferAttribute(new Float32Array(outerPosarray), 3)\n  )\n  outerGeometry.setAttribute(\n    \"normal\",\n    new THREE.BufferAttribute(new Float32Array(outerNormals), 3)\n  )\n  outerGeometry.attributes.position.needsUpdate = true\n  outerGeometry.attributes.normal.needsUpdate = true\n\n  return { innerGeometry: innerGeometry, outerGeometry: outerGeometry }\n}\n\nexport function createMeshes(\n  big_geometry,\n  offset,\n  minZ = null,\n  cutoffRaytracing = window.numRadiusSimulation + 20,\n  outerCutoff = window.numRadiusSimulation + 70,\n  refinementCutoff = window.numRadiusSimulation,\n  mesh_refinement_scale = 2\n) {\n  intensities = null\n  //center the big mesh around the building coordinates from OSM\n  const newMinZ = centerMesh(\n    big_geometry,\n    [loc_utm[0] - offset[0], loc_utm[1] - offset[1]],\n    minZ\n  )\n\n  raytracingGeometry = cutoffMesh(big_geometry, cutoffRaytracing)\n\n  let geometryDict = splitCutoffRefineMesh(\n    big_geometry,\n    refinementCutoff,\n    outerCutoff,\n    mesh_refinement_scale\n  )\n  innerGeometry = geometryDict.innerGeometry\n  outerGeometry = geometryDict.outerGeometry\n\n  if (innerGeometry.attributes.position.array.length === 0) {\n    window.setLoading(false)\n    window.setShowErrorMessage(true)\n    window.setShowThreeViewer(false)\n  }\n  return newMinZ\n}\n\nexport function showMeshOrig() {\n  var elem = document.getElementsByClassName(\"stlviewer\")[0]\n  const newelem = document.createElement(\"div\")\n  newelem.setAttribute(\"class\", \"stlviewer\")\n  elem.replaceWith(newelem)\n  newelem.id = \"webgl-container\"\n  STLViewer(newelem)\n\n  const Npoints = innerGeometry.attributes.position.array.length / 3\n  var newColors = new Float32Array(3 * Npoints)\n  for (var i = 0; i < Npoints; i++) {\n    newColors[3 * i] = 0.6 + 0.4 * Math.random()\n    newColors[3 * i + 1] = 0.4 + 0.3 * Math.random()\n    newColors[3 * i + 2] = 0.3 * Math.random()\n  }\n\n  innerGeometry.setAttribute(\"color\", new THREE.BufferAttribute(newColors, 3))\n  var material = new THREE.MeshStandardMaterial({ vertexColors: true })\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\n  var mesh = new THREE.Mesh(innerGeometry, material)\n  scene.add(mesh)\n\n  // Compute the middle\n  var middle = new THREE.Vector3()\n  innerGeometry.computeBoundingBox()\n  innerGeometry.boundingBox.getCenter(middle)\n\n  // Center it\n  //mesh.position.x = -1 * middle.x;\n  //mesh.position.y = -1 * middle.y;\n  //mesh.position.z = -1 * middle.z+3;\n\n  // Pull the camera away as needed\n  var largestDimension = Math.max(\n    innerGeometry.boundingBox.max.x,\n    innerGeometry.boundingBox.max.y,\n    innerGeometry.boundingBox.max.z\n  )\n  camera.position.set(0, -20, 100)\n  camera.position.z = 40\n\n  var animate = function () {\n    requestAnimationFrame(animate)\n    controls.update()\n    renderer.render(scene, camera)\n  }\n  animate()\n}\n\nexport async function replot() {\n  showMeshIntensities()\n}\n\nexport async function showMeshIntensities(\n  intensities,\n  laserPoints,\n  resetCamera\n) {\n  var oldCameraPosition\n  if (resetCamera || camera == null) {\n    oldCameraPosition = { x: 0, y: 0, z: 0 }\n  } else {\n    oldCameraPosition = {\n      x: camera.position.x,\n      y: camera.position.y,\n      z: camera.position.z,\n    }\n  }\n\n  STLViewer(resetCamera)\n\n  const Npoints = innerGeometry.attributes.position.array.length / 3\n  var newColors = new Float32Array(Npoints * 3)\n  //var intMax = get99thPercentile(intensities);\n  for (var i = 0; i < Npoints; i++) {\n    const col = intensity_colormap(\n      Math.min(1, intensities[i] / window.numSimulations / 0.6)\n    )\n    //The 0.6 comes from looking at a rooftop facing south with good angle.\n    newColors[3 * i] = col[0]\n    newColors[3 * i + 1] = col[1]\n    newColors[3 * i + 2] = col[2]\n  }\n\n  innerGeometry.setAttribute(\n    \"color\",\n    new THREE.Float32BufferAttribute(newColors, 3)\n  )\n  var material = new THREE.MeshStandardMaterial({\n    vertexColors: true,\n    side: THREE.DoubleSide,\n    shininess: 0,\n    roughness: 1,\n  })\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\n  var mesh = new THREE.Mesh(innerGeometry, material)\n\n  scene.add(mesh)\n\n  var outerGeometryMaterial = new THREE.MeshStandardMaterial({\n    vertexColors: false,\n    side: THREE.DoubleSide,\n    color: 0xd1bea4,\n    shininess: 0,\n    roughness: 1,\n  })\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\n  var outerMesh = new THREE.Mesh(outerGeometry, outerGeometryMaterial)\n\n  scene.add(outerMesh)\n\n  // Create and add a sphere for each point\n  if (laserPoints != null) {\n    // Create a geometry for the spheres\n    const sphereGeometry = new THREE.SphereGeometry(0.1) // Adjust the radius as needed\n\n    // Create a material for the spheres\n    const sphereMaterial = new THREE.MeshBasicMaterial({ color: 0x992222 }) // Adjust the color as needed\n\n    for (var i = 0; i < laserPoints.length; i++) {\n      if ((i % 100) / 100 < window.pointsVisualizationRatio) {\n        let point = laserPoints[i]\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)\n        sphere.position.set(point[0], point[1], point[2])\n        scene.add(sphere)\n      }\n    }\n  }\n  // Compute the middle\n  var middle = new THREE.Vector3()\n  innerGeometry.computeBoundingBox()\n  innerGeometry.boundingBox.getCenter(middle)\n\n  // Pull the camera away as needed\n  // var largestDimension = Math.max(\n  //   innerGeometry.boundingBox.max.x,\n  //   innerGeometry.boundingBox.max.y,\n  //   innerGeometry.boundingBox.max.z\n  // );\n\n  if (resetCamera) {\n    camera.position.set(0, -40, 80)\n  } else {\n    console.log(\"Camera Rot\", window.offsetPos[0], window.offsetPos[1])\n\n    camera.position.set(\n      oldCameraPosition.x - window.offsetPos[0],\n      oldCameraPosition.y - window.offsetPos[1],\n      oldCameraPosition.z\n    )\n    window.offsetPos[0] = 0\n    window.offsetPos[1] = 0\n    // console.log(\"New Camera Pos\", camera.position);\n  }\n\n  var animate = function () {\n    requestAnimationFrame(animate)\n    controls.update()\n    renderer.render(scene, camera)\n  }\n  window.setShowViridisLegend(true)\n  animate()\n}\n","import JSZip from \"jszip\"\nimport proj4 from \"proj4\"\nimport * as BufferGeometryUtils from \"three/addons/utils/BufferGeometryUtils.js\"\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader.js\"\nimport { calc_webgl, createMeshes } from \"./pv_simulation\"\nexport var loc_utm\n\nimport { loadLAZ } from \"./lazimport\"\n\n// var state = \"WaitForAddr\"; // States are \"WaitForAddr\", \"AddrDataLoaded\", \"Inspect\"\n\nasync function getLocationFromInput(locationText) {\n  let loc\n  const coordinatePattern = /^[-]?(\\d+(\\.\\d+)?),\\s*[-]?(\\d+(\\.\\d+)?)$/\n\n  // Check if the string matches the coordinate pattern\n  if (coordinatePattern.test(locationText)) {\n    const [latitude, longitude] = locationText\n      .split(\",\")\n      .map((value) => parseFloat(value.trim()))\n\n    // Create the \"loc\" object with latitude and longitude attributes\n    loc = {\n      lat: latitude,\n      lon: longitude,\n    }\n    return loc\n  } else {\n    let url = \"https://nominatim.openstreetmap.org/search?format=json&q=\"\n      .concat(locationText)\n      .concat(\"+Germany+Bavaria\")\n    let response = await fetchLocation(url)\n    if (!response) {\n      let locationTextModified = locationText.split(\" \").join(\"+\")\n      url = \"https://nominatim.openstreetmap.org/search?format=json&q=\".concat(\n        locationTextModified\n      )\n      response = await fetchLocation(url)\n    }\n    return response\n  }\n}\n\nasync function fetchLocation(url) {\n  let loc\n  const statuselem = document.getElementById(\"status\")\n  try {\n    let response = await fetch(url)\n    if (!response.ok) {\n      console.error(\"Check connection to Nominatim geocoder\")\n      statuselem.textContent = \"Connection to Adress Server failed\"\n      throw new Error(\"Request failed with status \" + response.status)\n    }\n\n    let responseData = await response.json()\n    if (responseData.length === 0) {\n      return null\n    }\n\n    loc = responseData[0]\n    return loc\n  } catch (error) {\n    console.error(\"Error:\", error)\n    return null\n  }\n}\n\nexport async function setLocation(inputValue, inputChanged, loc) {\n  let newloc\n  window.mapLocationBaseChanged = true\n  if (inputChanged) {\n    newloc = await getLocationFromInput(inputValue)\n    window.mapLocation = newloc\n  } else {\n    newloc = loc\n  }\n  // console.log(newloc);\n  if (typeof newloc !== \"undefined\" && newloc != null) {\n    retrieveData(newloc, inputChanged)\n  } else {\n    window.setLoading(false)\n    window.setShowThreeViewer(false)\n    window.setShowErrorMessage(true)\n  }\n\n  if (inputChanged) {\n    window.mapLocationChanged = false\n  }\n}\n\nfunction get_utm32(x, y) {\n  const IN_PROJ = \"EPSG:4326\"\n  const OUT_PROJ = \"EPSG:25832\"\n\n  proj4.defs(\"EPSG:25832\", \"+proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs\")\n\n  const transformer = proj4(IN_PROJ, OUT_PROJ)\n\n  const [x_utm32, y_utm32] = transformer.forward([x, y])\n  loc_utm = [x_utm32, y_utm32]\n  return loc_utm\n}\n\nfunction get_file_names(x, y) {\n  const DIVISOR = 2000\n  const BUFFER_ZONE = 100\n  const loc_utm = get_utm32(x, y)\n  const x_utm32 = loc_utm[0]\n  const y_utm32 = loc_utm[1]\n\n  const x_rounded = Math.floor(x_utm32 / DIVISOR) * 2\n  const y_rounded = Math.floor(y_utm32 / DIVISOR) * 2\n\n  const load_tile_left = x_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_right = x_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n  const load_tile_lower = y_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_upper = y_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n\n  const file_list = [`${x_rounded}_${y_rounded}.zip`]\n\n  if (load_tile_left) {\n    file_list.push(`${x_rounded - 2}_${y_rounded}.zip`)\n  }\n  if (load_tile_right) {\n    file_list.push(`${x_rounded + 2}_${y_rounded}.zip`)\n  }\n  if (load_tile_lower) {\n    file_list.push(`${x_rounded}_${y_rounded - 2}.zip`)\n  }\n  if (load_tile_upper) {\n    file_list.push(`${x_rounded}_${y_rounded + 2}.zip`)\n  }\n  if (load_tile_left && load_tile_lower) {\n    file_list.push(`${x_rounded - 2}_${y_rounded - 2}.zip`)\n  }\n  if (load_tile_left && load_tile_upper) {\n    file_list.push(`${x_rounded - 2}_${y_rounded + 2}.zip`)\n  }\n  if (load_tile_right && load_tile_lower) {\n    file_list.push(`${x_rounded + 2}_${y_rounded - 2}.zip`)\n  }\n  if (load_tile_right && load_tile_upper) {\n    file_list.push(`${x_rounded + 2}_${y_rounded + 2}.zip`)\n  }\n  return file_list\n}\n\nfunction get_file_names_laz(x, y) {\n  const DIVISOR = 1000\n  const BUFFER_ZONE = 100\n  const loc_utm = get_utm32(x, y)\n  const x_utm32 = loc_utm[0]\n  const y_utm32 = loc_utm[1]\n\n  const x_rounded = Math.floor(x_utm32 / DIVISOR)\n  const y_rounded = Math.floor(y_utm32 / DIVISOR)\n\n  const load_tile_left = x_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_right = x_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n  const load_tile_lower = y_utm32 % DIVISOR < BUFFER_ZONE\n  const load_tile_upper = y_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE\n\n  const file_list = [`${x_rounded}_${y_rounded}.laz`]\n\n  if (load_tile_left) {\n    file_list.push(`${x_rounded - 2}_${y_rounded}.laz`)\n  }\n  if (load_tile_right) {\n    file_list.push(`${x_rounded + 2}_${y_rounded}.laz`)\n  }\n  if (load_tile_lower) {\n    file_list.push(`${x_rounded}_${y_rounded - 2}.laz`)\n  }\n  if (load_tile_upper) {\n    file_list.push(`${x_rounded}_${y_rounded + 2}.laz`)\n  }\n  if (load_tile_left && load_tile_lower) {\n    file_list.push(`${x_rounded - 2}_${y_rounded - 2}.laz`)\n  }\n  if (load_tile_left && load_tile_upper) {\n    file_list.push(`${x_rounded - 2}_${y_rounded + 2}.laz`)\n  }\n  if (load_tile_right && load_tile_lower) {\n    file_list.push(`${x_rounded + 2}_${y_rounded - 2}.laz`)\n  }\n  if (load_tile_right && load_tile_upper) {\n    file_list.push(`${x_rounded + 2}_${y_rounded + 2}.laz`)\n  }\n  return file_list\n}\n\nfunction getCommentLine(stlData) {\n  // Convert the ArrayBuffer to a Uint8Array\n  var uint8Array = new Uint8Array(stlData)\n\n  // Create an empty array to store the characters\n  var commentChars = []\n\n  // Iterate over the Uint8Array in reverse order\n  for (var i = uint8Array.length - 2; i >= 0; i--) {\n    // Check if the current character is a newline character\n    if (uint8Array[i] === 10 || uint8Array[i] === 13) {\n      // Stop iterating if a newline character is encountered\n      break\n    }\n\n    // Add the current character to the commentChars array\n    commentChars.unshift(String.fromCharCode(uint8Array[i]))\n  }\n\n  // Convert the array of characters to a string\n  var commentLine = commentChars.join(\"\")\n\n  // Remove any leading or trailing whitespace\n  commentLine = commentLine.trim()\n  return commentLine\n}\n\nfunction parseCommentLine(comment) {\n  // Regular expression pattern to match the comment line format\n  var pattern =\n    /^;\\s*offset\\s*(-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)\\s*(-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)\\s*(-?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)\\s*$/i\n\n  // Match the comment line against the pattern\n  var match = comment.match(pattern)\n\n  var offset = [0, 0, 0]\n  // Check if the comment line matches the expected format\n  if (match) {\n    // Extract the offsets from the matched groups\n    console.log(\"Matches\", match)\n    offset = [parseFloat(match[1]), parseFloat(match[2]), parseFloat(match[3])]\n\n    // Print the offsets\n    console.log(\"Offsets:\", offset[0], offset[1], offset[2])\n  } else {\n    console.log(\"Invalid comment format\")\n  }\n  return offset\n}\n\nasync function retrieveData(loc, resetCamera = false) {\n  const baseurl = \"https://www.openpv.de/data/\"\n  var filenames = get_file_names(Number(loc.lon), Number(loc.lat))\n  if (filenames.length == 0) {\n    return\n  }\n\n  const status_elem = document.getElementById(\"status\")\n\n  // Create an array to store individual geometries\n  let geometries = []\n  let stlData = null\n  var cached_file_found = false\n  var main_offset = null\n  console.log(\"Location\", loc)\n  const loc_utm32 = get_utm32(Number(loc.lon), Number(loc.lat))\n  // Iterate through all filenames\n  for (const filename of filenames) {\n    let filename_idx\n    if (window.stlFiles != null) {\n      filename_idx = window.stlFiles.indexOf(filename)\n    } else {\n      filename_idx = -1\n    }\n    if (filename_idx != -1) {\n      stlData = window.stlDataCached[filename_idx]\n      cached_file_found = true\n      console.log(\"Use cached file!!\")\n    } else {\n      let url = baseurl + filename\n      cached_file_found = false\n      status_elem.textContent = \"Loading from \" + url\n\n      try {\n        // Download the zipped STL file\n        let response\n        response = await fetch(url)\n        if (!response.ok) {\n          throw new Error(\"Request failed with status \" + response.status)\n        }\n        const zipData = await response.arrayBuffer()\n\n        // Unzip the zipped STL file\n        const zip = new JSZip()\n        await zip.loadAsync(zipData)\n\n        // Get the STL file from the unzipped contents\n        const stlFile = zip.file(Object.keys(zip.files)[0])\n        // Load the STL file\n        stlData = await stlFile.async(\"arraybuffer\")\n        if (window.stlFiles == null) {\n          window.stlFiles = []\n          window.stlDataCached = []\n        }\n        window.stlFiles.push(filename)\n        window.stlDataCached.push(stlData)\n      } catch (error) {\n        window.setLoading(false)\n        window.setShowErrorMessage(true)\n        return\n      }\n    }\n\n    if (stlData) {\n      // Parse the STL data and add the geometry to the geometries array\n      let geometry = new STLLoader().parse(stlData)\n\n      // Create and display the combined mesh\n      const comment = getCommentLine(stlData)\n      var local_offset = parseCommentLine(comment)\n\n      if (main_offset == null) {\n        main_offset = local_offset\n        local_offset = [0, 0, 0]\n      } else {\n        local_offset = [\n          local_offset[0] - main_offset[0],\n          local_offset[1] - main_offset[1],\n          local_offset[2] - main_offset[2],\n        ]\n        geometry.translate(local_offset[0], local_offset[1], local_offset[2])\n      }\n      console.log(\"OFFSETS\", main_offset, local_offset)\n      geometries.push(geometry)\n      // Merge geometries using BufferGeometryUtils\n      const combinedGeometry = BufferGeometryUtils.mergeGeometries(geometries)\n\n      const minZ = createMeshes(combinedGeometry, main_offset)\n      const offsetUTM32 = [loc_utm32[0], loc_utm32[1], minZ + main_offset[2]]\n\n      console.log(\"OffsetUTM32:\", offsetUTM32)\n      let laser_points = null\n      if (window.enableLaserPoints) {\n        laser_points = await loadLAZ(\n          50,\n          offsetUTM32,\n          get_file_names_laz(Number(loc.lon), Number(loc.lat))\n        )\n      }\n      if (laser_points != null) {\n        console.log(`Finished loading points ${laser_points.length}`)\n      }\n\n      //showMeshOrig();\n      calc_webgl(loc, laser_points, resetCamera)\n    } else {\n      console.error(\"STL file not found in ZIP archive\")\n    }\n  }\n}\n","import { createLazPerf } from \"laz-perf\"\n\nexport function parseHeader(arrayBuffer) {\n  if (arrayBuffer.byteLength < 227)\n    throw new Error(\"Invalid arrayBuffer length\")\n\n  const dataView = new DataView(arrayBuffer)\n\n  const pointDataRecordFormat = dataView.getUint8(104) & 0b1111\n  const pointDataRecordLength = dataView.getUint16(105, true)\n  const pointDataOffset = dataView.getUint32(96, true)\n  const pointCount = dataView.getUint32(107, true)\n\n  const scale = [\n    dataView.getFloat64(131, true),\n    dataView.getFloat64(139, true),\n    dataView.getFloat64(147, true),\n  ]\n  const offset = [\n    dataView.getFloat64(155, true),\n    dataView.getFloat64(163, true),\n    dataView.getFloat64(171, true),\n  ]\n  const min = [\n    dataView.getFloat64(187, true),\n    dataView.getFloat64(203, true),\n    dataView.getFloat64(219, true),\n  ]\n  const max = [\n    dataView.getFloat64(179, true),\n    dataView.getFloat64(195, true),\n    dataView.getFloat64(211, true),\n  ]\n  return {\n    pointDataRecordFormat,\n    pointDataRecordLength,\n    pointDataOffset,\n    pointCount,\n    scale,\n    offset,\n    min,\n    max,\n  }\n}\n\nexport async function loadLAZ(radius, offsetPos, filenames) {\n  console.log(\"LOADING!!!\")\n  const BUFFERED_POINTS_COUNT = 20000\n  var points = [] // new Float32Array(BUFFERED_POINTS_COUNT * 3);\n  var pointsIdx = 0\n\n  for (var filename of filenames) {\n    var filenameIdx\n    if (window.lazFiles != null) {\n      filenameIdx = window.lazFiles.indexOf(filename)\n    } else {\n      filenameIdx = -1\n    }\n    var arrayBuffer\n    if (filenameIdx != -1) {\n      arrayBuffer = window.lazCache[filenameIdx]\n    } else {\n      const response = await fetch(`https://www.openpv.de/laser/${filename}`)\n      arrayBuffer = await response.arrayBuffer()\n      if (window.lazFiles == null) {\n        window.lazFiles = []\n        window.lazCache = []\n      }\n      window.lazFiles.push(filename)\n      window.lazCache.push(arrayBuffer)\n    }\n    const fileUint8Array = new Uint8Array(arrayBuffer)\n\n    const {\n      pointDataRecordFormat,\n      pointDataRecordLength,\n      pointDataOffset,\n      pointCount,\n      scale,\n      offset,\n      min,\n      max,\n    } = parseHeader(arrayBuffer)\n\n    console.log(\"Total Point Count: \", pointCount)\n\n    // Create our Emscripten module.\n    const LazPerf = await createLazPerf()\n    const laszip = new LazPerf.LASZip()\n\n    // Allocate our memory in the Emscripten heap: a filePtr buffer for our\n    // compressed content and a single point's worth of bytes for our output.\n    const dataPtr = LazPerf._malloc(pointDataRecordLength)\n    const filePtr = LazPerf._malloc(fileUint8Array.byteLength)\n\n    // Copy our data into the Emscripten heap so we can point at it in getPoint().\n    LazPerf.HEAPU8.set(fileUint8Array, filePtr)\n\n    min[0] -= offsetPos[0]\n    max[0] -= offsetPos[0]\n    min[1] -= offsetPos[1]\n    max[1] -= offsetPos[1]\n    min[2] -= offsetPos[2]\n    max[2] -= offsetPos[2]\n\n    console.log(\"Mesh minmax\", min, max)\n    console.log(\"Offset Pos\", offsetPos)\n\n    const pointbuffer = new Uint8Array(\n      LazPerf.HEAPU8.buffer,\n      LazPerf.HEAPU8.byteOffset,\n      pointDataRecordLength\n    )\n    const dataview = new DataView(\n      pointbuffer.buffer,\n      pointbuffer.byteOffset,\n      pointDataRecordLength\n    )\n\n    try {\n      laszip.open(filePtr, fileUint8Array.byteLength)\n\n      for (let i = 0; i < pointCount; ++i) {\n        laszip.getPoint(dataPtr)\n\n        // // Create a new Uint8Array for each point\n        // const pointbuffer = new Uint8Array(\n        //   LazPerf.HEAPU8.buffer,\n        //   LazPerf.HEAPU8.byteOffset + dataPtr,\n        //   pointDataRecordLength\n        // );\n\n        // Create a new Uint8Array for each point\n        const pointbuffer = new Uint8Array(\n          LazPerf.HEAPU8.buffer,\n          LazPerf.HEAPU8.byteOffset + dataPtr,\n          pointDataRecordLength\n        )\n\n        // The dataview needs to be recreated since its properties are read-only\n        const dataview = new DataView(\n          pointbuffer.buffer,\n          pointbuffer.byteOffset,\n          pointbuffer.byteLength\n        )\n\n        // Grab the scaled/offsetPos XYZ values and reverse the scale/offsetPos to get\n        // their absolute positions.  It would be possible to add checks for\n        // attributes other than XYZ here - our pointbuffer contains an entire\n        // point whose format corresponds to the pointDataRecordFormat above.\n        const point = [\n          dataview.getInt32(0, true),\n          dataview.getInt32(4, true),\n          dataview.getInt32(8, true),\n        ].map((v, i) => v * scale[i] + offset[i] - offsetPos[i])\n\n        if (point.every((v, i) => (v > -radius && v < radius) || i == 2)) {\n          // if (pointsIdx == points.length) {\n          //   let new_points = new Float32Array(pointsIdx * 2);\n          //   new_points.set(points);\n          //   points = new_points;\n          // } else {\n          //   points.set(point, pointsIdx);\n          //   pointsIdx += 3;\n          // }\n          points.push(point)\n        }\n      }\n    } finally {\n      LazPerf._free(filePtr)\n      LazPerf._free(dataPtr)\n      laszip.delete()\n    }\n  }\n  // points.length = pointsIdx;\n  console.log(\"Points loaded\")\n  return points\n}\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nfunction TooManyUniforms() {\n  const { t, i18n } = useTranslation()\n  return (\n    <div style={{ alignItems: \"center\" }}>\n      <p>{t(\"errorMessage.tooManyUniforms\")}</p>\n    </div>\n  )\n}\n\nexport default TooManyUniforms\n","import React from \"react\"\nimport { useTranslation } from \"react-i18next\"\n\nfunction WrongAdress() {\n  const { t, i18n } = useTranslation()\n  return (\n    <div style={{ alignItems: \"center\" }}>\n      <p>{t(\"errorMessage.wrongAdress\")}</p>\n      <img\n        src=\"images/googleMaps.gif\"\n        alt=\"Showing how to get coordinates from Google Maps\"\n        style={{ width: \"100%\", maxWidth: \"500px\" }}\n      />\n    </div>\n  )\n}\n\nexport default WrongAdress\n","import React, { useState } from \"react\"\nimport { useTranslation } from \"react-i18next\"\nimport DotLoader from \"react-spinners/DotLoader\"\nimport { setLocation } from \"../../simulation/download\"\nimport TooManyUniforms from \"../ErrorMessages/TooManyUniforms\"\nimport WrongAdress from \"../ErrorMessages/WrongAdress\"\n\nconst override = {\n  display: \"block\",\n  margin: \"auto\",\n  borderColor: \"red\",\n}\n\nfunction SearchField() {\n  const [inputValue, setInputValue] = useState(\"\")\n  const [loading, setLoading] = useState(false)\n  const [showErrorMessage, setShowErrorMessage] = useState(false)\n  const [inputChanged, setInputChanged] = useState(false)\n  const { t, i18n } = useTranslation()\n  const [showTooManyUniformsError, setShowTooManyUniformsError] =\n    useState(false)\n  window.setShowErrorMessage = setShowErrorMessage\n  window.setShowTooManyUniformsError = setShowTooManyUniformsError\n  window.setLoading = setLoading\n  const handleSubmit = (event) => {\n    setLoading(!loading)\n    window.setShowViridisLegend(false)\n    event.preventDefault()\n    window.setShowThreeViewer(true)\n    setLocation(inputValue, inputChanged, window.mapLocation)\n    window.numRadiusSimulationChanged = false\n    window.numSimulationsChanged = false\n    window.mapLocationChanged = false\n    setShowErrorMessage(false)\n    setShowTooManyUniformsError(false)\n    setInputChanged(false)\n  }\n  const handleChange = (event) => {\n    if (inputValue != event.target.value) {\n      setInputValue(event.target.value)\n      setInputChanged(true)\n    }\n  }\n\n  return (\n    <>\n      <form\n        onSubmit={handleSubmit}\n        style={{ display: \"flex\", alignItems: \"center\" }}\n        id=\"search-field\"\n      >\n        <input\n          type=\"text\"\n          placeholder={t(\"searchField.placeholder\")}\n          value={inputValue}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">Start</button>\n      </form>\n      {showErrorMessage && <WrongAdress />}\n      {showTooManyUniformsError && <TooManyUniforms />}\n      <DotLoader\n        color=\"MediumAquaMarine\"\n        cssOverride={override}\n        loading={loading}\n        size={60}\n      />\n      {window.enableLaserPoints && loading && (\n        <div style={{ padding: \"30px\" }}>\n          <p style={{ textAlign: \"center\" }}>\n            {t(\"loadingMessage.warningUseLaserpoints\")}\n          </p>\n        </div>\n      )}\n      {!window.enableLaserPoints && loading && (\n        <div style={{ padding: \"30px\" }}>\n          <p style={{ textAlign: \"center\" }}>\n            {t(\"loadingMessage.warningUseNoLaserpoints\")}\n          </p>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default SearchField\n","import { useEffect, useState } from \"react\"\nimport { Canvas } from \"react-three-fiber\"\nimport * as THREE from \"three\"\nimport { setLocation } from \"../../simulation/download\"\nimport { camera, controls, renderer, scene } from \"../../simulation/stlviewer\"\n\nexport default function ThreeViewer() {\n  const [offsetPosition, setOffsetPosition] = useState([0, 0]) // initial camera position\n  const [loading, setLoading] = useState(false)\n  if (window.offsetPos == null) {\n    window.offsetPos = [0, 0]\n  }\n\n  const addLocationCylinder = (newPos) => {\n    const cylinderHeight = 100\n    const geometry = new THREE.CylinderGeometry(0.25, 0.25, cylinderHeight, 32)\n    const material = new THREE.MeshBasicMaterial({ color: 0x888888 })\n    const cylinder = new THREE.Mesh(geometry, material)\n    cylinder.position.set(newPos[0], newPos[1], cylinderHeight / 2)\n    cylinder.rotation.set(Math.PI / 2, 0, 0)\n    scene.add(cylinder)\n\n    // setTimeout(() => {\n    //   scene.remove(cylinder);\n    //   cylinder.geometry.dispose();\n    //   cylinder.material.dispose();\n    //   renderer.render(scene, camera);\n    // }, 2000);\n\n    // Create a function to gradually reduce the opacity\n    function fade() {\n      if (cylinder.scale.y > 0.1) {\n        // Reduce the scale by a small amount\n        cylinder.scale.y *= 0.95\n        cylinder.position.z = (cylinder.scale.y * cylinderHeight) / 2\n        // Increase the color brightness by a small amount\n        material.color.lerp(new THREE.Color(0xbbbbbb), 0.04) // Bright green\n\n        // renderer.render(scene, camera);\n        // Call this function again after a small delay\n        setTimeout(fade, 20)\n      } else {\n        // Once the opacity reaches 0, remove the cylinder from the scene\n        scene.remove(cylinder)\n\n        // Dispose of the geometry and the material\n        cylinder.geometry.dispose()\n        cylinder.material.dispose()\n      }\n    }\n\n    // Start the fading process\n    fade()\n  }\n\n  const movePosition = (x, y) => {\n    var offset = [0, 0]\n    // console.log(\"MapBaseChanged: \", window.mapLocationBaseChanged);\n    // console.log(\"MapChanged: \", window.mapLocationChanged);\n    if (window.mapLocationBaseChanged) {\n      setOffsetPosition(0, 0)\n      offset = [-offsetPosition[0], -offsetPosition[1]]\n      window.mapLocationBaseChanged = false\n    } else {\n      offset = [0, 0]\n    }\n\n    if (window.mapLocation != null) {\n      const distanceStep = window.distanceStep\n\n      const direction = Math.atan2(camera.rotation.y, camera.rotation.x)\n      const step = {\n        x:\n          x * distanceStep * Math.cos(direction) -\n          y * distanceStep * Math.sin(direction),\n        y:\n          y * distanceStep * Math.cos(direction) +\n          x * distanceStep * Math.sin(direction),\n      }\n      const newPos = [\n        offsetPosition[0] + step.x + offset[0],\n        offsetPosition[1] + step.y + offset[1],\n      ]\n      window.offsetPos = newPos\n      console.log(\"Old offset pos\", window.offsetPos)\n      setOffsetPosition([newPos[0], newPos[1]])\n      const loc = { lon: window.mapLocation.lon, lat: window.mapLocation.lat }\n      var newloc = { lon: parseFloat(loc.lon), lat: parseFloat(loc.lat) }\n      // console.log(direction, step, offset);\n      // console.log(newPos);\n      // console.log(\"Old location: \", newloc.lon, newloc.lat);\n      newloc.lon +=\n        (step.x * 360) / 40000000 / Math.cos((newloc.lat / 180) * Math.PI)\n      newloc.lat += (step.y * 360) / 40000000\n      // console.log(\"Update location: \", loc, newloc);\n      newloc = { lat: newloc.lat.toString(), lon: newloc.lon.toString() }\n      window.mapLocation = newloc\n      window.mapLocationChanged = true\n\n      camera.position.set(\n        camera.position.x + step.x,\n        camera.position.y + step.y,\n        camera.position.z\n      )\n      camera.lookAt(newPos[0], newPos[1], 0)\n      controls.target.set(newPos[0], newPos[1], 0)\n\n      // console.log(\"PostMove Camera Position\", camera.position);\n      // console.log(\"Camera Rot\", camera.rotation);\n\n      var animate = function () {\n        requestAnimationFrame(animate)\n        controls.update()\n        renderer.render(scene, camera)\n      }\n      animate()\n\n      addLocationCylinder(newPos)\n    }\n  }\n\n  const resimulate = () => {\n    setLoading(!loading)\n    window.setShowViridisLegend(false)\n    window.setShowThreeViewer(true)\n    setLocation(\"\", false, window.mapLocation)\n    window.numRadiusSimulationChanged = false\n    window.numSimulationsChanged = false\n    window.mapLocationChanged = false\n    setShowErrorMessage(false)\n    setShowTooManyUniformsError(false)\n  }\n\n  return (\n    <div className=\"viewer-container\" style={{ position: \"relative\" }}>\n      <Canvas className=\"three-viewer\" flat linear></Canvas>\n      <canvas id=\"canvas\" width={0} height={0}></canvas>\n      {window.showViridisLegend && (\n        <>\n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(0, 1)}\n            style={{ right: \"1em\", bottom: \"2em\" }}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(0, -1)}\n            style={{ right: \"1em\", bottom: \"0em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              style={{ transform: \"rotate(180deg)\" }}\n            >\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={resimulate}\n            style={{ right: \"1em\", bottom: \"1em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"50\"\n              height=\"50\"\n              viewBox=\"0 0 50 50\"\n            >\n              <polyline\n                points=\"10,25 20,35 40,15\"\n                stroke=\"#000000\"\n                strokeWidth=\"0.5em\"\n                fill=\"none\"\n              />\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(-1, 0)}\n            style={{ right: \"2em\", bottom: \"1em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              style={{ transform: \"rotate(270deg)\" }}\n            >\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n          <button\n            className=\"arrowButton\"\n            onClick={() => movePosition(1, 0)}\n            style={{ right: \"0em\", bottom: \"1em\" }}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              style={{ transform: \"rotate(90deg)\" }}\n            >\n              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line>\n              <polyline points=\"5 12 12 5 19 12\"></polyline>\n            </svg>\n          </button>\n        </>\n      )}\n    </div>\n  )\n}\n","import React from \"react\"\n\nconst ViridisLegend = () => {\n  return (\n    <img\n      src=\"images/viridis_legend.svg\"\n      alt=\"Legend of the viridis colormap\"\n      style={{ opacity: 0.6 }}\n      width=\"100%\"\n    />\n  )\n}\n\nexport default ViridisLegend\n","import React, { useState } from \"react\"\nimport SearchField from \"../components/PVSimulation/SearchField\"\n\nimport ThreeViewer from \"../components/ThreeViewer/ThreeViewer\"\nimport ViridisLegend from \"../components/ThreeViewer/ViridisLegend\"\nimport Main from \"../layouts/Main\"\n\nfunction Index() {\n  const [showThreeViewer, setShowThreeViewer] = useState(true)\n  const [showViridisLegend, setShowViridisLegend] = useState(false)\n  window.setShowThreeViewer = setShowThreeViewer\n  window.setShowViridisLegend = setShowViridisLegend\n  window.showViridisLegend = showViridisLegend\n  return (\n    <Main description={\"Berechne das Potential deiner Solaranlage.\"}>\n      <article className=\"post\" id=\"index\">\n        <header>\n          <div className=\"title\">\n            <SearchField />\n          </div>\n        </header>\n        {showThreeViewer && <ThreeViewer />}\n        {showViridisLegend && <ViridisLegend />}\n      </article>\n    </Main>\n  )\n}\n\nexport default Index\n"],"names":["subdivideTriangle","triangle","_triangle","_slicedToArray","v0","v1","v2","m01","vec3","m12","m20","adaptiveSubdivideMesh","triangles","threshold","_step","subdividedTrianglesList","_iterator","_createForOfIteratorHelper","s","n","done","trianglesToSubdivide","value","length","currentTriangle","pop","edge1","edge2","crossProduct","lengthEdge1","lengthEdge2","area","Math","max","push","subdividedTriangles","apply","_toConsumableArray","err","e","f","scene","renderer","camera","controls","STLViewer","resetCamera","arguments","undefined","elem","document","getElementsByClassName","style","width","height","THREE","antialias","alpha","clientWidth","clientHeight","up","setSize","replaceChild","domElement","firstChild","window","addEventListener","aspect","updateProjectionMatrix","MapControls","mouseButtons","LEFT","PAN","MIDDLE","DOLLY","RIGHT","ROTATE","screenSpacePanning","maxPolarAngle","PI","dirLight","position","set","add","dirLight2","dirLight3","addToArray","ar1","ar2","i","intensity_colormap","t","c0","c1","c2","c3","c4","c5","c6","max_subdim","array","index","ar","min_subdim","_step2","min","_iterator2","rayTracingPointsWebGL","pointsArray","trianglesArray","normals","laserPoints","laserPointsRadius","laserPointsMinDistance","num_dates","loc","N_TRIANGLES","N_POINTS","gl","getElementById","getContext","alert","vertexShaderSource","concat","max3DTextureSize","getParameter","MAX_3D_TEXTURE_SIZE","console","log","numLaserPoints","textureWidth","textureDepth","textureHeight","texturePointsGrid","Float32Array","scaleDown","laserPointAreaBounds","laserPointZBound","laserPointAreaWidth","laserPointAreaHeight","gridCellSize","sqrt","ceil","nPointsGrid","Int32Array","point","x","floor","maxNPoints","y","j","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","variables_of_interest","createProgram","setShowTooManyUniformsError","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","error","getProgramInfoLog","deleteProgram","alignedTrianglesArray","colorBuffer","makeBuffer","tf","buffer","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","makeTransformFeedback","maxTextureSize","MAX_TEXTURE_SIZE","textureWidthTris","textureHeightTris","useProgram","textureTri","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texImage2D","RGB32F","RGB","FLOAT","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texture","TEXTURE1","TEXTURE_3D","texImage3D","RGBA32F","RGBA","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_WRAP_R","u_trianglesLocation","getUniformLocation","uniform1i","u_pointcloudShading","u_textureWidth","u_textureHeight","u_textureDepth","u_POINT_RADIUS","uniform1f","u_MIN_DISTANCE","u_scaleDown","u_MAX_STEPS","u_gridCellSizes","uniform3f","u_originOffset","u_gridLocation","u_textureWidthTris","positionAttributeLocation","getAttribLocation","normalAttributeLocation","vao","createVertexArray","bindVertexArray","positionBuffer","makeBufferAndSetAttribute","normalBuffer","isShadowedArray","sunDirectionUniformLocation","sunDirection","retrieveRandomSunDirections","lat","lon","uniform3fv","drawArraysWithTransformFeedback","POINTS","getResults","filter","_","deleteTexture","deleteShader","deleteBuffer","deleteTransformFeedback","label","results","bindBuffer","ARRAY_BUFFER","getBufferSubData","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","sizeOrData","buf","createBuffer","bufferData","DYNAMIC_DRAW","data","enableVertexAttribArray","vertexAttribPointer","primitiveType","count","enable","RASTERIZER_DISCARD","beginTransformFeedback","drawArrays","endTransformFeedback","disable","raytracingGeometry","innerGeometry","outerGeometry","Ndates","directions","date","Date","random","pos","SunCalc","altitude","Number","NaN","cos","sin","azimuth","calc_webgl","_x","_x2","_x3","_calc_webgl","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mesh_vectors","points","status_elem","uniquePoints","uniqueNormals","uniquePairs","pointKey","uniquePointsArray","uniqueNormalsArray","uniqueIntensities","_i","_point","_pointKey","intensities_array","_i2","_point2","_pointKey2","intensities","wrap","_context","prev","next","attributes","normal","textContent","hasChanged","map","parseFloat","toFixed","JSON","stringify","hasOwnProperty","slice","numSimulations","sent","setLoading","abrupt","Array","fill","showMeshIntensities","stop","refine_triangles","triangle_array","newpos_update","cutoffMesh","geometry","cutoff","posarray","newposarray","newnormals","keep","d1","d2","new_geometry","setAttribute","needsUpdate","createMeshes","big_geometry","offset","minZ","cutoffRaytracing","numRadiusSimulation","outerCutoff","refinementCutoff","mesh_refinement_scale","newMinZ","xytranslate","POSITIVE_INFINITY","zcoord","getZ","centerMesh","loc_utm","geometryDict","adaptiveSubdivideThreshold","innerPosarray","innerNormals","outerPosarray","outerNormals","isInnerGeometry","triangle_points","splitCutoffRefineMesh","setShowErrorMessage","setShowThreeViewer","_x4","_x5","_x6","_showMeshIntensities","_callee3","oldCameraPosition","Npoints","newColors","col","material","mesh","outerGeometryMaterial","outerMesh","sphereGeometry","sphereMaterial","sphere","middle","animate","_context3","z","vertexColors","side","shininess","roughness","color","pointsVisualizationRatio","computeBoundingBox","boundingBox","getCenter","offsetPos","requestAnimationFrame","update","render","setShowViridisLegend","parseHeader","arrayBuffer","byteLength","Error","dataView","DataView","pointDataRecordFormat","getUint8","pointDataRecordLength","getUint16","pointDataOffset","getUint32","pointCount","scale","getFloat64","loadLAZ","_loadLAZ","radius","filenames","_loop","filename","filenameIdx","_context2","response","fileUint8Array","_parseHeader","LazPerf","laszip","dataPtr","filePtr","pointbuffer","_pointbuffer","_dataview","lazFiles","indexOf","lazCache","fetch","Uint8Array","createLazPerf","LASZip","_malloc","HEAPU8","byteOffset","open","getPoint","dataview","getInt32","v","every","_free","delete","delegateYield","t1","finish","getLocationFromInput","_getLocationFromInput","locationText","_locationText$split$m","_locationText$split$m2","latitude","longitude","url","locationTextModified","test","split","trim","fetchLocation","join","_fetchLocation","_callee2","statuselem","responseData","ok","status","json","t0","setLocation","_setLocation","inputValue","inputChanged","newloc","mapLocationBaseChanged","mapLocation","retrieveData","mapLocationChanged","get_utm32","proj4","defs","_transformer$forward","forward","_transformer$forward2","x_utm32","y_utm32","get_file_names","DIVISOR","BUFFER_ZONE","x_rounded","y_rounded","load_tile_left","load_tile_right","load_tile_lower","load_tile_upper","file_list","get_file_names_laz","getCommentLine","stlData","uint8Array","commentChars","unshift","String","fromCharCode","commentLine","parseCommentLine","comment","match","_retrieveData","_callee4","baseurl","geometries","main_offset","loc_utm32","filename_idx","zipData","zip","stlFile","local_offset","combinedGeometry","offsetUTM32","laser_points","_args4","_context4","stlFiles","stlDataCached","JSZip","loadAsync","file","Object","keys","files","async","STLLoader","parse","translate","BufferGeometryUtils","enableLaserPoints","_useTranslation","useTranslation","i18n","_jsx","alignItems","children","_jsxs","src","alt","maxWidth","override","display","margin","borderColor","_useState","useState","_useState2","setInputValue","_useState3","_useState4","loading","_useState5","_useState6","showErrorMessage","_useState7","_useState8","setInputChanged","_useState9","_useState10","showTooManyUniformsError","_Fragment","onSubmit","event","preventDefault","numRadiusSimulationChanged","numSimulationsChanged","id","placeholder","onChange","target","WrongAdress","TooManyUniforms","DotLoader","cssOverride","size","padding","textAlign","ThreeViewer","offsetPosition","setOffsetPosition","movePosition","distanceStep","direction","atan2","rotation","step","newPos","toString","lookAt","cylinder","cylinderHeight","fade","lerp","setTimeout","remove","dispose","addLocationCylinder","className","Canvas","flat","linear","showViridisLegend","onClick","right","bottom","xmlns","viewBox","x1","y1","x2","y2","transform","stroke","strokeWidth","opacity","showThreeViewer","Main","description","SearchField","ViridisLegend"],"sourceRoot":""}