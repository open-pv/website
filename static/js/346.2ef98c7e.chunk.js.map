{"version":3,"file":"static/js/346.2ef98c7e.chunk.js","mappings":"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","sources":["simulation/stlviewer.js","simulation/stl_to_array.js","simulation/utils.js","simulation/webgl_raytracing.js","simulation/pv_simulation.js","simulation/download.js","components/ErrorMessages/WrongAdress.js","components/ErrorMessages/TooManyUniforms.js","components/PVSimulation/SearchField.js","components/ThreeViewer/ThreeViewer.js","components/ThreeViewer/ViridisLegend.js","pages/Index.js"],"sourcesContent":["import * as THREE from \"three\";\r\nimport { MapControls } from \"three/addons/controls/MapControls.js\";\r\n\r\n\r\n\r\nexport var scene = null;\r\nexport var renderer = null;\r\nexport var camera = null;\r\nexport var controls = null;\r\n\r\nexport function STLViewerEnable(classname) {\r\n    var model = document.getElementsByClassName(classname)[0];\r\n    STLViewer(model);\r\n}\r\n\r\nexport function STLViewer() {\r\n    const elem = document.getElementsByClassName(\"three-viewer\")[0];\r\n\r\n    elem.style.width = \"100%\";\r\n    elem.style.height = \"400px\";\r\n\r\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    camera = new THREE.PerspectiveCamera(45, elem.clientWidth / elem.clientHeight, 1, 1000);\r\n    camera.up = new THREE.Vector3( 0, 0, 1 );\r\n    \r\n    \r\n    renderer.setSize(elem.clientWidth, elem.clientHeight);\r\n    elem.replaceChild(renderer.domElement, elem.firstChild);\r\n\r\n\r\n    window.addEventListener('resize', function () {\r\n        renderer.setSize(elem.clientWidth, elem.clientHeight);\r\n        camera.aspect = elem.clientWidth / elem.clientHeight;\r\n        camera.updateProjectionMatrix();\r\n    }, false);\r\n\r\n    controls = new MapControls(camera, renderer.domElement);\r\n    controls.mouseButtons = {\r\n        LEFT: THREE.MOUSE.PAN,\r\n        MIDDLE: THREE.MOUSE.DOLLY,\r\n        RIGHT:  THREE.MOUSE.ROTATE,\r\n    }\r\n    controls.screenSpacePanning = false;\r\n    controls.maxPolarAngle = Math.PI / 2;\r\n\r\n    scene = new THREE.Scene();\r\n\r\n    let dirLight = new THREE.DirectionalLight(0xffffff, 0.25);\r\n    dirLight.position.set(0, -0.3, 1);\r\n    scene.add(dirLight);\r\n\r\n    let dirLight2 = new THREE.DirectionalLight(0xffffff, 0.1);\r\n    dirLight2.position.set(0.3, -0.3, 1);\r\n    scene.add(dirLight2);\r\n\r\n    let dirLight3 = new THREE.DirectionalLight(0xffffff, 0.1);\r\n    dirLight3.position.set(-0.3, -0.3, 1);\r\n    scene.add(dirLight3);\r\n    scene.add(new THREE.AmbientLight(0xffffff, 1));\r\n    \r\n}\r\n","import { vec3 } from \"gl-matrix\";\r\n// const { vec3, mat4 } = glMatrix;\r\n\r\n\r\nexport function loadSTL(model) {\r\n    return new Promise((resolve, reject) => {\r\n        (new THREE.STLLoader()).load(model, function (geometry) {\r\n            // Extract the position and normal arrays from the geometry\r\n            const positionArray = geometry.attributes.position.array;\r\n            //const normalArray = geometry.attributes.normal.array;\r\n\r\n            const triangles = [];\r\n\r\n            for (let i = 0; i < positionArray.length; i += 9) {\r\n                const triangle = [\r\n                    Array.from(positionArray.slice(i, i + 3)),\r\n                    Array.from(positionArray.slice(i + 3, i + 6)),\r\n                    Array.from(positionArray.slice(i + 6, i + 9)),\r\n                ];\r\n    \r\n                triangles.push(triangle.map(v => vec3.fromValues(...v)));\r\n            }\r\n    \r\n            const threshold = 0.1; // Set your desired threshold value here\r\n            const subdividedTriangles = adaptiveSubdivideMesh(triangles, threshold);\r\n            \r\n\r\n\r\n            // Return the arrays in an object\r\n            resolve({ original_vertices: positionArray,subdivided_triangles:subdividedTriangles});\r\n        }, undefined, reject);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\nexport function subdivideTriangle(triangle) {\r\n    const [v0, v1, v2] = triangle;\r\n\r\n    const m01 = vec3.clone(v0);\r\n    const m12 = vec3.clone(v1);\r\n    const m20 = vec3.clone(v2);\r\n\r\n    vec3.lerp(m01, v0, v1, 0.5);\r\n    vec3.lerp(m12, v1, v2, 0.5);\r\n    vec3.lerp(m20, v2, v0, 0.5);\r\n\r\n    return [\r\n        [v0, m01, m20],\r\n        [v1, m12, m01],\r\n        [v2, m20, m12],\r\n        [m01, m12, m20],\r\n    ];\r\n}\r\n\r\n\r\nexport function adaptiveSubdivideMesh(triangles, threshold) {\r\n    const subdividedTrianglesList = [];\r\n\r\n    for (const triangle of triangles) {\r\n        let trianglesToSubdivide = [triangle];\r\n\r\n        while (trianglesToSubdivide.length > 0) {\r\n            const currentTriangle = trianglesToSubdivide.pop();\r\n\r\n            const edge1 = vec3.create();\r\n            const edge2 = vec3.create();\r\n\r\n            vec3.sub(edge1, currentTriangle[1], currentTriangle[0]);\r\n            vec3.sub(edge2, currentTriangle[2], currentTriangle[0]);\r\n\r\n            const crossProduct = vec3.create();\r\n            vec3.cross(crossProduct, edge1, edge2);\r\n            const area = 0.5 * vec3.len(crossProduct);\r\n\r\n            let lengthEdge1;\r\n            let lengthEdge2;\r\n\r\n            lengthEdge1 = vec3.dot(edge1, edge1);\r\n            lengthEdge2 = vec3.dot(edge2, edge2);\r\n\r\n\r\n            if (area <= threshold && Math.max(lengthEdge1, lengthEdge2) <= 1) {\r\n                subdividedTrianglesList.push(currentTriangle);\r\n            } else {\r\n                const subdividedTriangles = subdivideTriangle(currentTriangle);\r\n                trianglesToSubdivide.push(...subdividedTriangles);\r\n            }\r\n        }\r\n    }\r\n\r\n    return subdividedTrianglesList;\r\n\r\n}\r\n\r\n\r\n","export function addToArray(ar1, ar2){\r\n    for (var i = 0; i < ar1.length; i++){\r\n      ar1[i] += ar2[i];\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // from https://observablehq.com/@flimsyhat/webgl-color-maps\r\nexport function intensity_colormap(t){\r\n  //viridis\r\n  const c0 = [0.2777273272234177, 0.005407344544966578, 0.3340998053353061];\r\n  const c1 = [0.1050930431085774, 1.404613529898575, 1.384590162594685];\r\n  const c2 = [-0.3308618287255563, 0.214847559468213, 0.09509516302823659];\r\n  const c3 = [-4.634230498983486, -5.799100973351585, -19.33244095627987];\r\n  const c4 = [6.228269936347081, 14.17993336680509, 56.69055260068105];\r\n  const c5 = [4.776384997670288, -13.74514537774601, -65.35303263337234];\r\n  const c6 = [-5.435455855934631, 4.645852612178535, 26.3124352495832];\r\n    \r\n    \r\n    //const res = c0*0.004+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))))*0.004;\r\n    const res = [\r\n      c0[0]+t*(c1[0]+t*(c2[0]+t*(c3[0] + t*(c4[0] + t*(c5[0] + t*c6[0]))))),\r\n      c0[1]+t*(c1[1]+t*(c2[1]+t*(c3[1] + t*(c4[1] + t*(c5[1] + t*c6[1]))))),\r\n      c0[2]+t*(c1[2]+t*(c2[2]+t*(c3[2] + t*(c4[2] + t*(c5[2] + t*c6[2])))))];\r\n    return res;\r\n}\r\n\r\n\r\n\r\nexport function deleteChildDivs(parentDivClass) {\r\n  let parentDiv =  document.getElementsByClassName(parentDivClass);\r\n  for (var i = 0; i < parentDiv.length; i++) {\r\n    let div = parentDiv[i];\r\n\r\n    // Remove all child elements by setting innerHTML to an empty string\r\n    div.innerHTML = '';\r\n  }\r\n}","import { addToArray } from \"./utils\";\r\nimport { retrieveRandomSunDirections } from \"./pv_simulation\";\r\n\r\n\r\n\r\nexport function rayTracingWebGL(pointsArray, trianglesArray, normals, num_dates, loc) {\r\n\tconst N_TRIANGLES = trianglesArray.length / 9;\r\n\r\n\tconst width = pointsArray.length / 3; // Change this to the number of horizontal points in the grid\r\n\tconst height = 1; // Change this to the number of vertical points in the grid\r\n\tconst N_POINTS = width;\r\n\tconst canvas = document.getElementById('canvas');\r\n\r\n\r\n\r\n\t//canvas.width = width;\r\n\t//canvas.height = height;\r\n\r\n\tconst gl = canvas.getContext('webgl2');\r\n\r\n\tif (!gl) {\r\n\t\talert('Your browser does not support WebGL2');\r\n\t}\r\n\r\n\r\n\t// Vertex shader code\r\n\tconst vertexShaderSource = `#version 300 es\r\n\t#define INFINITY         1000000.0\r\n\tprecision highp float;\r\n\r\n\r\n\tuniform vec3 u_triangles[${3 * N_TRIANGLES}];\r\n\tuniform vec3 u_sun_direction;\r\n\r\n\tin vec3 a_position;\r\n\tin vec3 a_normal;\r\n\r\n\tout vec4 outColor;\r\n\r\n\tvec3 cross1(vec3 a, vec3 b) {\r\n\t\tvec3 c = vec3(0, 0, 0);\r\n\t\tc.x = a[1] * b[2] - a[2] * b[1];\r\n\t\tc.y = a[2] * b[0] - a[0] * b[2];\r\n\t\tc.z = a[0] * b[1] - a[1] * b[0];\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfloat TriangleIntersect( vec3 v0, vec3 v1, vec3 v2, vec3 rayOrigin, vec3 rayDirection, int isDoubleSided )\r\n\t{\r\n\t\tvec3 edge1 = v1 - v0;\r\n\t\tvec3 edge2 = v2 - v0;\r\n\r\n\t\tvec3 pvec = cross(rayDirection, edge2);\r\n\r\n\t\tfloat epsilon = 0.000001; // Add epsilon to avoid division by zero\r\n\t\tfloat det = dot(edge1, pvec);\r\n\t\tif (abs(det) < epsilon) // Check if det is too close to zero\r\n\t\t\treturn INFINITY;\r\n\r\n\t\tfloat inv_det = 1.0 / det;\r\n\t\tif ( isDoubleSided == 0 && det < 0.0 ) \r\n\t\t\treturn INFINITY;\r\n\t\t\r\n\t\tvec3 tvec = rayOrigin - v0;\r\n\t\tfloat u = dot(tvec, pvec) * inv_det;\r\n\t\tvec3 qvec = cross(tvec, edge1);\r\n\t\tfloat v = dot(rayDirection, qvec) * inv_det;\r\n\t\tfloat t = dot(edge2, qvec) * inv_det;\r\n\t\tfloat x = dot(pvec,pvec);\r\n\t\treturn (u < 0.0 || u > 1.0 || v < 0.0 || u + v > 1.0 || t <= 0.0) ? INFINITY : t;\r\n\r\n\t}\r\n\r\n\r\n\tbool Calculate_Shading_at_Point(vec3 vertex_position, vec3 sun_direction) {\r\n\t\tfloat d;\r\n\t\tfloat t = INFINITY;\r\n\t\tbool is_shadowed = false;\r\n\t\tfor (int i = 0; i < ${N_TRIANGLES}; i++) {\r\n\t\t\td = TriangleIntersect(u_triangles[i * 3], u_triangles[i * 3 + 1], u_triangles[i * 3 + 2], vertex_position, sun_direction, 1);\r\n\t\t\tif (d < t && abs(d)>0.0001) {\r\n\t\t\t\treturn true;\r\n\r\n\t\t}\r\n\t\t}\r\n\t\treturn is_shadowed;\r\n\t}\r\n\r\n\tvoid main() {\r\n\t\tif (Calculate_Shading_at_Point(a_position.xyz, u_sun_direction)) {\r\n\t\t\t\t\toutColor = vec4(0, 0, 0, 0); // Shadowed\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfloat intensity = abs(dot(a_normal.xyz, u_sun_direction));\r\n\t\t\t\t\toutColor = vec4(intensity, intensity, intensity, intensity); // Not shadowed\r\n\t\t\t\t}\r\n\r\n\t}`;\r\n\r\n\t// Fragment shader code\r\n\tconst fragmentShaderSource = `#version 300 es\r\n\tprecision highp float;\r\n\tvoid main() {\r\n\t}\r\n\t`;\r\n\r\n\r\n\r\n\tconst vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n\tconst fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n\r\n\tconst program = createProgram(gl, vertexShader, fragmentShader, [\"outColor\"]);\r\n\tif (program === \"abortSimulation\"){\r\n\t\treturn null\r\n\t}\r\n\r\n\t\r\n\tconst trianglesUniformLocation = gl.getUniformLocation(program, \"u_triangles\"); \r\n\r\n\t\r\n\tconst colorBuffer = makeBuffer(gl, N_POINTS*16);\r\n\tconst tf = makeTransformFeedback(gl, colorBuffer);\r\n\t\r\n\t// bind the buffers to the transform feedback\r\n\t\r\n\r\n\t// buffer's we are writing to can not be bound else where\r\n\t\r\n\r\n\t// above this line is setup\r\n\t// ---------------------------------\r\n\t// below this line is \"render\" time\r\n\t\r\n\t\r\n\r\n\r\n\tgl.useProgram(program);\r\n\tgl.uniform3fv(trianglesUniformLocation, trianglesArray);\r\n\t\r\n\tconst positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\r\n\tconst normalAttributeLocation = gl.getAttribLocation(program, \"a_normal\");\r\n\r\n\tconst vao = gl.createVertexArray();\r\n\tgl.bindVertexArray(vao);\r\n\r\n\tconst positionBuffer = makeBufferAndSetAttribute(gl, pointsArray, positionAttributeLocation);\r\n\tconst normalBuffer = makeBufferAndSetAttribute(gl, normals, normalAttributeLocation);\r\n\r\n\t//const positionBuffer = gl.createBuffer();\r\n\t//gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\t//gl.bufferData(gl.ARRAY_BUFFER, pointsArray, gl.STATIC_DRAW);\r\n\r\n\t\r\n\t//const normalBuffer = gl.createBuffer();\r\n\t//gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n\t//gl.bufferData(gl.ARRAY_BUFFER, normals, gl.STATIC_DRAW);\r\n\r\n\t\r\n\r\n\t//gl.enableVertexAttribArray(positionAttributeLocation);\r\n\t//gl.vertexAttribPointer(positionAttributeLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n\t//gl.enableVertexAttribArray(normalAttributeLocation);\r\n\t//gl.vertexAttribPointer(normalAttributeLocation, 3, gl.FLOAT, false, 0, 0);\r\n\t\r\n\t//gl.bindAttribLocation(program, 0, 'a_position');\r\n\t//gl.bindAttribLocation(program, 1, 'a_normal'); \r\n\r\n\t// bind our input attribute state for the a and b buffers\r\n\r\n\t// no need to call the fragment shader\r\n\t\r\n\r\n\r\n\tlet colorCodedArray;\r\n\tlet isShadowedArray;\r\n\tfor (var i = 0; i < num_dates; i++){\r\n\t\tlet sunDirectionUniformLocation = gl.getUniformLocation(program, \"u_sun_direction\");\r\n\t\tlet sunDirection = retrieveRandomSunDirections(1, loc.lat, loc.lon);\r\n\t\tgl.uniform3fv(sunDirectionUniformLocation, sunDirection);\r\n\r\n\t\tdrawArraysWithTransformFeedback(gl, tf, gl.POINTS, N_POINTS)\t\t\r\n\r\n\t\tif (isShadowedArray == null){\r\n\t\t\tcolorCodedArray = getResults(gl, colorBuffer, 'shading', N_POINTS);\r\n\t\t\tisShadowedArray = colorCodedArray.filter((_, index) => (index + 1) % 4 === 0);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\tcolorCodedArray = getResults(gl, colorBuffer, 'shading', N_POINTS);\r\n\t\t\taddToArray(isShadowedArray, colorCodedArray.filter((_, index) => (index + 1) % 4 === 0));\r\n\t\t\t}\t\t  \r\n\t}\r\n\treturn isShadowedArray\r\n\r\n}\r\n\r\nfunction getResults(gl, buffer, label, N_POINTS) {\r\n\tlet results = new Float32Array(N_POINTS*4);\r\n\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n\tgl.getBufferSubData(\r\n\t\tgl.ARRAY_BUFFER,\r\n\t\t0,    // byte offset into GPU buffer,\r\n\t\tresults,\r\n\t);\r\n\r\n\tgl.bindBuffer(gl.ARRAY_BUFFER, null);  // productBuffer was still bound to ARRAY_BUFFER so unbind it\r\n\treturn results;\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\nfunction createShader(gl, type, source) {\r\nconst shader = gl.createShader(type);\r\ngl.shaderSource(shader, source);\r\ngl.compileShader(shader);\r\nconst success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\nif (success) {\r\n\treturn shader;\r\n}\r\nconsole.error(gl.getShaderInfoLog(shader));\r\ngl.deleteShader(shader);\r\n}\r\n\r\n\r\nfunction createProgram(gl, vertexShader, fragmentShader, variables_of_interest) {\r\nconst program = gl.createProgram();\r\n\r\nif (vertexShader === undefined || fragmentShader === undefined) {\r\n\twindow.setShowTooManyUniformsError(true)\r\n\treturn \"abortSimulation\"\r\n  } else {\r\n  \r\ngl.attachShader(program, vertexShader);\r\ngl.attachShader(program, fragmentShader);\r\ngl.transformFeedbackVaryings(\r\n\tprogram,\r\n\tvariables_of_interest,\r\n\tgl.SEPARATE_ATTRIBS,\r\n);\r\ngl.linkProgram(program);\r\nconst success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\nif (success) {\r\n\treturn program;\r\n}\r\nconsole.error(gl.getProgramInfoLog(program));\r\ngl.deleteProgram(program);\r\n}\r\n}\r\n\r\nfunction createTexture(gl, width, height) {\r\nconst texture = gl.createTexture();\r\ngl.bindTexture(gl.TEXTURE_2D, texture);\r\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\nreturn texture;\r\n}\r\n\r\nfunction makeBuffer(gl, sizeOrData) {\r\nconst buf = gl.createBuffer();\r\ngl.bindBuffer(gl.ARRAY_BUFFER, buf);\r\ngl.bufferData(gl.ARRAY_BUFFER, sizeOrData, gl.DYNAMIC_DRAW);\r\nreturn buf;\r\n}\r\n\r\nfunction makeBufferAndSetAttribute(gl, data, loc) {\r\n\tconst buf = makeBuffer(gl, data);\r\n\t// setup our attributes to tell WebGL how to pull\r\n\t// the data from the buffer above to the attribute\r\n\tgl.enableVertexAttribArray(loc);\r\n\tgl.vertexAttribPointer(\r\n\t\tloc,\r\n\t\t3,         // size (num components)\r\n\t\tgl.FLOAT,  // type of data in buffer\r\n\t\tfalse,     // normalize\r\n\t\t0,         // stride (0 = auto)\r\n\t\t0,         // offset\r\n\t);\r\n  }\r\n\r\nfunction makeTransformFeedback(gl, buffer) {\r\n\tconst tf = gl.createTransformFeedback();\r\n\tgl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\r\n\tgl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, buffer);\r\n\treturn tf;\r\n\t}\r\n\t\r\nfunction drawArraysWithTransformFeedback(gl, tf, primitiveType, count) {\r\n\t// turn of using the fragment shader\r\n\tgl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n\tgl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\r\n\tgl.beginTransformFeedback(gl.POINTS);\r\n\tgl.drawArrays(primitiveType, 0, count);\r\n\tgl.endTransformFeedback();\r\n\tgl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n\t// turn on using fragment shaders again\r\n\tgl.disable(gl.RASTERIZER_DISCARD);\r\n\t}\r\n\r\n\t\r\n","import * as THREE from \"three\";\r\n\r\nimport { scene, renderer, camera, controls, STLViewer } from \"./stlviewer.js\";\r\nimport { adaptiveSubdivideMesh } from \"./stl_to_array.js\";\r\nimport { vec3 } from \"gl-matrix\";\r\n// import init, { Session, Input} from \"@webonnx/wonnx-wasm\";\r\n// import { cumulativeIntensityMesh } from './glmatrix_raytracing/glmatrix_raytracing.js';\r\nimport SunCalc from \"suncalc\";\r\nimport { loc_utm } from \"./download.js\";\r\nimport {  intensity_colormap } from \"./utils.js\";\r\nimport { rayTracingWebGL } from \"./webgl_raytracing.js\";\r\n//import { triangleIntersectText, Calculate_Shading_at_Point_text } from \"./webgl_raytracing.js\";\r\nimport DatesSlider from \"../components/PVSimulation/DatesSlider.js\";\r\n\r\n\r\n// import '@tensorflow/tfjs-backend-webgpu';\r\n// Set the backend to WebGPU and wait for the module to be ready.\r\n\r\n// import { STLViewer } from \"./stlviewer_2/stlviewer.js\";\r\n\r\nlet raytracingGeometry;\r\nlet innerGeometry;\r\nlet outerGeometry;\r\nvar intensities = null;\r\n\r\n\r\nexport function getViewer(){\r\n  return [scene, renderer, camera, controls];\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function retrieveRandomSunDirections(Ndates, lat, lon){\r\n  const directions = new Float32Array(Ndates*3);\r\n  var i = 0;\r\n  while (i < Ndates){\r\n    const date = new Date(\r\n      2023,\r\n      Math.floor(12*Math.random()),\r\n      1+Math.floor(28*Math.random()),\r\n      Math.floor(24*Math.random()),\r\n      Math.floor(60*Math.random()),\r\n      0, 0);\r\n\r\n    const pos = SunCalc.getPosition(date, lat, lon);\r\n    if ((pos.altitude < 0.1)||(pos.altitude == Number.NaN)){\r\n      continue;\r\n    }\r\n    directions[3*i] = -Math.cos(pos.altitude)*Math.sin(pos.azimuth);\r\n    directions[3*i+1] = -Math.cos(pos.altitude)*Math.cos(pos.azimuth);\r\n    directions[3*i+2] = Math.sin(pos.altitude);\r\n    i += 1;\r\n  }\r\n  return directions;\r\n}\r\n\r\nexport async function calc_webgl(loc){\r\n  const mesh_vectors = raytracingGeometry.attributes.position.array;\r\n  const points = innerGeometry.attributes.position.array;\r\n  const normals = innerGeometry.attributes.normal.array;\r\n\r\n  const status_elem = document.getElementById('status');\r\n  status_elem.textContent = \"Simulating\";\r\n  status_elem.hasChanged = true;\r\n\r\n  let uniquePoints = [];\r\n  let uniqueNormals = [];\r\n\r\n  // Create an object to hold point/normal pairs, where the key is a string representation of the point\r\n  const uniquePairs = {};\r\n\r\n  for (let i = 0; i < points.length; i += 3) {\r\n    const point = [points[i], points[i + 1], points[i + 2]].map(value => parseFloat(value.toFixed(6))); // limit precision\r\n    const pointKey = JSON.stringify(point);\r\n\r\n    if (!uniquePairs.hasOwnProperty(pointKey)) {\r\n      uniquePairs[pointKey] = i / 3;\r\n      uniquePoints.push(points[i], points[i + 1], points[i + 2]);\r\n      uniqueNormals.push(normals[i], normals[i + 1], normals[i + 2]);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  const uniquePointsArray = new Float32Array(uniquePoints.slice());\r\n  const uniqueNormalsArray = new Float32Array(uniqueNormals.slice());\r\n\r\n\r\n\r\n// Compute unique intensities\r\nconst uniqueIntensities = await rayTracingWebGL(uniquePointsArray, mesh_vectors, uniqueNormalsArray, window.numSimulations, loc);\r\nif (uniqueIntensities===null){\r\n  window.setLoading(false);\r\n  return null\r\n  \r\n}\r\n// Store unique intensities in uniquePairs\r\nfor (let i = 0; i < uniqueIntensities.length; i++) {\r\n  const point = [uniquePoints[i * 3], uniquePoints[i * 3 + 1], uniquePoints[i * 3 + 2]].map(value => parseFloat(value.toFixed(6))); // limit precision\r\n  const pointKey = JSON.stringify(point);\r\n\r\n  if (uniquePairs.hasOwnProperty(pointKey)) {\r\n    uniquePairs[pointKey] = uniqueIntensities[i];\r\n  } else {\r\n    console.error(`Couldn't find indices for pointKey ${pointKey}`);\r\n  }\r\n}\r\n\r\n// Generate final intensities array\r\nlet intensities_array = new Array(points.length / 3).fill(0);\r\n\r\nfor (let i = 0; i < points.length; i += 3) {\r\n  const point = [points[i], points[i + 1], points[i + 2]].map(value => parseFloat(value.toFixed(6))); // limit precision\r\n  const pointKey = JSON.stringify(point);\r\n\r\n  if (uniquePairs.hasOwnProperty(pointKey)) {\r\n    intensities_array[i / 3] = uniquePairs[pointKey];\r\n  }\r\n}\r\n\r\nconst intensities = new Float32Array(intensities_array);\r\n\r\n\r\n\r\n\r\n\r\n  status_elem.textContent = \"Simulation Done\";\r\n  status_elem.hasChanged = true;\r\n  window.setLoading(false)\r\n  showMeshIntensities(intensities);\r\n}\r\n\r\n\r\n\r\nfunction refine_triangles(triangle_array, threshold){\r\n  const triangles = [\r\n    [vec3.fromValues(...triangle_array.slice(0, 3)),\r\n     vec3.fromValues(...triangle_array.slice(3, 6)),\r\n     vec3.fromValues(...triangle_array.slice(6, 9))]];\r\n\r\n  const subdividedTriangles = adaptiveSubdivideMesh(triangles, threshold);\r\n\r\n  const newpos_update = [];\r\n  for (const triangle of subdividedTriangles){\r\n    newpos_update.push(...triangle);\r\n  }\r\n  return newpos_update;\r\n}\r\n\r\n\r\nfunction centerMesh(\r\n    geometry, \r\n    xytranslate,\r\n    ){\r\n  // centralize mesh to main point\r\n  var minZ = Number.POSITIVE_INFINITY;\r\n\r\n  // Iterate over vertices and find the minimum z value\r\n  for (var i = 0; i < geometry.attributes.position.array.length; i++){\r\n    const zcoord = geometry.attributes.position.getZ(i);\r\n    if (zcoord < minZ){\r\n      minZ = zcoord;\r\n    }\r\n  }\r\n\r\n\r\n  var posarray = geometry.attributes.position.array;\r\n  for (var i = 0; i < posarray.length; i+=9){\r\n    for (var j = 0; j < 9; j += 3){\r\n      posarray[i+j] = posarray[i+j] - xytranslate[0];\r\n      posarray[i+j+1] = posarray[i+j+1] - xytranslate[1];\r\n      posarray[i+j+2] = posarray[i+j+2] - minZ;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction cutoffMesh(\r\n  geometry, \r\n  cutoff,\r\n  ){\r\n  var posarray = geometry.attributes.position.array.slice();\r\n  var newposarray = [];\r\n  var newnormals = [];\r\n  for (var i = 0; i < posarray.length; i+=9){\r\n    var keep = true;\r\n    for (var j = 0; j < 9; j += 3){\r\n\r\n      if ((posarray[i+j] < -cutoff)||(posarray[i+j] > cutoff )||\r\n            (posarray[i+j+1] < -cutoff)||(posarray[i+j+1] > cutoff)){\r\n        keep = false;\r\n      }\r\n    }\r\n    \r\n    if (keep){\r\n      const v0 = vec3.fromValues(...posarray.slice(i, i+3));\r\n      const v1 = vec3.fromValues(...posarray.slice(i+3, i+6));\r\n      const v2 = vec3.fromValues(...posarray.slice(i+6, i+9));\r\n      let d1 = vec3.create(); vec3.sub(d1, v1, v0);\r\n      let d2 = vec3.create(); vec3.sub(d2, v2, v0);\r\n      let ar = vec3.create(); vec3.cross(ar, d1, d2);\r\n      var normal = vec3.create(); vec3.scale(normal, ar, 1./vec3.len(ar));\r\n\r\n      //remove triangles with low area for shading\r\n      if (vec3.len(ar) < 0.05){\r\n        continue;\r\n      }\r\n\r\n      for (var j = 0; j < 9; j++){\r\n        newposarray.push(posarray[i+j]);\r\n        newnormals.push(normal[j%3]);\r\n      }\r\n        \r\n\r\n      }\r\n    }\r\n\r\n  \r\n  \r\n  let new_geometry = new THREE.BufferGeometry();\r\n  new_geometry.setAttribute(\"position\", new THREE.BufferAttribute(\r\n    new Float32Array(newposarray), 3));\r\n  new_geometry.setAttribute(\"normal\", new THREE.BufferAttribute(\r\n    new Float32Array(newnormals), 3));\r\n  new_geometry.attributes.position.needsUpdate = true;\r\n  new_geometry.attributes.normal.needsUpdate = true;\r\n  return new_geometry;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction splitCutoffRefineMesh(\r\n  geometry, \r\n  refinementCutoff,\r\n  outerCutoff, \r\n  adaptiveSubdivideThreshold=Number.POSITIVE_INFINITY\r\n  ){\r\n    \r\n  let geometriesCut = cutoffMesh(\r\n      geometry,\r\n      outerCutoff,\r\n    )\r\n  var posarray = geometriesCut.attributes.position.array.slice();\r\n\r\n  var innerPosarray = [];\r\n  var innerNormals = [];\r\n\r\n  var outerPosarray = [];\r\n  var outerNormals = [];\r\n\r\n  for (var i = 0; i < posarray.length; i+=9){\r\n    var isInnerGeometry = true;\r\n    for (var j = 0; j < 9; j += 3){\r\n\r\n      if ((posarray[i+j] < -refinementCutoff)||(posarray[i+j] > refinementCutoff )||\r\n            (posarray[i+j+1] < -refinementCutoff)||(posarray[i+j+1] > refinementCutoff)){\r\n              isInnerGeometry = false;\r\n        // break;\r\n      }\r\n    }\r\n    \r\n      const v0 = vec3.fromValues(...posarray.slice(i, i+3));\r\n      const v1 = vec3.fromValues(...posarray.slice(i+3, i+6));\r\n      const v2 = vec3.fromValues(...posarray.slice(i+6, i+9));\r\n      let d1 = vec3.create(); vec3.sub(d1, v1, v0);\r\n      let d2 = vec3.create(); vec3.sub(d2, v2, v0);\r\n      let ar = vec3.create(); vec3.cross(ar, d1, d2);\r\n      var normal = vec3.create(); vec3.scale(normal, ar, 1./vec3.len(ar));\r\n\r\n      if (vec3.len(ar) < 0.05){\r\n        continue;\r\n      } \r\n      if (isInnerGeometry){\r\n\r\n      var triangle_points = refine_triangles(\r\n        posarray.slice(i, i+9), adaptiveSubdivideThreshold);\r\n\r\n      for (const triangle of triangle_points){\r\n        innerPosarray.push(triangle[0]);\r\n        innerPosarray.push(triangle[1]);\r\n        innerPosarray.push(triangle[2]);\r\n        innerNormals.push(normal[0]);\r\n        innerNormals.push(normal[1]);\r\n        innerNormals.push(normal[2]);\r\n          \r\n      }\r\n\r\n    \r\n    }\r\n    else{\r\n        for (var j = 0; j < 9; j++){\r\n          outerPosarray.push(posarray[i+j]);\r\n          outerNormals.push(normal[j%3]);\r\n        \r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n\r\n  \r\n  let innerGeometry = new THREE.BufferGeometry();\r\n  innerGeometry.setAttribute(\"position\", new THREE.BufferAttribute(\r\n    new Float32Array(innerPosarray), 3));\r\n    innerGeometry.setAttribute(\"normal\", new THREE.BufferAttribute(\r\n    new Float32Array(innerNormals), 3));\r\n    innerGeometry.attributes.position.needsUpdate = true;\r\n    innerGeometry.attributes.normal.needsUpdate = true;\r\n\r\n  let outerGeometry = new THREE.BufferGeometry();\r\n  outerGeometry.setAttribute(\"position\", new THREE.BufferAttribute(\r\n    new Float32Array(outerPosarray), 3));\r\n    outerGeometry.setAttribute(\"normal\", new THREE.BufferAttribute(\r\n    new Float32Array(outerNormals), 3));\r\n    outerGeometry.attributes.position.needsUpdate = true;\r\n    outerGeometry.attributes.normal.needsUpdate = true;\r\n\r\n\r\n\r\n  return {\"innerGeometry\":innerGeometry,\"outerGeometry\":outerGeometry};\r\n}\r\n\r\n\r\nexport function createMeshes(big_geometry,\r\n    cutoffRaytracing=window.numRadiusSimulation + 20,\r\n    outerCutoff=window.numRadiusSimulation + 70,\r\n    refinementCutoff=window.numRadiusSimulation,\r\n    mesh_refinement_scale=2){\r\n\r\n\r\n  intensities = null;\r\n  //center the big mesh around the building coordinates from OSM\r\n  centerMesh(\r\n    big_geometry, \r\n    [loc_utm[0], loc_utm[1]],\r\n    );\r\n\r\n    raytracingGeometry = cutoffMesh(\r\n      big_geometry,\r\n      cutoffRaytracing,\r\n    )\r\n\r\n\r\n\r\n    let geometryDict = splitCutoffRefineMesh(\r\n      big_geometry,\r\n      refinementCutoff,\r\n      outerCutoff,\r\n      mesh_refinement_scale\r\n    )\r\n    innerGeometry =geometryDict.innerGeometry;\r\n    outerGeometry =geometryDict.outerGeometry;\r\n\r\n    if(innerGeometry.attributes.position.array.length ===0) {\r\n      window.setLoading(false);\r\n      window.setShowErrorMessage(true);\r\n      window.setShowThreeViewer(false);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function showMeshOrig(){\r\n  var elem = document.getElementsByClassName(\"stlviewer\")[0];\r\n  const newelem = document.createElement(\"div\");\r\n  newelem.setAttribute(\"class\", \"stlviewer\");\r\n  elem.replaceWith(newelem);\r\n  newelem.id = \"webgl-container\";\r\n  STLViewer(newelem);\r\n  \r\n  const Npoints = innerGeometry.attributes.position.array.length / 3;\r\n  var newColors = new Float32Array(3*Npoints);\r\n  for (var i = 0; i < Npoints; i++){\r\n      newColors[3*i] = 0.6+0.4*Math.random();\r\n      newColors[3*i+1] = 0.4+0.3*Math.random()\r\n      newColors[3*i+2] = 0.3*Math.random();\r\n  }\r\n  \r\n  innerGeometry.setAttribute('color', new THREE.BufferAttribute(newColors, 3));\r\n  var material = new THREE.MeshStandardMaterial({ vertexColors: true });\r\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\r\n  var mesh = new THREE.Mesh(innerGeometry, material);\r\n  scene.add(mesh);\r\n  \r\n  // Compute the middle\r\n  var middle = new THREE.Vector3();\r\n  innerGeometry.computeBoundingBox();\r\n  innerGeometry.boundingBox.getCenter(middle);\r\n\r\n  // Center it\r\n  //mesh.position.x = -1 * middle.x;\r\n  //mesh.position.y = -1 * middle.y;\r\n  //mesh.position.z = -1 * middle.z+3;\r\n\r\n  // Pull the camera away as needed\r\n  var largestDimension = Math.max(innerGeometry.boundingBox.max.x,\r\n    innerGeometry.boundingBox.max.y, innerGeometry.boundingBox.max.z)\r\n  camera.position.set( 0 , -20, 100 );\r\n  camera.position.z = 40;\r\n  \r\n  var animate = function () {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n  }; \r\n  animate();\r\n}\r\n\r\n\r\n\r\n\r\nexport async function replot(){\r\n  showMeshIntensities();\r\n}\r\n\r\nexport async function showMeshIntensities(intensities){\r\n\r\n\r\n  \r\n  STLViewer();\r\n  \r\n\r\n\r\n  const Npoints = innerGeometry.attributes.position.array.length / 3;\r\n  var newColors = new Float32Array(Npoints * 3);\r\n  //var intMax = get99thPercentile(intensities); \r\n  for (var i = 0; i < Npoints; i++){\r\n    const col = intensity_colormap(Math.min(1,intensities[i]/window.numSimulations/0.6));\r\n    //The 0.6 comes from looking at a rooftop facing south with good angle.\r\n    newColors[3*i] = col[0];\r\n    newColors[3*i+1] = col[1];\r\n    newColors[3*i+2] = col[2];\r\n  }\r\n  \r\n  innerGeometry.setAttribute('color', new THREE.Float32BufferAttribute(newColors, 3));\r\n  var material = new THREE.MeshStandardMaterial({ vertexColors: true, side: THREE.DoubleSide, shininess:0, roughness: 1 });\r\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\r\n  var mesh = new THREE.Mesh(innerGeometry, material);\r\n  \r\n  scene.add(mesh);\r\n\r\n\r\n  var outerGeometryMaterial = new THREE.MeshStandardMaterial({ vertexColors: false, side: THREE.DoubleSide ,color: 0xd1bea4,shininess:0, roughness: 1 });\r\n  // var material = new THREE.MeshStandardMaterial({ color: 0xd1bea4 });\r\n  var outerMesh = new THREE.Mesh(outerGeometry, outerGeometryMaterial);\r\n  \r\n  scene.add(outerMesh);\r\n\r\n  \r\n  // Compute the middle\r\n  var middle = new THREE.Vector3();\r\n  innerGeometry.computeBoundingBox();\r\n  innerGeometry.boundingBox.getCenter(middle);\r\n\r\n\r\n  // Pull the camera away as needed\r\n  var largestDimension = Math.max(innerGeometry.boundingBox.max.x,\r\n    innerGeometry.boundingBox.max.y, innerGeometry.boundingBox.max.z)\r\n  camera.position.set( 0 , -20, 100 );\r\n  camera.position.z = 40;\r\n\r\n  var animate = function () {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n  }; \r\n  window.setShowViridisLegend(true);\r\n  animate();\r\n  \r\n  \r\n}\r\n\r\n\r\n","import { calc_webgl, createMeshes } from \"./pv_simulation\";\r\nimport JSZip from \"jszip\";\r\nimport proj4 from \"proj4\";\r\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader.js';\r\nimport * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\r\nexport var loc_utm;\r\nexport var stlDataCached = null;\r\n\r\nvar state = \"WaitForAddr\"; // States are \"WaitForAddr\", \"AddrDataLoaded\", \"Inspect\"\r\n\r\nasync function getLocationFromInput(locationText) {\r\n  let loc;\r\n  const coordinatePattern = /^[-]?(\\d+(\\.\\d+)?),\\s*[-]?(\\d+(\\.\\d+)?)$/;    \r\n  \r\n  // Check if the string matches the coordinate pattern\r\n  if (coordinatePattern.test(locationText)) {\r\n    const [latitude, longitude] = locationText.split(\",\").map((value) => parseFloat(value.trim()));\r\n\r\n    // Create the \"loc\" object with latitude and longitude attributes\r\n    loc = {\r\n      lat: latitude,\r\n      lon: longitude\r\n    };\r\n    return loc;\r\n  } else {\r\n      \r\n    let url = \"https://nominatim.openstreetmap.org/search?format=json&q=\".concat(locationText).concat(\"+Germany+Bavaria\");\r\n    let response = await fetchLocation(url);\r\n    if (!response) {\r\n      let locationTextModified = locationText.split(\" \").join(\"+\");\r\n      url = \"https://nominatim.openstreetmap.org/search?format=json&q=\".concat(locationTextModified);\r\n      response = await fetchLocation(url);\r\n    }\r\n    return response;\r\n  }\r\n}\r\n\r\nasync function fetchLocation(url) {\r\n  let loc;\r\n  const statuselem = document.getElementById('status');\r\n  try {\r\n    let response = await fetch(url);\r\n    if (!response.ok) {\r\n      console.error('Check connection to Nominatim geocoder');\r\n      statuselem.textContent = \"Connection to Adress Server failed\";\r\n      throw new Error('Request failed with status ' + response.status);\r\n    }\r\n    \r\n    let responseData = await response.json();\r\n    if (responseData.length === 0) {\r\n      return null; \r\n    }\r\n\r\n    loc = responseData[0];\r\n    return loc;\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport async function setLocation(inputValue){\r\n  \r\n\r\n  const loc = await getLocationFromInput(inputValue);\r\n  if (typeof loc !== 'undefined') {\r\n    retrieveData(loc);\r\n  }\r\n  else {\r\n    window.setLoading(false);\r\n    window.setShowThreeViewer(false);\r\n    window.setShowErrorMessage(true);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction get_file_names(x, y) {\r\n    const DIVISOR = 2000;\r\n    const BUFFER_ZONE = 100;\r\n    const IN_PROJ = 'EPSG:4326';\r\n    const OUT_PROJ = 'EPSG:25832';\r\n  \r\n    proj4.defs(\"EPSG:25832\", \"+proj=utm +zone=32 +ellps=GRS80 +units=m +no_defs\");\r\n  \r\n    const transformer = proj4(IN_PROJ, OUT_PROJ);\r\n\r\n  \r\n    const [x_utm32, y_utm32] = transformer.forward([x, y]);\r\n    loc_utm = [x_utm32, y_utm32];\r\n\r\n  \r\n    const x_rounded = Math.floor(x_utm32 / DIVISOR) * 2;\r\n    const y_rounded = Math.floor(y_utm32 / DIVISOR) * 2;\r\n\r\n    const load_tile_left = x_utm32 % DIVISOR < BUFFER_ZONE;\r\n    const load_tile_right = x_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE;\r\n    const load_tile_lower = y_utm32 % DIVISOR < BUFFER_ZONE;\r\n    const load_tile_upper = y_utm32 % DIVISOR > DIVISOR - BUFFER_ZONE;\r\n  \r\n    const file_list = [`${x_rounded}_${y_rounded}.zip`];\r\n  \r\n    if (load_tile_left) {\r\n        file_list.push(`${x_rounded - 2}_${y_rounded}.zip`);\r\n    }\r\n    if (load_tile_right) {\r\n        file_list.push(`${x_rounded + 2}_${y_rounded}.zip`);\r\n    }\r\n    if (load_tile_lower) {\r\n        file_list.push(`${x_rounded}_${y_rounded - 2}.zip`);\r\n    }\r\n    if (load_tile_upper) {\r\n        file_list.push(`${x_rounded}_${y_rounded + 2}.zip`);\r\n    }\r\n    if (load_tile_left && load_tile_lower) {\r\n        file_list.push(`${x_rounded - 2}_${y_rounded - 2}.zip`);\r\n    }\r\n    if (load_tile_left && load_tile_upper) {\r\n        file_list.push(`${x_rounded - 2}_${y_rounded + 2}.zip`);\r\n    }\r\n    if (load_tile_right && load_tile_lower) {\r\n        file_list.push(`${x_rounded + 2}_${y_rounded - 2}.zip`);\r\n    }\r\n    if (load_tile_right && load_tile_upper) {\r\n        file_list.push(`${x_rounded + 2}_${y_rounded + 2}.zip`);\r\n    }\r\n    return file_list;\r\n  }\r\n  \r\n  async function retrieveData(loc) {\r\n    const baseurl = \"https://www.openpv.de/data/\";\r\n    var filenames = get_file_names(Number(loc.lon), Number(loc.lat));\r\n    if (filenames.length == 0) {\r\n      return;\r\n    }\r\n  \r\n    const status_elem = document.getElementById(\"status\");\r\n  \r\n    // Create an array to store individual geometries\r\n    let geometries = [];\r\n  \r\n    // Iterate through all filenames\r\n    for (const filename of filenames) {\r\n      let url = baseurl + filename;\r\n      status_elem.textContent = \"Loading from \" + url;\r\n  \r\n      try {\r\n        // Download the zipped STL file\r\n        const response = await fetch(url);\r\n        const zipData = await response.arrayBuffer();\r\n        if (!response.ok) {\r\n          throw new Error('Request failed with status ' + response.status);\r\n        }\r\n\r\n  \r\n        // Unzip the zipped STL file\r\n        const zip = new JSZip();\r\n        await zip.loadAsync(zipData);\r\n  \r\n        // Get the STL file from the unzipped contents\r\n        const stlFile = zip.file(Object.keys(zip.files)[0]);\r\n        if (stlFile) {\r\n          // Load the STL file\r\n          const stlData = await stlFile.async(\"arraybuffer\");\r\n          stlDataCached = stlData;\r\n  \r\n          // Parse the STL data and add the geometry to the geometries array\r\n          let geometry = new STLLoader().parse(stlData);\r\n          geometries.push(geometry);\r\n          // Merge geometries using BufferGeometryUtils\r\n          const combinedGeometry = BufferGeometryUtils.mergeGeometries(geometries);\r\n        \r\n          // Create and display the combined mesh\r\n          createMeshes(combinedGeometry);\r\n          //showMeshOrig();\r\n          calc_webgl(loc);\r\n        } else {\r\n          console.error(\"STL file not found in ZIP archive\");\r\n        }\r\n      } catch (error) {\r\n        window.setLoading(false);\r\n        window.setShowErrorMessage(true);\r\n      }\r\n    }\r\n  \r\n    \r\n    \r\n  }\r\n  \r\n  \r\n","import React from 'react';\r\n\r\nfunction WrongAdress () {\r\n        return (\r\n            <div style={{alignItems: 'center'}}>\r\n              <p>\r\n                Adresse wurde nicht gefunden oder liegt nicht innerhalb von Bayern. Leider können wir aktuell nur Häuser in Bayern simulieren. \r\n              </p>\r\n              <p>\r\n                Alternativ kannst du auch die Koordinaten in Google Maps per Rechtsklick bestimmen und in das Suchfeld eingeben.\r\n              </p>\r\n              <img src=\"images/googleMaps.gif\" alt=\"Showing how to get coordinates from Google Maps\" style={{ width: '100%', maxWidth: '500px' }} />\r\n            </div>\r\n          );\r\n    }\r\n\r\nexport default WrongAdress;\r\n","import React from 'react';\r\n\r\nfunction TooManyUniforms () {\r\n        return (\r\n            <div style={{alignItems: 'center'}}>\r\n              <p>\r\n                Leider ist das ausgewählte Gebiet zu groß, um auf deinem PC simuliert zu werden. Du kannst den Gebäuderadius mit dem Slider\r\n                auf der linken Seite kleiner stellen, um dieses Problem zu beheben.\r\n              </p>\r\n            </div>\r\n          );\r\n    }\r\n\r\nexport default TooManyUniforms;\r\n","import React, {useState } from \"react\";\r\nimport { setLocation } from \"../../simulation/download\";\r\nimport DotLoader from \"react-spinners/DotLoader\";\r\nimport WrongAdress from \"../ErrorMessages/WrongAdress\";\r\nimport TooManyUniforms from \"../ErrorMessages/TooManyUniforms\";\r\n\r\nconst override = {\r\n  display: \"block\",\r\n  margin: \"auto\",\r\n  borderColor: \"red\",\r\n};\r\n\r\nfunction SearchField() {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [showErrorMessage, setShowErrorMessage] = useState(false);\r\n    const [showTooManyUniformsError, setShowTooManyUniformsError] = useState(false);\r\n    window.setShowErrorMessage = setShowErrorMessage;\r\n    window.setShowTooManyUniformsError = setShowTooManyUniformsError;\r\n    window.setLoading = setLoading\r\n    const handleSubmit = (event) => {\r\n        setLoading(!loading)\r\n        window.setShowViridisLegend(false);\r\n        event.preventDefault();\r\n        window.setShowThreeViewer(true);\r\n        setLocation(inputValue)\r\n        setShowErrorMessage(false);\r\n        setShowTooManyUniformsError(false);\r\n\r\n\r\n        \r\n    };\r\n    const handleChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} style={{ display: 'flex', alignItems: 'center' }}>\r\n        <input type=\"text\" placeholder=\"Geben Sie Ihre Addresse oder Koordinaten ein\" value={inputValue} onChange={handleChange} />\r\n        <button type=\"submit\">Start</button>\r\n      </form>\r\n      {showErrorMessage && <WrongAdress />}\r\n      {showTooManyUniformsError && <TooManyUniforms />}\r\n      <DotLoader\r\n        color=\"MediumAquaMarine\"\r\n        cssOverride={override}\r\n        loading={loading}\r\n        size={60}\r\n      />\r\n    </>\r\n  );\r\n}\r\n  \r\nexport default SearchField;","import { Canvas } from \"react-three-fiber\";\r\n\r\n\r\n\r\nexport default function ThreeViewer () {\r\n    return (\r\n    <>\r\n      <Canvas \r\n        className=\"three-viewer\" \r\n        flat \r\n        linear>\r\n      </Canvas>\r\n      <canvas id=\"canvas\" width={0} height={0}></canvas>\r\n    </>\r\n  );\r\n}","import React from \"react\";\r\n\r\n\r\nconst ViridisLegend = () => {\r\n    return (\r\n        <img\r\n            src=\"images/viridis_legend.svg\"\r\n            alt=\"Legend of the viridis colormap\"\r\n            style={{ opacity: 0.6 }}\r\n            width=\"100%\"\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default ViridisLegend;","import React, { useState } from 'react';\r\nimport SearchField from '../components/PVSimulation/SearchField';\r\n\r\nimport Main from '../layouts/Main';\r\nimport ThreeViewer from '../components/ThreeViewer/ThreeViewer';\r\nimport ViridisLegend from '../components/ThreeViewer/ViridisLegend';\r\n\r\nfunction Index () {\r\n  const [showThreeViewer, setShowThreeViewer] = useState(true);\r\n  const [showViridisLegend, setShowViridisLegend] = useState(false);\r\n  window.setShowThreeViewer = setShowThreeViewer;\r\n  window.setShowViridisLegend = setShowViridisLegend;\r\n  return (\r\n  <Main\r\n    description={'Berechne das Potential deiner Solaranlage.'}\r\n  >\r\n    <article className=\"post\" id=\"index\">\r\n      <header>\r\n        <div className=\"title\">\r\n          <SearchField/>\r\n          \r\n        </div>\r\n      </header>\r\n      {showThreeViewer && <ThreeViewer/>}\r\n      {showViridisLegend && <ViridisLegend/>}\r\n    </article>\r\n    \r\n  </Main>\r\n);\r\n  }\r\n\r\nexport default Index;\r\n"],"names":["scene","renderer","camera","controls","STLViewer","elem","document","getElementsByClassName","style","width","height","THREE","antialias","alpha","clientWidth","clientHeight","up","setSize","replaceChild","domElement","firstChild","window","addEventListener","aspect","updateProjectionMatrix","MapControls","mouseButtons","LEFT","PAN","MIDDLE","DOLLY","RIGHT","ROTATE","screenSpacePanning","maxPolarAngle","Math","PI","dirLight","position","set","add","dirLight2","dirLight3","subdivideTriangle","triangle","_triangle","_slicedToArray","v0","v1","v2","m01","vec3","m12","m20","adaptiveSubdivideMesh","triangles","threshold","_step","subdividedTrianglesList","_iterator","_createForOfIteratorHelper","s","n","done","trianglesToSubdivide","value","length","currentTriangle","pop","edge1","edge2","crossProduct","lengthEdge1","lengthEdge2","area","max","push","subdividedTriangles","apply","_toConsumableArray","err","e","f","addToArray","ar1","ar2","i","intensity_colormap","t","c0","c1","c2","c3","c4","c5","c6","rayTracingWebGL","pointsArray","trianglesArray","normals","num_dates","loc","N_TRIANGLES","N_POINTS","gl","getElementById","getContext","alert","vertexShaderSource","concat","program","vertexShader","fragmentShader","variables_of_interest","createProgram","undefined","setShowTooManyUniformsError","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","console","error","getProgramInfoLog","deleteProgram","createShader","VERTEX_SHADER","FRAGMENT_SHADER","trianglesUniformLocation","getUniformLocation","colorBuffer","makeBuffer","tf","buffer","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","makeTransformFeedback","useProgram","uniform3fv","positionAttributeLocation","getAttribLocation","normalAttributeLocation","vao","createVertexArray","bindVertexArray","makeBufferAndSetAttribute","isShadowedArray","sunDirectionUniformLocation","sunDirection","retrieveRandomSunDirections","lat","lon","drawArraysWithTransformFeedback","POINTS","getResults","filter","_","index","label","results","Float32Array","bindBuffer","ARRAY_BUFFER","getBufferSubData","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","sizeOrData","buf","createBuffer","bufferData","DYNAMIC_DRAW","data","enableVertexAttribArray","vertexAttribPointer","FLOAT","primitiveType","count","enable","RASTERIZER_DISCARD","beginTransformFeedback","drawArrays","endTransformFeedback","disable","raytracingGeometry","innerGeometry","outerGeometry","Ndates","directions","date","Date","floor","random","pos","SunCalc","altitude","Number","NaN","cos","sin","azimuth","calc_webgl","_x","_calc_webgl","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mesh_vectors","points","status_elem","uniquePoints","uniqueNormals","uniquePairs","point","pointKey","uniquePointsArray","uniqueNormalsArray","uniqueIntensities","_i","_point","_pointKey","intensities_array","_i2","_point2","_pointKey2","intensities","wrap","_context","prev","next","attributes","array","normal","textContent","hasChanged","map","parseFloat","toFixed","JSON","stringify","hasOwnProperty","slice","numSimulations","sent","setLoading","abrupt","Array","fill","showMeshIntensities","stop","refine_triangles","triangle_array","newpos_update","cutoffMesh","geometry","cutoff","posarray","newposarray","newnormals","keep","j","d1","d2","ar","new_geometry","setAttribute","needsUpdate","createMeshes","big_geometry","cutoffRaytracing","numRadiusSimulation","outerCutoff","refinementCutoff","mesh_refinement_scale","xytranslate","minZ","POSITIVE_INFINITY","zcoord","getZ","centerMesh","loc_utm","geometryDict","adaptiveSubdivideThreshold","innerPosarray","innerNormals","outerPosarray","outerNormals","isInnerGeometry","_step2","triangle_points","_iterator2","splitCutoffRefineMesh","setShowErrorMessage","setShowThreeViewer","_x2","_showMeshIntensities","_callee3","Npoints","newColors","col","material","mesh","outerGeometryMaterial","outerMesh","middle","animate","_context3","min","vertexColors","side","shininess","roughness","color","computeBoundingBox","boundingBox","getCenter","x","y","z","requestAnimationFrame","update","render","setShowViridisLegend","getLocationFromInput","_getLocationFromInput","locationText","_locationText$split$m","_locationText$split$m2","latitude","longitude","url","response","locationTextModified","test","split","trim","fetchLocation","join","_fetchLocation","_callee2","statuselem","responseData","_context2","fetch","ok","Error","status","json","t0","_setLocation","inputValue","retrieveData","get_file_names","DIVISOR","BUFFER_ZONE","proj4","defs","_transformer$forward","forward","_transformer$forward2","x_utm32","y_utm32","x_rounded","y_rounded","load_tile_left","load_tile_right","load_tile_lower","load_tile_upper","file_list","_x4","_retrieveData","_callee4","baseurl","filenames","geometries","filename","zipData","zip","stlFile","stlData","_context4","arrayBuffer","JSZip","loadAsync","file","Object","keys","files","async","STLLoader","parse","BufferGeometryUtils","t1","finish","_jsxs","alignItems","children","_jsx","src","alt","maxWidth","override","display","margin","borderColor","_useState","useState","_useState2","setInputValue","_useState3","_useState4","loading","_useState5","_useState6","showErrorMessage","_useState7","_useState8","showTooManyUniformsError","_Fragment","onSubmit","event","preventDefault","_x3","setLocation","placeholder","onChange","target","WrongAdress","TooManyUniforms","DotLoader","cssOverride","size","ThreeViewer","Canvas","className","flat","linear","id","opacity","showThreeViewer","showViridisLegend","Main","description","SearchField","ViridisLegend"],"sourceRoot":""}